<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>codeforces</title>
      <link href="/2019/10/29/codeforces/"/>
      <url>/2019/10/29/codeforces/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python网络爬虫程序技术</title>
      <link href="/2019/10/15/spider/"/>
      <url>/2019/10/15/spider/</url>
      
        <content type="html"><![CDATA[<h4 id="flask-web网络"><a href="#flask-web网络" class="headerlink" title="flask web网络"></a>flask web网络</h4><p><a href="http://docs.jinkan.org/docs/flask/" target="_blank" rel="noopener">flask帮助文档</a></p><p><em>flask简介</em><br><a href="https://www.cnblogs.com/gugubeng/p/9722668.html" target="_blank" rel="noopener">blog</a></p><blockquote><p>Flask是一个基于Python实现的Web开发‘微’框架 ‘MicroFramework’<br>Django是一个重型框架<br>官方文档: <a href="http://flask.pocoo.org/docs/0.12/" target="_blank" rel="noopener">http://flask.pocoo.org/docs/0.12/</a><br>中文文档: <a href="http://docs.jinkan.org/docs/flask/" target="_blank" rel="noopener">http://docs.jinkan.org/docs/flask/</a><br>Flask和Django一样，也是一个基于MVC设计模式的Web框架<br>M:Model   V:View   C:Controller<br>MVVM,MVT</p></blockquote><p><em>Flask依赖三个库</em></p><blockquote><p>Jinja2 模板引擎 { % % } 模板：静态html+模板语言 { %  % } # mardown下{ }要加空格<br>Werkzeug WSGI工具集<br>Itsdangerous 基于Django的签名模块</p></blockquote><p><em>流行的Flask</em></p><blockquote><p>Flask流行的主要原因:<br>1.有非常齐全的官方文档，上手非常方便<br>2.有非常好的扩展机制和第三方扩展环境，工作中常见的软件都会有对应的扩展。自己动手实现扩展也很容易<br>3.社区活跃度非常高<br>4.微型框架的形式给了开发者更大的选择空间</p></blockquote><p>flask实例<br><em>server.py</em></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> flask<span class="token keyword">from</span> datetime <span class="token keyword">import</span> timedeltaapp <span class="token operator">=</span> flask<span class="token punctuation">.</span>Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 初始化一个Flask的对象，参数__name__是程序的名称</span><span class="token comment" spellcheck="true"># 用来解决"已修改静态页面代码，静态页面却没有发生变化"</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SEND_FILE_MAX_AGE_DEFAULT'</span><span class="token punctuation">]</span> <span class="token operator">=</span> timedelta<span class="token punctuation">(</span>seconds<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 调试</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'DEBUG'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"你好"</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/he"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"Hi,你好"</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><hr><h4 id="get方法访问网站"><a href="#get方法访问网站" class="headerlink" title="get方法访问网站"></a>get方法访问网站</h4><p><em>笔记概要</em></p><blockquote><p>创建一个服务端，server.py, 一个客户端，client.py<br>客户端GET方式发送数据<br>服务器获取GET发送的数据<br>客户端接收response,并进行解码</p></blockquote><p><em>知识要点</em></p><blockquote><p><strong><a href="https://www.imooc.com/article/49788" target="_blank" rel="noopener">1,urllib.request.urlopen()函数用于实现对目标url的访问。</a></strong><br>函数原型如下：urllib.request.urlopen(url, data=None, [timeout, ]*, cafile=None, capath=None, cadefault=False, context=None)　<br>url:  需要打开的网址<br>data：Post提交的数据<br>timeout：设置网站的访问超时时间</p></blockquote><blockquote><p><strong>2,urllib.parse.quote(“参数”)</strong><br>如果参数是”中文”，必须使用quote进行编码</p></blockquote><blockquote><p><strong>3,flask.request.args.get(“参数”)来获取参数的值</strong></p></blockquote><blockquote><p><strong>4,先启动服务器，再启动客户端</strong></p></blockquote><p><img src="./1570800515258.png" alt="Alt text"></p><p><img src="./1570800504504.png" alt="Alt text"></p><p><em>server.py</em></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> flask<span class="token keyword">from</span> datetime <span class="token keyword">import</span> timedeltaapp <span class="token operator">=</span> flask<span class="token punctuation">.</span>Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SEND_FILE_MAX_AGE_DEFAULT'</span><span class="token punctuation">]</span> <span class="token operator">=</span> timedelta<span class="token punctuation">(</span>seconds<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'DEBUG'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    实现对客户端请求的响应    """</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># if 防止参数不存在的情况</span>        province <span class="token operator">=</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span>            <span class="token string">"province"</span><span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token string">"province"</span> <span class="token keyword">in</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>args <span class="token keyword">else</span> <span class="token string">""</span>        city <span class="token operator">=</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span>            <span class="token string">"city"</span><span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token string">"city"</span> <span class="token keyword">in</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>args <span class="token keyword">else</span><span class="token string">""</span>        <span class="token keyword">return</span> province <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> city    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">return</span><span class="token punctuation">(</span>str<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><em>client.py</em></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse<span class="token triple-quoted-string string">"""客户端GET方法发送数据"""</span>url <span class="token operator">=</span> <span class="token string">"http://127.0.0.1:5000"</span><span class="token keyword">try</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span><span class="token string">"广东"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 对中文汉字进行编码</span>    c <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span><span class="token string">"深圳"</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> <span class="token string">"province="</span> <span class="token operator">+</span> p <span class="token operator">+</span> <span class="token string">"&amp;city="</span> <span class="token operator">+</span> c    resp <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>url <span class="token operator">+</span> <span class="token string">"?"</span> <span class="token operator">+</span> data<span class="token punctuation">)</span>    html <span class="token operator">=</span> resp<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    html <span class="token operator">=</span> html<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span></code></pre><hr><h4 id="POST方法访问网站"><a href="#POST方法访问网站" class="headerlink" title="POST方法访问网站"></a>POST方法访问网站</h4><p><em>笔记概要</em></p><blockquote><p>创建服务器server.py, 客户端client.py<br>启动服务器，再启动客户端<br>对比get,post方法的区别<br>使用post方法<br>get,post方法混用</p></blockquote><p><em>知识点归纳</em></p><blockquote><p><strong>对于server</strong><br>@app.route(“”, methods = [“GET”])默认GET方法<br>需手动添加POST方法，@app.route(“”, methods = [“POST”,”GET”])</p></blockquote><blockquote><p>flask.request.<code>form</code>.get(参数) – post方法<br>flask.request.<code>args</code>.get(参数) –get方法<br>flask.request.<code>values</code>.get(参数) – post,get方法</p></blockquote><blockquote><p><strong>对于client</strong><br>提交的表单data需要转成二进制 data = data.encode()<br>urllib.parse.quote() 转成十六进制 %% %%</p></blockquote><p><em>server.py</em></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> flask<span class="token keyword">from</span> datetime <span class="token keyword">import</span> timedeltaapp <span class="token operator">=</span> flask<span class="token punctuation">.</span>Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SEND_FILE_MAX_AGE_DEFAULT'</span><span class="token punctuation">]</span> <span class="token operator">=</span> timedelta<span class="token punctuation">(</span>seconds<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># app.config['DEBUG'] = True</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"POST"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    服务器获取POST的数据    """</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 解析过的的表单对象的 MultiDict</span>        p <span class="token operator">=</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span>            <span class="token string">"province"</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token string">"province"</span> <span class="token keyword">in</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form <span class="token keyword">else</span><span class="token string">""</span>        c <span class="token operator">=</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span>            <span class="token string">"city"</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token string">"city"</span> <span class="token keyword">in</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form <span class="token keyword">else</span><span class="token string">""</span>        n <span class="token operator">=</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span>            <span class="token string">"note"</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token string">"note"</span> <span class="token keyword">in</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form <span class="token keyword">else</span><span class="token string">""</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>        <span class="token keyword">return</span> p <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> c <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> n    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">return</span> str<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><em>client.py</em></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse<span class="token triple-quoted-string string">"""客户端发生POST数据"""</span>url <span class="token operator">=</span> <span class="token string">"http://127.0.0.1:5000"</span><span class="token keyword">try</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span><span class="token string">"福建"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 十六进制</span>    c <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span><span class="token string">"福州"</span><span class="token punctuation">)</span>    note <span class="token operator">=</span> <span class="token triple-quoted-string string">"""    福州，别称榕城，简称福、榕，隶属于福建省，位于福建省东部、闽江下游及沿海地区，是福建省省会，福建省的政治、文化、交通中心，    海峡西岸经济区中心城市之一。福州建城于公元前202年，历史上曾长期作为福建的政治中心。是中国东南沿海重要都市、东部战区陆军机关驻地。    福州地貌属典型的河口盆地，盆地四周被群山峻岭所环抱，其海拔多在600~1000米之间。    """</span>    note <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>note<span class="token punctuation">)</span>    data <span class="token operator">=</span> <span class="token string">"province="</span> <span class="token operator">+</span> p <span class="token operator">+</span> <span class="token string">"&amp;city="</span> <span class="token operator">+</span> c <span class="token operator">+</span> <span class="token string">"&amp;note="</span> <span class="token operator">+</span> note    data <span class="token operator">=</span> data<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 二进制</span>    resp <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>    html <span class="token operator">=</span> resp<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 对HTTPResponse类型进行处理</span>    html <span class="token operator">=</span> html<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 解码</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span></code></pre><hr><h4 id="Web下载文件"><a href="#Web下载文件" class="headerlink" title="Web下载文件"></a>Web下载文件</h4><p><em>笔记概要</em></p><blockquote><p>创建服务器server.py, 客户端client.py<br>启动服务器，再启动客户端<br>对比get,post方法的区别<br>使用post方法<br>get,post方法混用</p></blockquote><p><em>知识点归纳</em></p><blockquote><p><strong>对于server</strong><br>@app.route(“”, methods = [“GET”])默认GET方法<br>需手动添加POST方法，@app.route(“”, methods = [“POST”,”GET”])</p></blockquote><blockquote><p>flask.request.<code>form</code>.get(参数) – post方法<br>flask.request.<code>args</code>.get(参数) –get方法<br>flask.request.<code>values</code>.get(参数) – post,get方法</p></blockquote><blockquote><p><strong>对于client</strong><br>提交的表单data需要转成二进制 data = data.encode()<br>urllib.parse.quote() 转成十六进制 %% %%</p></blockquote><p><em>server.py</em></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> flask<span class="token keyword">from</span> datetime <span class="token keyword">import</span> timedeltaapp <span class="token operator">=</span> flask<span class="token punctuation">.</span>Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SEND_FILE_MAX_AGE_DEFAULT'</span><span class="token punctuation">]</span> <span class="token operator">=</span> timedelta<span class="token punctuation">(</span>seconds<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># app.config['DEBUG'] = True</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"POST"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    服务器获取POST的数据    """</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 解析过的的表单对象的 MultiDict</span>        p <span class="token operator">=</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span>            <span class="token string">"province"</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token string">"province"</span> <span class="token keyword">in</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form <span class="token keyword">else</span><span class="token string">""</span>        c <span class="token operator">=</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span>            <span class="token string">"city"</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token string">"city"</span> <span class="token keyword">in</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form <span class="token keyword">else</span><span class="token string">""</span>        n <span class="token operator">=</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span>            <span class="token string">"note"</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token string">"note"</span> <span class="token keyword">in</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form <span class="token keyword">else</span><span class="token string">""</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>        <span class="token keyword">return</span> p <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> c <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> n    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">return</span> str<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><hr><h4 id="实践项目-Web学生管理系统"><a href="#实践项目-Web学生管理系统" class="headerlink" title="实践项目-Web学生管理系统"></a>实践项目-Web学生管理系统</h4><p><em>笔记概要</em></p><ul><li><p>创建服务器（server)和客户端（client)</p></li><li><details> <summary><mark>服务器的作用是建立与维护一个sqllite3的学生数据库students.db中学生记录表students:<mark></mark></mark></summary><blockquote><p>学生的记录包括学号No, 姓名Name, 性别Sex与年龄Age, 服务器的作用是建立与维护一个sqllite的学生数据库students.db中的学生记录表studnet:<br>  <code>create table students  (No varchar(16) primary key, Name varchar(16), Sex varchar(8), Age int)</code><br>   服务器建立一个Web网站， 同时提供<strong>查询学生记录， 增加学生记录，删除学生记录</strong>等接口服务。服务器为了与客户端通讯， 建立了opt参数如表：</p><table><thead><tr><th align="left">opt值</th><th align="right">含义</th></tr></thead><tbody><tr><td align="left">init</td><td align="right">初始化学生列表</td></tr><tr><td align="left">insert</td><td align="right">增加学生</td></tr><tr><td align="left">delete</td><td align="right">删除学生</td></tr><tr><td align="left"></td><td align="right">获取学生记录</td></tr></tbody></table></blockquote><p>  <img src="%22F:%5CHexo%5Csource%5Cspic%5C0.jpg%22" alt="0.jpg"></p></details></li></ul><ul><li><strong>服务端和客户端是互相协商的</strong>, 服务器的数据库更新, 客户端students列表也更新(students里存的是每个学生的信息, 学生的信息是个字典eg:  ‘No’: ‘ ‘, ‘Name’: ‘ ‘, ‘Sex’: ‘ ‘, ‘Age’: ‘int类型 ‘)</li><li>只要服务器不重启(实际上是重新建立新的数据库), 那么即使students列<code>students.clear()</code>，依旧可以通过<code>urllib.request.urlopen(url)</code>访问服务器,<strong>服务器的opt=””,则返回数据库里所以的学生记录</strong></li><li><details> <summary><mark>客户端的作用是向服务端发送请求，传递get数据，post的数据,对服务端的数据库进行访问,进行查询,删除,增加,初始化等操作</mark></summary>  图片上传中</details></li></ul><p><em>知识点归纳</em></p><ul><li>了解sqlite3库的使用</li><li>服务端与客户端的联系</li></ul><p><em>stu_server框架</em></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> flask<span class="token keyword">import</span> sqlite3<span class="token keyword">import</span> jsonapp <span class="token operator">=</span> flask<span class="token punctuation">.</span>Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SEND_FILE_MAX_AGE_DEFAULT'</span><span class="token punctuation">]</span> <span class="token operator">=</span> timedelta<span class="token punctuation">(</span>seconds<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">StudentDB</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">openDB</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">closeDB</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">initTable</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">insertRow</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> No<span class="token punctuation">,</span> Name<span class="token punctuation">,</span> Sex<span class="token punctuation">,</span> Age<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">deleteRow</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> NO<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">selectRows</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"POST"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><em>stu_client框架</em></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> urlib<span class="token punctuation">.</span>request<span class="token keyword">import</span> json<span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> No<span class="token punctuation">,</span> Nane<span class="token punctuation">,</span> Sex<span class="token punctuation">,</span> Age<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>students <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>url <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">def</span> <span class="token function">listStudents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> students    <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">insertStudent</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">deleteRow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">try</span><span class="token punctuation">:</span>    readStudents<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"***学生名单***"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"0.初始化学生表"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"1.查看学生列表"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"2.增加学生记录"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"3.删除学生记录"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"4.退出这个程序"</span><span class="token punctuation">)</span>        s <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请选择(0,1,2,3,4):"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            initialize<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span><span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            listStudents<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span><span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            insertRow<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span><span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            deleteRow<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span><span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">break</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span></code></pre><details>  <summary><mark><font color="darkred">server具体代码</font></mark></summary>  <p> - 建议移到编辑器查看</p>  <pre><code>  <pre><code># Web学生管理程序# 服务器程序import flaskimport sqlite3import jsonfrom datetime import timedeltaapp = flask.Flask(__name__)app.config['SEND_FILE_MAX_AGE_DEFAULT'] = timedelta(seconds=1)class StudentDB:def openDB(self):  # 一个学生类OpenDB 打开一个数据库    self.con = sqlite3.connect("students.db")  # 数据库我们用sqlite3来连接    self.cursor = self.con.cursor()  # 获取学员的数据库的它的操作游标def closeDB(self):  # 然后closeDB是关闭数据库    self.con.commit()    self.con.close()def initTable(self):  # 创建学生表    res = {}    try:        self.cursor.execute(            "create table students(No varchar(16) primary key, Name varchar(16), Sex varchar(8), Age int)")        res["msg"] = "OK"    except Exception as e:        res["msg"] = str(e)    return resdef insertRow(self, No, Name, Sex, Age):  # 插入一张学生表    res = {}    try:        self.cursor.execute(            "insert  into  students(No, Name, Sex, Age) values(?,?,?,?)", (No, Name, Sex, Age))  # 数据库插入学生的记录        res["msg"] = "OK"    except Exception as e:        res["msg"] = str(e)    return resdef deleteRow(self, No):  # 删除一个学生记录    res = {}    try:        self.cursor.execute(            "delete from students where No = ?", (No,))  # 对这个No的学生进行删除        res["msg"] = "OK"    except Exception as e:        res["msg"] = str(e)    return resdef selectRows(self):  # 获取学生的所以信息    res = {}    try:        data = []        self.cursor.execute("select *from students order by No")        rows = self.cursor.fetchall()        for row in rows:            # 每一个学生记录都是一个字典，然后又很多的记录，这个记录做成一个列表，做一个data的列表            d = {}            d["No"] = row[0]            d["Name"] = row[1]            d["Sex"] = row[2]            d["Age"] = row[3]            data.append(d)            # 这个data的列表放在另一个字典当中，在一个res的字典当中        res["msg"] = "OK"        res["data"] = data    except Exception as e:        res["msg"] = str(e)    return res# 服务器这端必须要识别它是进行什么操作@app.route("/", methods=["GET", "POST"])def process():# 所以它首先要获取一个opt的值, 这个opt的值知道客户端要做什么事情opt = flask.request.values.get(    "opt") if "opt" in flask.request.values else ""res = {}db = StudentDB()  # opt值获取以后，那么它就创建这个一个studentDB一个对象dbdb.openDB()  # 这个对象叫db, 我们打开这个数据库if opt == "init":  # 如果 opt等于init, 那我就DB掉initTable, 就是创建这个DB， 这个数据库的表格    res = db.initTable()elif opt == "insert":  # 如果 opt等于insert， 那么这个时候我就获取No, Name, Sex, Age然后    No = flask.request.values.get(        "No") if "No" in flask.request.values else ""    Name = flask.request.values.get(        "Name") if "Name" in flask.request.values else ""    Sex = flask.request.values.get(        "Sex") if "Sex" in flask.request.values else ""    Age = flask.request.values.get(        "Age") if "No" in flask.request.values else ""    # 调用insertRow创建一个学生记录, 把这个学生记录插入到数据库当中    res = db.insertRow(No, Name, Sex, Age)elif opt == "delete":  # 如果opt 等于delete, 那我就获取学生的No, 然后    No = flask.request.values.get(        "No") if "No" in flask.request.values else ""    res = db.deleteRow(No)  # 调用db.deleteRow删除这个学生这条记录else:    res = db.selectRows()  # 不然的话我就selectRows获取学生的所以信息db.closeDB()# 返回给客户端, 数据化的数据调用json.dumps(res), 也就是把这些数据，做出一个json字符串, 把它传递给客户端,# 那么客户端那一端把它反编译过来, 就是反序列化过来, 变成一个对象, 变成一个python一个对象,这样双方就可以通讯return json.dumps(res)if __name__ == '__main__':    app.run()</code></pre><p>  </p></code></pre><p></p></details><details>  <summary><mark><font color="darkred">client具体代码</font></mark></summary>  <p> - 建议移到编辑器查看</p>  <pre><code><pre><code>    # Web学生管理程序    # 客户端程序    import urllib.request    import jsonclass Student:  # 创建一个Student的对象    def __init__(self, No, Name, Sex, Age):  # 有No, Name, Sex, Age四个参数        self.No = No        self.Name = Name        self.Sex = Sex        self.Age = Age    def show(self):  # 打印的方法        print("%-16s%-16s%-8s%-4d" % (self.No, self.Name, self.Sex, self.Age))students = []  # 所以的学生放在一个列表当中url = "http://127.0.0.1:5000"  # http的网址def listStudents():  # 列举所以的学生    global students  # 调用全局变量    print("%-16s%-16s%-8s%-4s" % ("No", "Name", "Sex", "Age"))    for s in students:        s.show()def insertStudent(s):  # 插入一个学生记录    global students    i = 0    # 看学生是否存在,就在students的表格里, 是否已经存在， 如果存在就不插入    while (i &lt; len(students) and s.No &gt; students[i].No):        i = i + 1    if(i &lt; len(students) and s.No == students[i].No):        print(s.No + "already exists")        return False    students.insert(i, s)  # 进行插入    return Truedef deleteRow():    global students    No = input("No=")  # 获取学生的No    if(No != ""):        for i in range(len(students)):            if(students[i].No == No):                st = ""                try:                    st = "No=" + urllib.request.quote(No)                    st = st.encode()                    # opt = delte --get的方式传递过去, 向服务器发送我们这个No的数据 --post方式传递过去                    content = urllib.request.urlopen(url + "?opt=delete", st)                    st = content.readline()                    st = json.loads(st.decode())  # 返回回来是结构化的数据, 是个json数据                    st = st["msg"]                except Exception as e:                    st = str(e)                if(st == "OK"):  # 如果OK, 那就表示已经删除                    del students[i]  # 删除对应列表里的学生数据                    print("删除成功")                else:                    print(st)                breakdef insertRow():    No = input("No=")  # 获取No    Name = input("Name=")  # 获取Name    while True:        Sex = input("Sex=")  # 获取Sex        if(Sex == "男" or Sex == "女"):  # 这个性别的输入是有效的            break        else:            print("Sex is not valid")    Age = input("Age=")  # 获取年龄    if(Age == ""):        Age = 0    else:        Age = int(Age)    if No != "" and Name != "":  # 因为No为主键, 不能为空        s = Student(No, Name, Sex, Age)        for x in students:  # 看这是学生对象是否已经存在列表students中            if(x.No == No):                print(No + "already exists")                return  # 若存在则跳出        st = ""        try:  # 不存在            st = "No=" + urllib.request.quote(No) + "&amp;Name=" + urllib.request.quote(                Name) + "&amp;Sex=" + urllib.request.quote(Sex) + "&amp;Age=" + urllib.request.quote(str(Age))            st = st.encode()            content = urllib.request.urlopen(url + "?opt=insert", st)  # 调用远程协议            st = content.read()            st = json.loads(st.decode())            st = st["msg"]        except Exception as e:            st = str(e)        if(st == "OK"):            #  服务器那端插入成功, 客户端也要插入成功            insertStudent(s)            print("增加成功")        else:            print(st)    else:        print("学号,姓名不能为空")def initialize():  # 初始化    st = ""    try:        content = urllib.request.urlopen(url + "?opt=init")        st = content.read()        st = json.loads(st.decode())        st = st["msg"]    except Exception as e:        st = str(e)    if(st == "OK"):        print("初始成功")    else:        print(st)    return stdef readStudents():  # 客户端与服务端互相协商起来工作的,对于客户端,我们可以把相应的数据给它进行读取    global students    try:        students.clear()        # 只要服务端的数据库没有清空,依旧可以读取到        content = urllib.request.urlopen(url)        data = b""        while True:            buf = content.read(1024)  # 因为读取数据可能有点大, 所以我们分段读, 一次读20个字节出来            if(len(buf) &gt; 0):                data = data + buf            else:                break        data = data.decode()  # 读取的信息储存在data里, 编译成字符串        data = json.loads(data)  # 用json的方法把它反序列化成为一个结构化的数据,结构化的数据就是students列表        if(data["msg"] == "OK"):            data = data["data"]            for d in data:                # each d is a dictionary                # 客户端是用studnets的对象来维护学生记录,我们可以把它转化成一个列表                s = Student(d["No"], d["Name"], d["Sex"], d["Age"])                students.append(s)    except Exception as e:        print(e)try:    readStudents()    while True:        print("")        print("***学生名单***")        print("0.初始化学生表")        print("1.查看学生列表")        print("2.增加学生记录")        print("3.删除学生记录")        print("4.退出这个程序")        s = input("请选择(0,1,2,3,4):")        if(s == "0"):            initialize()        elif(s == "1"):            listStudents()        elif(s == "2"):            insertRow()        elif(s == "3"):            deleteRow()        elif(s == "4"):            breakexcept Exception as e:    print(e)</code></pre><p>  </p></code></pre><p></p></details><hr><h4 id="re库的使用"><a href="#re库的使用" class="headerlink" title="re库的使用"></a>re库的使用</h4><p><em>re库主要功能函数</em></p><table><thead><tr><th align="left">函数</th><th align="left">说明</th><th align="left">原型</th></tr></thead><tbody><tr><td align="left">re.search()</td><td align="left">在一个字符串中搜索<strong>匹配正则表达式的第一个位置</strong>，返回match对象</td><td align="left">re.search(pattern,string,flags=0)</td></tr><tr><td align="left">re.match()</td><td align="left">从一个字符串的<strong>开始位置</strong>起匹配正则表达式,<strong>返回match对象</strong></td><td align="left">re.match(pattern,string,flags=0)</td></tr><tr><td align="left">re.findall()</td><td align="left">搜索字符串,以<strong>列表类型</strong>返回全部能匹配的子串</td><td align="left">re.findall(pattern,string,flags=0)</td></tr><tr><td align="left">re.split()</td><td align="left">将一个字符串按照正则表达式匹配结果进行分割,<strong>返回列表类型</strong></td><td align="left">re.split(pattern,string,maxsplit=0,flags=0)</td></tr><tr><td align="left">re.finditer()</td><td align="left">搜索字符串,返回一个匹配结果的迭代类型,每个迭代元素是<strong>match对象</strong></td><td align="left">re.finditer(pattern,string,flags=0)</td></tr><tr><td align="left">re.sub</td><td align="left">在一个字符串中替换所有匹配正则表达式的子串,返回替换后的<strong>字符串</strong></td><td align="left">re.sub(pattern,repl,string,count=0,flags=0)</td></tr></tbody></table><blockquote><p><code>pattern</code>:正则表达式的字符串或原生字符串表示<br><code>string</code>:待匹配字符串<br><code>flags</code>:正则表达式使用时的控制标记<br><code>maxsplit</code>:最大分割数,剩余部分作为最后一个元素输出<br><code>repl</code>:替换匹配字符串的字符串<br><code>count</code>:匹配的最大替换次数</p></blockquote><ul><li>flags:正则表达式使用时的控制标记</li></ul><blockquote><table><thead><tr><th align="left">常用标记</th><th align="left">说明</th><th align="left">原型</th></tr></thead><tbody><tr><td align="left">re.I</td><td align="left">忽略正则表达式的大小写,[A-Z]能够匹配小写字符</td><td align="left">re.IGNORECASE</td></tr><tr><td align="left">re.M</td><td align="left">正则表达式中的^操作符能够将给定字符串的每行当作匹配开始</td><td align="left">re.MULTILINE</td></tr><tr><td align="left">re.S</td><td align="left">正则表达式中的.操作符能够匹配所有字符,默认匹配除换行外的所有字符</td><td align="left">re.DOTALL</td></tr></tbody></table></blockquote><ul><li>maxsplit:最大分割数,剩余部分作为最后一个元素输出<blockquote><p>example:<br><code>re.split(r'[1-9]\d{5}','BIT10081 TSU10084',maxsplit = 1)</code><br><code>&gt;&gt;&gt;['BIT', ’TSU10084‘]</code><br><code>re.split(r'[1-9]\d{5}','BIT10081 TSU10084')</code><br><code>&gt;&gt;&gt;['BIT', 'TSU','']</code></p></blockquote></li></ul><p><em>re库的另一种等价用法</em></p><blockquote><p><code>&gt;&gt;&gt;rst = re.search(r'[1-9]\d{5}','BIT 100081')</code>函数式用法:一次性操作</p></blockquote><blockquote><p><code>&gt;&gt;&gt;regex = re.compile(r'[1-9]\d{5}')</code>面向对象用法:编译后的多次操作<br><code>&gt;&gt;&gt;rst = regex.search('BIT 100081')</code></p></blockquote><table><thead><tr><th align="left">函数</th><th align="left">说明</th><th align="left">原型</th></tr></thead><tbody><tr><td align="left">regex.search()</td><td align="left">在一个字符串中搜索<strong>匹配正则表达式的第一个位置</strong>，<strong>返回match对象</strong></td><td align="left">regex.search(string,flags=0)</td></tr><tr><td align="left">regex.match()</td><td align="left">从一个字符串的<strong>开始位置</strong>起匹配正则表达式,<strong>返回match对象</strong></td><td align="left">regex.match(string,flags=0)</td></tr><tr><td align="left">regex.findall()</td><td align="left">搜索字符串,以<strong>列表类型</strong>返回全部能匹配的子串</td><td align="left">regex.findall(string,flags=0)</td></tr><tr><td align="left">regex.split()</td><td align="left">将一个字符串按照正则表达式匹配结果进行分割,<strong>返回列表类</strong>型</td><td align="left">regex.split(string,maxsplit=0,flags=0)</td></tr><tr><td align="left">regex.finditer()</td><td align="left">搜索字符串,返回一个匹配结果的迭代类型,<strong>每个迭代元素是match对象</strong></td><td align="left">regex.finditer(string,flags=0)</td></tr><tr><td align="left">regex.sub</td><td align="left">在一个字符串中替换所有匹配正则表达式的子串,返回替换后的<strong>字符串</strong></td><td align="left">regex.sub(repl,string,count=0,flags=0)</td></tr></tbody></table><p><em>总结</em></p><blockquote><p>re.方法名 = (regex = re.compile()+regex.方法名)</p></blockquote><hr><h4 id="python正则表达式"><a href="#python正则表达式" class="headerlink" title="python正则表达式"></a>python正则表达式</h4><h5 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h5><blockquote><p>正则表达式是用来匹配与查找字符串的,从网上爬取数据自然或多或少会用到正则表达式。Python的正则表达式要先引入re模块,正则表达式以r引导,例如:</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> rereg <span class="token operator">=</span> r<span class="token string">"\d+"</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token string">"abc123cd"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span></code></pre><blockquote><p>其中<code>r"\d"+</code>正则表达式表示匹配连续的多个数值,search是re中的函数,从”abc123cd”字符串中搜索连续的数值,得到”123”,返回一个匹配对象,因此程序结果如下:<br><code>&lt;sre.SRE_Match.object; span = (3,6), match='123'&gt;</code><br>从结果看出,在指定的字符串中找到了连续的数值,得到”123”,span(3,6)表示开始的位置是3,结束的位置是6,这正好是”123”在”abc123cd”中的位置。</p></blockquote><p><em>知识点归纳</em></p><blockquote><p>re库的使用<br>常用的正则表达式<br>r””,保留字符串的原始形式<br>re库遵循贪婪匹配,匹配最长字符串,若在正则表达式中+’?’则是最小匹配数<br>span()遵循前闭后开</p></blockquote><p><em>正则表达式常用操作符</em></p><table><thead><tr><th align="center">操作符</th><th align="left">说明</th><th align="left">实例</th></tr></thead><tbody><tr><td align="center">.</td><td align="left">表示任何单个字符</td><td align="left"></td></tr><tr><td align="center">[ ]</td><td align="left">字符集，对单个字符给出取值范围</td><td align="left">[abc]表示a,b,c,[a-z]表示a到z单个字符</td></tr><tr><td align="center">[^ ]</td><td align="left">非字符集，对单个字符给出排除范围</td><td align="left">[^abc]表示非a或b或c的单个字符</td></tr><tr><td align="center">*</td><td align="left">前一个字符0次或无限次扩展</td><td align="left">abc*表示ab,abc,abcc,abccc等</td></tr><tr><td align="center">+</td><td align="left">前一个字符1次或无限次扩展</td><td align="left">abc+表示abc,abcc,abcc等</td></tr><tr><td align="center">?</td><td align="left">前一个字符0次或者1次扩展</td><td align="left">abc?表示ab,abc</td></tr><tr><td align="center">|</td><td align="left">左右表达式任意一个</td><td align="left">abc|def表示abc或def</td></tr><tr><td align="center">{ m }</td><td align="left">扩展前一个字符m次</td><td align="left">ab{2}c表示abbc</td></tr><tr><td align="center">{ m,n }</td><td align="left">扩展前一个字符m至n次(含n)</td><td align="left">ab{1,2}表示abc,abbc</td></tr><tr><td align="center">^</td><td align="left">匹配字符串开头</td><td align="left">^abc表示abc且在一个字符串的开头</td></tr><tr><td align="center">$</td><td align="left">匹配字符串结尾</td><td align="left">abc$表示abc且在一个字符串的结尾</td></tr><tr><td align="center">( )</td><td align="left">分组标记,内部只能使用|操作符</td><td align="left">(abc)表示abc,(abc|def)表示abc或def</td></tr><tr><td align="center">\d</td><td align="left">数字,等价于[0-9]</td><td align="left"></td></tr><tr><td align="center">\w</td><td align="left">单词字符,等价于[A-Za-z0-9_]</td><td align="left"></td></tr></tbody></table><hr><p><em>笔记概要</em><br>    </p><details><br>        <summary><strong>1.字符”\d”匹配0-9之间的一个数值</strong></summary><br>        <pre><br>            <code><br>                    import re<br>                    reg = r"\d"<br>                    m = re.search(reg, "abc123cd")<br>                    print(m)<br>            </code><br>                    结果找到第一个数值”1”<br>                    <code>&lt;sre.SRE_Match object; span = (3, 4), match = '1'&gt;</code><br>        </pre><br>    </details><br>    <details><br>        <summary><strong>2.字符”+”重复前一个匹配字符<code>一次或多次</code></strong></summary><br>        <pre><br>            <code><br>                import re<br>                reg = r"b\d+"<br>                m = re.search(reg, "a12b123c")<br>                print(m)<br>            </code><br>            结果找到了”b123”<br>            <code>&lt;sre.SRE_Match object; span = (3, 7), match = 'b123'&gt;</code><br>            注意:r”b\d+”第一个字符匹配”b”,后面是连续的多个数字,因此是”b123”,不是”a12”,(如果多个b呢)<br>        </pre><br>    </details><br>    <details><br>        <summary><strong>3.字符”*“重复前一个匹配字符<code>零次或多次</code></strong></summary><br>        <pre><br>            "*"与"+"类似,但有区别,例如:<br>            <code><br>                import re<br>                reg = r"ab+"<br>                m = re.search(reg, "acabc")<br>                print(m)<br>                reg = r"ab*"<br>                m = re.search(reg, "acabc")<br>                print(m)<br>            </code><br>            结果:<br>            <code>&lt;sre.SRE_Match object; span = (2, 4), match = 'ab'&gt;</code><br>            <code>&lt;sre.SRE_Match object; span = (0, 1), match = 'a'&gt;</code><br>        </pre><br>    </details><br>    <details><br>        <summary><strong>4.字符”?”重复前一个匹配字符<code>零次或一次</code></strong></summary><br>        <pre><br>            <code><br>                import re<br>                reg = r"ab?"<br>                m = re.search(reg, "abbcabc")<br>                print(m)<br>            </code><br>            结果:<br>            <code>&lt;sre.SRE_Match object; span = (0, 2), match = 'ab'&gt;</code><br>            匹配结果是”ab”,其中b重复一次<br>        </pre><br>    </details><br>    <details><br>        <summary><strong>5.字符”.”代表任何一个字符,但是没有特别声明时<code>不代表字符"\n"</code></strong></summary><br>        <pre><br>            <code><br>                import re<br>                s = "xaxby"<br>                m = re.search(r"a.b", s)<br>                print(m)<br>            </code><br>            结果”.”代表了字符”x”<br>            <code>&lt;sre.SRE_Match object; span = (1, 4), match = 'axb'&gt;</code><br>        </pre><br>    </details><br>    <details><br>        <summary><strong>6.字符”|”代表把左右分成两个部分</strong></summary><br>        <pre><br>            <code><br>                import re<br>                s = "xaabababy"<br>                m = re.search(r"ab|ba", s)<br>                print(m)<br>            </code><br>            结果匹配”ab”或者”ba”的可以:<br>            <code>&lt;sre.SRE_Match object; span = (2,4), match = 'ab'&gt;</code><br>        </pre><br>    </details><br>    <details><br>        <summary><strong>7.特殊字符使用反斜线”"引导,例如”\r”, “\n”, “\t”, “\\“分别表示回车,换行,制表符号与反斜线主键本身</strong></summary><br>        <pre><br>            <code><br>                import re<br>                reg = r"a\nb"<br>                m = re.search(reg, "ca\nbcabc")<br>                print(m)<br>            </code><br>            结果匹配”a\n\b”:<br>            <code>&lt;sre.SRE_Match object; span = (1, 4), match = 'a\nb'&gt;</code><br>        </pre><br>    </details><br>    <details><br>        <summary><strong>8.字符”\b”表示单词的结尾,单词的结尾包括各种空白字符或者字符串结尾</strong></summary><br>        <pre><br>            <code><br>                import re<br>                reg = r"car\b"<br>                m = re.search(reg, "The car is black")<br>                print(m)<br>            </code><br>            结果匹配”car”,因为”car”后面是一个空格:<br>            <code>&lt;sre.SRE_Match object; span = (4, 7), match = 'car'&gt;</code><br>        </pre><br>    </details><br>    <details><br>        <summary><strong>9,”[]”中字符是任选择一个,如果字符是ASCII码中连续的一组,那么可以使用”.”符号连接,例如<br>        [0-9]表示0-9其中一个数字,[A-Z]的其中一个大写字符,[0-9A-Z]表示0-9的其中一个数字或者是A-Z的其中一个大写字符</strong></summary><br>        <pre><br>            <code><br>                import re<br>                reg = r"x[0-9]y"<br>                m = re.search(reg, "xyx2y")<br>                print(m)<br>            </code><br>            结果匹配”x2y”:<br>            <code>&lt;sre.SRE_Match object; span = (2, 5), match = 'x2y'&gt;</code><br>        </pre><br>    </details><br>    <details><br>        <summary><strong>10,”^”出现在[]的第一个字符位置,就代表取反,例如[^ab0-9]表示不是a,b,也不是0-9的数字</strong></summary><br>        <pre><br>            <code><br>                import re<br>                reg = r"x[^ab0-9]y"<br>                m = re.search(reg, "xayx2yxcy")<br>                print(m)<br>            </code><br>            结果匹配”xcy”:<br>            <code>&lt;sre.SRE_Match object; span = (6, 9), match = 'xcy'&gt;</code><br>        </pre><br>    </details><br>    <details><br>        <summary><strong>11,”\s”匹配任何空白字符,等价”[\r\n\x20\t\f\v]”</strong></summary><br>        <pre><br>            <code><br>                import re<br>                s = "1a ba\tbxy"<br>                m = re.search(r"a\sb", s)<br>                print(m)<br>            </code><br>            结果匹配”a b”:<br>            <code>&lt;sre.SRE_Match object; span = (1, 4), match = 'a b'&gt;</code><br>        </pre><br>    </details><br>    <details><br>        <summary><strong>12,”\w”匹配包括下划线内的单词字符,等价”[a-zA-Z0-9_]”</strong></summary><br>        <pre><br>            <code><br>                import re<br>                reg = r"\w+"<br>                m = re.search(reg, "Python is easy")<br>                print(m)<br>            </code><br>            结果匹配”Python”:<br>            <code>&lt;sre.SRE_Match object; span = (0, 6), match = 'Python'&gt;</code><br>        </pre><br>    </details><br>    <details><br>        <summary><strong>13,”^”匹配字符串的开头位置</strong></summary><br>        <pre><br>            <code><br>                import re<br>                reg = r"^ab"<br>                m = re.search(reg, "cabcab")<br>                print(m)<br>            </code><br>            结果:None<br>            没有匹配到任何字符,因为”cabcab”中虽然有”ab”,但不是”ab”开头<br>    </pre></details><br>    <details><br>        <summary><strong>14,”$”字符匹配字符串的结尾位置</strong></summary><br>        <pre><br>            <code><br>                import re<br>                reg = r"ab$"<br>                m = re.search(reg, "abcab")<br>                print(m)<br>            </code><br>            匹配结果是最后一个”ab”,而不是第一个”ab”:<br>            <code>&lt;sre.SRE_Match object; span = (3, 5), match = 'ab'&gt;</code><br>        </pre><br>    </details><br>    <details><br>        <summary><strong>15,使用括号(…)可以把(…)看成一个整体,经常与”+”,”*”,”?”的连续使用,对(…)部分进行重复</strong></summary><br>        <pre><br>            <code><br>                import re<br>                reg = r"(ab)+"<br>                m = re.search(reg, "ababcab")<br>                print(m)<br>            </code><br>            结果匹配”abab”,”+”对ab进行了重复:<br>            <code>&lt;sre.SRE_Match object; span = (0, 4), match = 'abab'&gt;</code><br>        </pre><br>    </details><p></p><p><em>练习</em></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> res <span class="token operator">=</span> <span class="token string">"I am testing search function"</span>reg <span class="token operator">=</span> r<span class="token string">"[A-Za-z]+\b"</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>reg<span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token keyword">while</span> m <span class="token operator">!=</span> None<span class="token punctuation">:</span>    start <span class="token operator">=</span> m<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    end <span class="token operator">=</span> m<span class="token punctuation">.</span>end<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>start<span class="token punctuation">:</span>end<span class="token punctuation">]</span><span class="token punctuation">)</span>    s <span class="token operator">=</span> s<span class="token punctuation">[</span>end<span class="token punctuation">:</span><span class="token punctuation">]</span>    m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>reg<span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""Iamtestingsearchfunction程序开始匹配到一个单词后m.start(),m.end()就是单词的起始位置,s[start:end]为截取的单词,之后程序再次匹配字符串s=s[end:],即字符串的后半段,一直匹配完毕为止就找出每个单词"""</span></code></pre><h4 id="实践项目-爬取学生信息"><a href="#实践项目-爬取学生信息" class="headerlink" title="实践项目-爬取学生信息"></a>实践项目-爬取学生信息</h4><p><em>实践要求</em></p><ul><li>设计一个Web服务器server.py,它读取students.txt文件中的学生数据,以表格的形式呈现在网页上,其中students.txt的格式如下:<blockquote><p>No,Name,Gender,Age<br>1001,张零山,男,20<br>1002,张一山,男,20<br>1003,张二山,男,20<br>1004,张三山,男,20<br>第一行是学生表格的标题,有学号No,姓名Name,性别Gender,年龄Age,每个学生占一行,各个数据之间用逗号隔开</p></blockquote></li><li>设计一个客户端的爬虫程序,它从这个网页上爬取学生的这些信息,存储到数据库中.学生数据库可以使用sqlite数据库students.db</li></ul><p><em>服务器程序</em></p><blockquote><p>服务器程序首先读取同一个目录下的students.txt文件,然后组成一张<code>&lt;table&gt;</code><br>的html表格用于网页的形式呈现,效果如图:<br>学生信息表</p></blockquote><blockquote><table><thead><tr><th align="center">No</th><th align="center">Name</th><th align="center">Gender</th><th align="center">Age</th></tr></thead><tbody><tr><td align="center">1001</td><td align="center">张零山</td><td align="center">男</td><td align="center">20</td></tr><tr><td align="center">1002</td><td align="center">张一山</td><td align="center">男</td><td align="center">20</td></tr><tr><td align="center">1003</td><td align="center">张二山</td><td align="center">男</td><td align="center">20</td></tr><tr><td align="center">1004</td><td align="center">张三山</td><td align="center">男</td><td align="center">20</td></tr></tbody></table></blockquote><blockquote><p>程序先检查students.txt文件是否存在,如果存在就打开读取,读出的一行的数据是用逗号分开的,<br>因此使用split(“,”)函数拆分开,然后把一行组织在…的行中,把每个数据组织在…的单元格中,程序如下：</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 爬取学生信息</span><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token keyword">import</span> os<span class="token keyword">from</span> datetime <span class="token keyword">import</span> timedeltaapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SEND_FILE_MAX_AGE_DEFAULT'</span><span class="token punctuation">]</span> <span class="token operator">=</span> timedelta<span class="token punctuation">(</span>seconds<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"students.txt"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        st <span class="token operator">=</span> <span class="token string">"&lt;h3>学生信息表&lt;h3>"</span>        st <span class="token operator">=</span> st <span class="token operator">+</span> <span class="token string">"&lt;table border = '1' width = '300'>"</span>        fobj <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"students.txt"</span><span class="token punctuation">,</span> <span class="token string">"rt"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 读取一行,去掉行尾部"\n"换行符号</span>            s <span class="token operator">=</span> fobj<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 如果读到文件末尾部就退出</span>            <span class="token keyword">if</span> s <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>            s <span class="token operator">=</span> s<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span>            st <span class="token operator">=</span> st <span class="token operator">+</span> <span class="token string">"&lt;tr>"</span>            <span class="token comment" spellcheck="true"># 把各个数据组织在&lt;td>...&lt;/td>的单元中</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                st <span class="token operator">=</span> st <span class="token operator">+</span> <span class="token string">"&lt;td>"</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"&lt;/td>"</span>            <span class="token comment" spellcheck="true"># 完成一行</span>            st <span class="token operator">=</span> st <span class="token operator">+</span> <span class="token string">"&lt;/tr>"</span>        fobj<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        st <span class="token operator">=</span> st <span class="token operator">+</span> <span class="token string">"&lt;/table>"</span>        <span class="token keyword">return</span> st<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><em>客户端程序</em></p><blockquote><p>客户端程序访问””网址,从中下载其html页面,这个网页的结果如下:<br>程序先分解html中<code>&lt;tr&gt;...&lt;/tr&gt;</code>标签<br>接着在分解<code>&lt;tr&gt;&lt;/tr&gt;</code>标签中的每个这样就得到所需的数据了</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 爬取学生学习客户端</span><span class="token keyword">import</span> re<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">import</span> sqlite3<span class="token keyword">def</span> <span class="token function">searchWeb</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">:</span>    rows <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 查询第一个&lt;tr>...&lt;/tr></span>    m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"&lt;tr>"</span><span class="token punctuation">,</span> html<span class="token punctuation">)</span>    n <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"&lt;/tr>"</span><span class="token punctuation">,</span> html<span class="token punctuation">)</span>    <span class="token keyword">if</span> m <span class="token operator">!=</span> None <span class="token operator">and</span> n <span class="token operator">!=</span> None<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 跳过第一行的标题</span>        html <span class="token operator">=</span> html<span class="token punctuation">[</span>n<span class="token punctuation">.</span>end<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 查询第二行开始的数据部分</span>    m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"&lt;tr>"</span><span class="token punctuation">,</span> html<span class="token punctuation">)</span>    n <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"&lt;/tr>"</span><span class="token punctuation">,</span> html<span class="token punctuation">)</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>m <span class="token operator">!=</span> None <span class="token operator">and</span> n <span class="token operator">!=</span> None<span class="token punctuation">)</span><span class="token punctuation">:</span>        row <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># start是&lt;tr>的结束部分</span>        start <span class="token operator">=</span> m<span class="token punctuation">.</span>end<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># end是&lt;/tr>的起始部分</span>        end <span class="token operator">=</span> n<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># t 是&lt;tr>...&lt;/tr>包含得到字符串</span>        t <span class="token operator">=</span> html<span class="token punctuation">[</span>start<span class="token punctuation">:</span>end<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># html[n.end():]是剩余的html</span>        html <span class="token operator">=</span> html<span class="token punctuation">[</span>n<span class="token punctuation">.</span>end<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 查询第一组&lt;td>...&lt;/td>的数据</span>        a <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"&lt;td>"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>        b <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"&lt;/td>"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>        i <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>a <span class="token operator">!=</span> None <span class="token operator">and</span> n <span class="token operator">!=</span> None<span class="token punctuation">)</span><span class="token punctuation">:</span>            start <span class="token operator">=</span> a<span class="token punctuation">.</span>end<span class="token punctuation">(</span><span class="token punctuation">)</span>            end <span class="token operator">=</span> b<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 找到一组&lt;td>...&lt;/td>的数据</span>            row<span class="token punctuation">.</span>append<span class="token punctuation">(</span>t<span class="token punctuation">[</span>start<span class="token punctuation">:</span>end<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># t[b.end():]是本行剩余的部分</span>            t <span class="token operator">=</span> t<span class="token punctuation">[</span>b<span class="token punctuation">.</span>end<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span>            a <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"&lt;td>"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>            b <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"&lt;/td>"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 增加一行数据</span>        rows<span class="token punctuation">.</span>append<span class="token punctuation">(</span>row<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 继续查找下一行&lt;tr>...&lt;/tr></span>        m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"&lt;tr>"</span><span class="token punctuation">,</span> html<span class="token punctuation">)</span>        n <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"&lt;/tr>"</span><span class="token punctuation">,</span> html<span class="token punctuation">)</span>    <span class="token keyword">return</span> rows<span class="token keyword">def</span> <span class="token function">saveDB</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>rows<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        con <span class="token operator">=</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">"students.db"</span><span class="token punctuation">)</span>        cursor <span class="token operator">=</span> con<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"drop table students"</span><span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">pass</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            sql <span class="token operator">=</span> <span class="token string">"create table students (No varchar(128) primary key, Name varchar(128), Gender varchar(128), Age int)"</span>            cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">pass</span>        <span class="token keyword">for</span> row <span class="token keyword">in</span> rows<span class="token punctuation">:</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>row<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                sql <span class="token operator">=</span> <span class="token string">"insert into students(No,Name,Gender,Age) values(?,?,?,?)"</span>                <span class="token keyword">try</span><span class="token punctuation">:</span>                    No <span class="token operator">=</span> row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                    Name <span class="token operator">=</span> row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>                    Gender <span class="token operator">=</span> row<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>                    Age <span class="token operator">=</span> int<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                    cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token punctuation">(</span>No<span class="token punctuation">,</span> Name<span class="token punctuation">,</span> Gender<span class="token punctuation">,</span> Age<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 数据库提交保存</span>        con<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>        con<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">showWeb</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Showing data from Web..."</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> rows<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">showDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Showing data from DB:"</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        con <span class="token operator">=</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">"students.db"</span><span class="token punctuation">)</span>        cursor <span class="token operator">=</span> con<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>        cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"select* from students"</span><span class="token punctuation">)</span>        rows <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> row <span class="token keyword">in</span> rows<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span>        con<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">"http://127.0.0.1:5000/"</span>    resp <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    data <span class="token operator">=</span> resp<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    html <span class="token operator">=</span> data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>    rows <span class="token operator">=</span> searchWeb<span class="token punctuation">(</span>html<span class="token punctuation">)</span>    showWeb<span class="token punctuation">(</span>rows<span class="token punctuation">)</span>    saveDB<span class="token punctuation">(</span>rows<span class="token punctuation">)</span>    showDB<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span></code></pre><p><strong>注意</strong></p><ul><li><code>s = fobj.readline().strip("\n")</code>中的<code>strip</code>不能用<code>sqlit("\n")</code></li><li><code>import urllib.request</code></li><li><code>&lt;tr&gt;...&lt;/tr&gt;</code>与<code>&lt;td&gt;...&lt;/td&gt;</code>不要搞混了</li><li><a href="https://blog.csdn.net/sinat_35886587/article/details/80561959" target="_blank" rel="noopener">sqlit3</a></li><li>相关细节见代码</li><li>心情不好,细节后续会继续补充</li></ul><hr><h4 id="BeautifulSoup的使用"><a href="#BeautifulSoup的使用" class="headerlink" title="BeautifulSoup的使用"></a><a href="https://www.cnblogs.com/youxin/p/3190433.html" target="_blank" rel="noopener">BeautifulSoup的使用</a></h4><p><a href="https://blog.csdn.net/lu8000/article/details/82313054" target="_blank" rel="noopener">参考博客</a></p><ul><li><p>安装</p><blockquote><p>打开cmd运行<code>pip install bs4</code></p></blockquote></li><li><p>使用</p><blockquote><p><code>from bs4 import BeautifulSoup</code><br>soup = BeautifulSoup(文件,解析方法)</p></blockquote></li></ul><p><em>code</em></p><pre class=" language-python"><code class="language-python">    <span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup    fobj <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"index.html"</span><span class="token punctuation">,</span> <span class="token string">'rb+'</span><span class="token punctuation">)</span>    html <span class="token operator">=</span> fobj<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    fobj<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print(html)</span>    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>prettify<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><em>index.html</em></p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>The Dormouse's story<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>            The Dormouse's story        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>story<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        Once upon a time there were three little sisters; and their names were        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://example.com/elsie<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sister<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>link1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Elsie<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>,        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://example.com/elsie<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sister<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>link2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Lacie<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>and        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://example.com/elsie<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sister<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>link3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Tillie<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>;        and they lived at the bottom og a well.    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>story<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><ul><li>基本方法的使用见参考博客</li><li>BeautifulSoup获取元素的属性值</li><li>BeautifulSoup获取元素包含的文本值</li><li>BeautifulSoup高级查找见下一章</li></ul><hr><h4 id="BeautifulSoup的高级使用"><a href="#BeautifulSoup的高级使用" class="headerlink" title="BeautifulSoup的高级使用"></a>BeautifulSoup的高级使用</h4><p><em>引入</em></p><blockquote><p>一般的find或者find_all都能满足我们的需求，如果还不能那么可以设计一个查找函数来进行查找</p></blockquote><p><em>要求</em></p><blockquote><p>查找文档中的<code>"http://example.com/lacie"</code>的节点元素<code>&lt;a&gt;</code></p></blockquote><p><em>常用方法</em></p><blockquote><p><code>find_all()</code>函数的原型如下:<br>1.<code>find_all(self, name = None, attrs = {}, recursive = True, text = None, limit = None, **kwargs)</code><br>2.<code>self</code>表明它是一个类成员函数;<br>3.<code>name</code>是要查找的tag元素名称,默认是None,如果不提供,就是查找所以元素;<br>4.<code>attrs</code>是元素的属性,它是一个字典,默认是空,如果提供就是查找有这个指定属性的元素(<br>在name = None时,只要所以的标签满足attrs,就能打印出来)<br>5.<code>recursive</code>指定查找是否在元素节点的子树下面全范围进行,默认是True;<br>6.后面的<code>text,limit,kwargs</code>参数比较复杂,将在后面介绍<br>7.find_all函数返回查找到的所以指定元素的列表,每个元素是一个bs4.element.Tag对象<br>8.find_all是查找所以满足要求的元素节点,如果我们只查找一个元素节点,那么可以使用find函数</p><p><code>find</code>函数原型如下:<br>1.<code>find(self,name = None, attrs = {}, recursive = True, text = None, limit = None, **kwargs)</code><br>2.使用方法与find_all类似，不同的是它只返回第一个满足要求的节点,不是一个列表</p></blockquote><p><em>实例</em></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoupdoc <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;html>&lt;head>&lt;title>The Dormouse's story&lt;/title>&lt;/head>&lt;body>&lt;p class="title">&lt;b>The Dormouse's story&lt;/b>&lt;/p>    &lt;p class="story">        Once upon a time there were three little sisters; and their names were        &lt;a href="http://example.com/elsie" class="sister" id="link1">Elsie&lt;/a>,        &lt;a href="http://example.com/lacie" class="sister" id="link2">Lacie&lt;/a>and        &lt;a href="http://example.com/tillie" class="sister" id="link3">Tillie&lt;/a>;        and they lived at the bottom og a well.    &lt;/p>    &lt;p class="story">...&lt;/p>&lt;/body>&lt;/html>"""</span><span class="token keyword">def</span> <span class="token function">myFilter</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>tag<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>tag<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string">'a'</span> <span class="token operator">and</span> tag<span class="token punctuation">.</span>has_attr<span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">)</span> <span class="token operator">and</span> tag<span class="token punctuation">[</span><span class="token string">"href"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"http://example.com/lacie"</span><span class="token punctuation">)</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>doc<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span>tag <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>myFilter<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span></code></pre><p><em>结果</em></p><blockquote><p>html<br>head<br>title<br>body<br>p<br>b<br>p<br>a<br>a<br>a<br>p<br><code>[&lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;]</code></p></blockquote><p><em>说明</em></p><blockquote><p>在程序中我们定义一个筛选函数myFilter(tag),它的参数是tag对象,在调用soup.find_all(myFilter)时程序会把每一个tag元素传递给myFilter函数,由该函数决定这个tag的取舍,如果myFilter返回True就保留这个tag到结果集中,不然就丢掉这个tag。因此程序执行时可以看到上述的结果等一个个tag经过myFilter的筛选,只有节点<code>[&lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;]</code>满足要求<br>因此结果为:<br><code>[&lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;]</code><br>其中:<br>tag.name是tag的名称;<br>tag.has_attr(attName)判断tag是否有attName属性:<br>tag[attName]是tag的attName属性值;</p></blockquote><p><em>注意</em></p><blockquote><p>return (tag.name == ‘p’ and tag[“class”] ==<code>"story"</code>) –无返回值<br> return (tag.name == ‘p’ and tag[“class”] ==<code>["story"]</code>) –有返回值<br>tag[“class”],它的词一定是个列表,但只有一个元素时,也需要使用列表</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token string">""</span><span class="token string">""</span><span class="token string">""</span><span class="token keyword">def</span> <span class="token function">myFilter</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>tag<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>tag<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string">'p'</span> <span class="token operator">and</span> tag<span class="token punctuation">[</span><span class="token string">"class"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token string">"story"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>doc<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span>tag <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>myFilter<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span></code></pre><p><em>结果</em></p><pre class=" language-html"><code class="language-html">[<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>story<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        Once upon a time there were three little sisters; and their names were        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sister<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://example.com/elsie<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>link1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Elsie<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>,        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sister<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://example.com/lacie<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>link2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Lacie<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>and        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sister<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://example.com/tillie<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>link3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Tillie<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>;        and they lived at the bottom og a well.    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>, <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>story<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>]</code></pre><hr><h4 id="BeautifulSoup遍历文档元素"><a href="#BeautifulSoup遍历文档元素" class="headerlink" title="BeautifulSoup遍历文档元素"></a>BeautifulSoup遍历文档元素</h4><table><thead><tr><th align="left">方法</th><th align="left">作用</th><th align="left">注意</th></tr></thead><tbody><tr><td align="left">.parent</td><td align="left">获取元素节点的父节点</td><td align="left"><code>&lt;html&gt;</code>的父节点是名称为[document]的节点，这个节点的父节点是None</td></tr><tr><td align="left">.children</td><td align="left">获取元素节点的直接子元素节点</td><td align="left">包括element,text等类型的节点，迭代获取</td></tr><tr><td align="left">.desendants</td><td align="left">获取元素节点的所有子孙元素节点</td><td align="left">迭代获取</td></tr><tr><td align="left">.next_sibling</td><td align="left">获取元素节点的兄弟节点</td><td align="left">获取下一个兄弟节点,包括element,text等类型的节点</td></tr><tr><td align="left">.previous_sibling</td><td align="left">获取元素节点的兄弟节点</td><td align="left">获取上一个兄弟节点,包括element,text等类型节点</td></tr></tbody></table><hr><h4 id="BeautifulSoup使用CSS语法查找元素"><a href="#BeautifulSoup使用CSS语法查找元素" class="headerlink" title="BeautifulSoup使用CSS语法查找元素"></a>BeautifulSoup使用CSS语法查找元素</h4><p><em>方法</em></p><blockquote><p>tag.select(css)<br>其中tag是一个bs4.element.Tag对象，即HTML中的一个element节点元素,select是它的查找方法，css是类似css语法的一个字符串，一般结构如下：<br>[tagName][attName[=value]]<br>其中[…]部分是可选的；<br>tagName是元素名称，如果没有指定就是所有元素；<br>attName=value是属性名称，value是它对应的值，可以不指定属性，在指定了属性后也可以不指定值；<br>tag.select(css)返回一个bs4.element.Tag的列表，哪怕只有一个元素也是一个列表；</p></blockquote><ul><li><p>查找元素节点</p><blockquote><table><thead><tr><th align="left">函数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">soup.select(“a”)</td><td align="left">查找文档中<strong>所有</strong><code>&lt;a&gt;</code>元素节点</td></tr><tr><td align="left">soup.select(“p a”)</td><td align="left">查找文档中<strong>所有</strong><code>&lt;p&gt;</code>节点下的<code>&lt;a&gt;</code>元素节点</td></tr><tr><td align="left">soup.select(“p [class=’story’] a”)</td><td align="left">查找文档中<strong>所有属性</strong><code>class='story'</code>的<code>&lt;p&gt;</code>节点下的<strong>所有</strong><code>&lt;a&gt;</code>元素节点</td></tr><tr><td align="left">soup.select(“p [class] a”)</td><td align="left">查找文档中<strong>所有具有</strong><code>class</code>属性的<code>&lt;p&gt;</code>节点下的<strong>所有</strong><code>&lt;a&gt;</code>元素节点</td></tr><tr><td align="left">soup.select(“a[id = ‘link1’]”)</td><td align="left">查找属性为<code>id = "link1"</code>的<code>&lt;a&gt;</code>节点</td></tr><tr><td align="left">soup.select(“body head title”)</td><td align="left">查找<code>&lt;body&gt;</code>下面<code>&lt;head&gt;</code>下面的<code>&lt;title&gt;</code>节点</td></tr><tr><td align="left">soup.select(“body [class] “)</td><td align="left">查找<code>&lt;body&gt;</code>下面<strong>所有</strong>具有<code>class</code>属性的节点</td></tr><tr><td align="left">soup.select(“body [class] a”)</td><td align="left">查找<code>&lt;body&gt;</code>下面<strong>所有</strong>具有<code>class</code>属性的节点下面的<code>&lt;a&gt;</code>节点</td></tr></tbody></table></blockquote></li></ul><blockquote><p><em>注意</em> :<strong>写[=value]是value里空格数不同可能导致结果搜索不到，例如：</strong><br><strong>class=”story  xxx”(1个空格)与class=”story  xxx”(两个空格)是不同的，看你所查找的文档树里所包含的空格数 <code>&lt;div class = "story  xxx"&gt;&lt;/div&gt;</code></strong></p></blockquote><ul><li><p>属性语法规则</p><blockquote><p>在CSS结构中[attName=value]中表示attrName与value相等，也可以指定不等，包含等运算关系，具体运算如下表</p></blockquote><blockquote><table><thead><tr><th align="left">选择器</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">[attName]</td><td align="left">用于选取带有指定属性的元素</td></tr><tr><td align="left">[attName=value]</td><td align="left">用于选取带有指定属性和值的元素</td></tr><tr><td align="left">[attName^=value]</td><td align="left">匹配属性值以指定值开头的每个元素</td></tr><tr><td align="left">[attName$=value]</td><td align="left">匹配属性值以指定值结尾的每个元素</td></tr><tr><td align="left">[attName*=value]</td><td align="left">匹配属性值中包含指定值的每个元素</td></tr></tbody></table></blockquote></li><li><p>查找</p></li></ul><table><thead><tr><th align="left">举例</th><th align="left">描述</th><th align="center">注意</th></tr></thead><tbody><tr><td align="left">select(“div p”)</td><td align="left">查找<code>&lt;div&gt;</code>节点下面的所有子孙<code>&lt;p&gt;</code>节点</td><td align="center">节点元素之间用空格分开</td></tr><tr><td align="left">select(“div &gt; p”)</td><td align="left">查找<code>&lt;div&gt;</code>节点下面的所有直接节点<code>&lt;p&gt;</code>，不包含孙节点</td><td align="center">节点元素之间用<code>&gt;</code>分开，注意<code>&gt;</code>前后至少包含一个空格</td></tr><tr><td align="left">select(“div ~ p”)</td><td align="left">查找<code>&lt;div&gt;</code>后面的所有同级别的<code>&lt;p&gt;</code>兄弟节点</td><td align="center">节点元素之间用<code>~</code>分开，注意<code>~</code>前后至少包含一个空格</td></tr><tr><td align="left">select(“div + p”)</td><td align="left">查找<code>&lt;div&gt;</code>前面<strong>第一个</strong>同级别的<code>&lt;p&gt;</code>兄弟节点</td><td align="center">节点元素之间用<code>+</code>分开，注意<code>+</code>前后至少包含一个空格</td></tr></tbody></table><hr><h4 id="实践项目–爬取中国天气网"><a href="#实践项目–爬取中国天气网" class="headerlink" title="实践项目–爬取中国天气网"></a>实践项目–爬取中国天气网</h4><p><em>实践要求</em></p><blockquote><p>爬取所查找城市的近7天的天气状况，并创建weather.db储存(city, date, weather, temp)</p></blockquote><p><em>实践准备</em></p><blockquote><p>网址url = “<a href="http://www.weather.com.cn/”" target="_blank" rel="noopener">http://www.weather.com.cn/”</a><br><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc.zh/" target="_blank" rel="noopener">BeautifulSoup中文文档</a><br><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/#unicode-dammit" target="_blank" rel="noopener">UnicodeDammit文档</a><br><a href="https://stackoverflow.com/questions/436220/determine-the-encoding-of-text-in-python" target="_blank" rel="noopener">UnicodeDammit编码说明</a></p></blockquote><p><em>html界面解析</em></p><blockquote><p>打开网站，选择一个城市，比如福州会发现url = “<a href="http://www.weather.com.cn/weather/101230101.shtml&quot;" target="_blank" rel="noopener">http://www.weather.com.cn/weather/101230101.shtml"</a><br>选择近7天，找到今天，右击检查<br>7天内的信息都存在标签<code>&lt;ul class='t clearfix'&gt;&lt;/ur&gt;</code>里<br>每天的信息都存在标签<code>&lt;li&gt;&lt;&lt;/li&gt;</code>里<br>日期存在标签<code>&lt;h1&gt;&lt;/h1&gt;</code><br>天气存在标签<code>&lt;p class = "wea"&gt;&lt;/p&gt;</code>里<br>温度存在标签<code>&lt;p class = "tem"&gt;&lt;/p&gt;</code>里<br>在<code>&lt;p class = "tem"&gt;&lt;/p&gt;</code>下还有两个子标签<code>&lt;span&gt;&lt;/span&gt;</code>和<code>&lt;i&gt;&lt;/i&gt;</code></p></blockquote><p><em>注意事项</em></p><blockquote><p><strong>1.(其中今天的温度只有)<code>&lt;i&gt;&lt;/i&gt;</code>标签</strong><br><strong>2.标签一定不要写错</strong>(今天只有标签<code>&lt;i&gt;&lt;/i&gt;</code>)<br><strong>3.运用BeautifulSoup查询css文档树,运用select时一定要注意空格的问题,例如：</strong><br><strong><code>soup.select(p[class="tem" span])</code>父节点与attr之间没有空格，而与子孙节点之间有空格</strong><br><strong>4.<code>__init__</code>不要写错了</strong>,(就写错成了<code>__int__</code>)</p></blockquote><p><em>代码实现中遇到的问题</em></p><blockquote><p>1.AttributeError: ‘WeatherForecast’ object has no attribute ‘cityCode’(由于<code>__init__</code>写错了)<br>2.运行时list index out of range,列表越界或者为空(由于select(css)时,里面的空格问题 <code>p [class] i</code>,p与class之间多打了空格)</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> UnicodeDammit<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">import</span> sqlite3<span class="token keyword">class</span> <span class="token class-name">WeatherDB</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">openDB</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>con <span class="token operator">=</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">"weather.db"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>cursor <span class="token operator">=</span> self<span class="token punctuation">.</span>con<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>                "create table weathers <span class="token punctuation">(</span>wCity varchar<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span> wDate varchar<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\                wWeather varchar<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span> wTemp varchar<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span> constraint pk_weather primary key<span class="token punctuation">(</span>wCity<span class="token punctuation">,</span>wDate<span class="token punctuation">)</span><span class="token punctuation">)</span>"<span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"delete from weathers"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">closeDB</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>con<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>con<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">insert</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> city<span class="token punctuation">,</span> date<span class="token punctuation">,</span> weather<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>                <span class="token string">"insert into weathers(wCity,wDate,wWeather,wTemp) values(?,?,?,?)"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>city<span class="token punctuation">,</span> date<span class="token punctuation">,</span> weather<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"select*from weathers"</span><span class="token punctuation">)</span>        rows <span class="token operator">=</span> self<span class="token punctuation">.</span>cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>        tplt1 <span class="token operator">=</span> <span class="token string">"{:16}\t{:20}\t{:32}\t{:20}"</span>        tplt2 <span class="token operator">=</span> <span class="token string">"{:16}\t{:16}\t{:32}\t{:16}"</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>tplt1<span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"城市"</span><span class="token punctuation">,</span> <span class="token string">"日期"</span><span class="token punctuation">,</span> <span class="token string">"天气"</span><span class="token punctuation">,</span> <span class="token string">"温度"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> row <span class="token keyword">in</span> rows<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>tplt2<span class="token punctuation">.</span>format<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">WeatherForecast</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true"># 伪装成浏览器访问网站</span>            <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36"</span><span class="token punctuation">}</span>            <span class="token comment" spellcheck="true"># 默认只能查找这四个城市,后期可能更改根据城市名找到对应码,形成新的url，来获取数据</span>        self<span class="token punctuation">.</span>cityCode <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"北京"</span><span class="token punctuation">:</span> <span class="token string">"101010100"</span><span class="token punctuation">,</span> <span class="token string">"上海"</span><span class="token punctuation">:</span> <span class="token string">"101020100"</span><span class="token punctuation">,</span>                         <span class="token string">"广州"</span><span class="token punctuation">:</span> <span class="token string">"101280101"</span><span class="token punctuation">,</span> <span class="token string">"深圳"</span><span class="token punctuation">:</span> <span class="token string">"101280601"</span><span class="token punctuation">}</span>    <span class="token keyword">def</span> <span class="token function">forecastCity</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> city<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 访问城市是否在默认字典里</span>        <span class="token keyword">if</span> city <span class="token operator">not</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>cityCode<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>city <span class="token operator">+</span> <span class="token string">"code cannot be found"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>        url <span class="token operator">=</span> <span class="token string">"http://www.weather.com.cn/weather/"</span> <span class="token operator">+</span> \            self<span class="token punctuation">.</span>cityCode<span class="token punctuation">[</span>city<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">".shtml"</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            req <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>self<span class="token punctuation">.</span>headers<span class="token punctuation">)</span>            data <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span>            data <span class="token operator">=</span> data<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 判断编码类型</span>            dammit <span class="token operator">=</span> UnicodeDammit<span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"utf-8"</span><span class="token punctuation">,</span> <span class="token string">"gbk"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            data <span class="token operator">=</span> dammit<span class="token punctuation">.</span>unicode_markup            soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">"lxml"</span><span class="token punctuation">)</span>            lis <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">"ul[class='t clearfix'] li"</span><span class="token punctuation">)</span>            n <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment" spellcheck="true"># 判断是否当天</span>            <span class="token keyword">for</span> li <span class="token keyword">in</span> lis<span class="token punctuation">:</span>                <span class="token keyword">try</span><span class="token punctuation">:</span>                    date <span class="token operator">=</span> li<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'h1'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text                    weather <span class="token operator">=</span> li<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'p[class="wea"]'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text                    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                        temp <span class="token operator">=</span> li<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'p[class="tem"] span'</span><span class="token punctuation">)</span><span class="token punctuation">[</span>                            <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> li<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'p[class="tem"] i'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        temp <span class="token operator">=</span> li<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'p[class="tem"] i'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text                    n <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">1</span>                    self<span class="token punctuation">.</span>db<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>city<span class="token punctuation">,</span> date<span class="token punctuation">,</span> weather<span class="token punctuation">,</span> temp<span class="token punctuation">)</span>                <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">process</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cities<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>db <span class="token operator">=</span> WeatherDB<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>db<span class="token punctuation">.</span>openDB<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> city <span class="token keyword">in</span> cities<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>forecastCity<span class="token punctuation">(</span>city<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>db<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>db<span class="token punctuation">.</span>closeDB<span class="token punctuation">(</span><span class="token punctuation">)</span>ws <span class="token operator">=</span> WeatherForecast<span class="token punctuation">(</span><span class="token punctuation">)</span>ws<span class="token punctuation">.</span>process<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"北京"</span><span class="token punctuation">,</span> <span class="token string">"上海"</span><span class="token punctuation">,</span> <span class="token string">"广州"</span><span class="token punctuation">,</span> <span class="token string">"深圳"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"completed"</span><span class="token punctuation">)</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/10/13/hello-world/"/>
      <url>/2019/10/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> npm </tag>
            
            <tag> nvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown使用</title>
      <link href="/2019/09/05/markdown/"/>
      <url>/2019/09/05/markdown/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
