<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2019/10/15/spider/"/>
      <url>/2019/10/15/spider/</url>
      
        <content type="html"><![CDATA[<h4 id="get方法访问网站"><a href="#get方法访问网站" class="headerlink" title="get方法访问网站"></a>get方法访问网站</h4><hr><p><em>笔记概要</em></p><blockquote><p>创建一个服务端，server.py, 一个客户端，client.py<br>客户端GET方式发送数据<br>服务器获取GET发送的数据<br>客户端接收response,并进行解码</p></blockquote><p><em>知识要点</em></p><blockquote><p><strong><a href="https://www.imooc.com/article/49788" target="_blank" rel="noopener">1,urllib.request.urlopen()函数用于实现对目标url的访问。</a></strong><br>函数原型如下：urllib.request.urlopen(url, data=None, [timeout, ]*, cafile=None, capath=None, cadefault=False, context=None)　<br>url:  需要打开的网址<br>data：Post提交的数据<br>timeout：设置网站的访问超时时间</p></blockquote><blockquote><p><strong>2,urllib.parse.quote(“参数”)</strong><br>如果参数是”中文”，必须使用quote进行编码</p></blockquote><blockquote><p><strong>3,flask.request.args.get(“参数”)来获取参数的值</strong></p></blockquote><blockquote><p><strong>4,先启动服务器，再启动客户端</strong></p></blockquote><hr><p><img src="./1570800515258.png" alt="Alt text"></p><p><img src="./1570800504504.png" alt="Alt text"></p><hr><p><em>server.py</em></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> flask<span class="token keyword">from</span> datetime <span class="token keyword">import</span> timedeltaapp <span class="token operator">=</span> flask<span class="token punctuation">.</span>Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SEND_FILE_MAX_AGE_DEFAULT'</span><span class="token punctuation">]</span> <span class="token operator">=</span> timedelta<span class="token punctuation">(</span>seconds<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'DEBUG'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    实现对客户端请求的响应    """</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># if 防止参数不存在的情况</span>        province <span class="token operator">=</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span>            <span class="token string">"province"</span><span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token string">"province"</span> <span class="token keyword">in</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>args <span class="token keyword">else</span> <span class="token string">""</span>        city <span class="token operator">=</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span>            <span class="token string">"city"</span><span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token string">"city"</span> <span class="token keyword">in</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>args <span class="token keyword">else</span><span class="token string">""</span>        <span class="token keyword">return</span> province <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> city    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">return</span><span class="token punctuation">(</span>str<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><hr><p><em>client.py</em></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse<span class="token triple-quoted-string string">"""客户端GET方法发送数据"""</span>url <span class="token operator">=</span> <span class="token string">"http://127.0.0.1:5000"</span><span class="token keyword">try</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span><span class="token string">"广东"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 对中文汉字进行编码</span>    c <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span><span class="token string">"深圳"</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> <span class="token string">"province="</span> <span class="token operator">+</span> p <span class="token operator">+</span> <span class="token string">"&amp;city="</span> <span class="token operator">+</span> c    resp <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>url <span class="token operator">+</span> <span class="token string">"?"</span> <span class="token operator">+</span> data<span class="token punctuation">)</span>    html <span class="token operator">=</span> resp<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    html <span class="token operator">=</span> html<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span></code></pre><h4 id="POST方法访问网站"><a href="#POST方法访问网站" class="headerlink" title="POST方法访问网站"></a>POST方法访问网站</h4><hr><p><em>笔记概要</em></p><blockquote><p>创建服务器server.py, 客户端client.py<br>启动服务器，再启动客户端<br>对比get,post方法的区别<br>使用post方法<br>get,post方法混用</p></blockquote><hr><p><em>知识点归纳</em></p><blockquote><p><strong>对于server</strong><br>@app.route(“”, methods = [“GET”])默认GET方法<br>需手动添加POST方法，@app.route(“”, methods = [“POST”,”GET”])</p></blockquote><blockquote><p>flask.request.<code>form</code>.get(参数) – post方法<br>flask.request.<code>args</code>.get(参数) –get方法<br>flask.request.<code>values</code>.get(参数) – post,get方法</p></blockquote><blockquote><p><strong>对于client</strong><br>提交的表单data需要转成二进制 data = data.encode()<br>urllib.parse.quote() 转成十六进制 %% %%</p></blockquote><hr><p><em>server.py</em></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> flask<span class="token keyword">from</span> datetime <span class="token keyword">import</span> timedeltaapp <span class="token operator">=</span> flask<span class="token punctuation">.</span>Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SEND_FILE_MAX_AGE_DEFAULT'</span><span class="token punctuation">]</span> <span class="token operator">=</span> timedelta<span class="token punctuation">(</span>seconds<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># app.config['DEBUG'] = True</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"POST"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    服务器获取POST的数据    """</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 解析过的的表单对象的 MultiDict</span>        p <span class="token operator">=</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span>            <span class="token string">"province"</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token string">"province"</span> <span class="token keyword">in</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form <span class="token keyword">else</span><span class="token string">""</span>        c <span class="token operator">=</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span>            <span class="token string">"city"</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token string">"city"</span> <span class="token keyword">in</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form <span class="token keyword">else</span><span class="token string">""</span>        n <span class="token operator">=</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span>            <span class="token string">"note"</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token string">"note"</span> <span class="token keyword">in</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form <span class="token keyword">else</span><span class="token string">""</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>        <span class="token keyword">return</span> p <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> c <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> n    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">return</span> str<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><hr><p><em>client.py</em></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse<span class="token triple-quoted-string string">"""客户端发生POST数据"""</span>url <span class="token operator">=</span> <span class="token string">"http://127.0.0.1:5000"</span><span class="token keyword">try</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span><span class="token string">"福建"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 十六进制</span>    c <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span><span class="token string">"福州"</span><span class="token punctuation">)</span>    note <span class="token operator">=</span> <span class="token triple-quoted-string string">"""    福州，别称榕城，简称福、榕，隶属于福建省，位于福建省东部、闽江下游及沿海地区，是福建省省会，福建省的政治、文化、交通中心，    海峡西岸经济区中心城市之一。福州建城于公元前202年，历史上曾长期作为福建的政治中心。是中国东南沿海重要都市、东部战区陆军机关驻地。    福州地貌属典型的河口盆地，盆地四周被群山峻岭所环抱，其海拔多在600~1000米之间。    """</span>    note <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>note<span class="token punctuation">)</span>    data <span class="token operator">=</span> <span class="token string">"province="</span> <span class="token operator">+</span> p <span class="token operator">+</span> <span class="token string">"&amp;city="</span> <span class="token operator">+</span> c <span class="token operator">+</span> <span class="token string">"&amp;note="</span> <span class="token operator">+</span> note    data <span class="token operator">=</span> data<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 二进制</span>    resp <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>    html <span class="token operator">=</span> resp<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 对HTTPResponse类型进行处理</span>    html <span class="token operator">=</span> html<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 解码</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span></code></pre><h4 id="Web下载文件"><a href="#Web下载文件" class="headerlink" title="Web下载文件"></a>Web下载文件</h4><p><em>笔记概要</em></p><blockquote><p>创建服务器server.py, 客户端client.py<br>启动服务器，再启动客户端<br>对比get,post方法的区别<br>使用post方法<br>get,post方法混用</p></blockquote><hr><p><em>知识点归纳</em></p><blockquote><p><strong>对于server</strong><br>@app.route(“”, methods = [“GET”])默认GET方法<br>需手动添加POST方法，@app.route(“”, methods = [“POST”,”GET”])</p></blockquote><blockquote><p>flask.request.<code>form</code>.get(参数) – post方法<br>flask.request.<code>args</code>.get(参数) –get方法<br>flask.request.<code>values</code>.get(参数) – post,get方法</p></blockquote><blockquote><p><strong>对于client</strong><br>提交的表单data需要转成二进制 data = data.encode()<br>urllib.parse.quote() 转成十六进制 %% %%</p></blockquote><hr><p><em>server.py</em></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> flask<span class="token keyword">from</span> datetime <span class="token keyword">import</span> timedeltaapp <span class="token operator">=</span> flask<span class="token punctuation">.</span>Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SEND_FILE_MAX_AGE_DEFAULT'</span><span class="token punctuation">]</span> <span class="token operator">=</span> timedelta<span class="token punctuation">(</span>seconds<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># app.config['DEBUG'] = True</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"POST"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    服务器获取POST的数据    """</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 解析过的的表单对象的 MultiDict</span>        p <span class="token operator">=</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span>            <span class="token string">"province"</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token string">"province"</span> <span class="token keyword">in</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form <span class="token keyword">else</span><span class="token string">""</span>        c <span class="token operator">=</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span>            <span class="token string">"city"</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token string">"city"</span> <span class="token keyword">in</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form <span class="token keyword">else</span><span class="token string">""</span>        n <span class="token operator">=</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span>            <span class="token string">"note"</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token string">"note"</span> <span class="token keyword">in</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form <span class="token keyword">else</span><span class="token string">""</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>        <span class="token keyword">return</span> p <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> c <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> n    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">return</span> str<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python网络爬虫程序技术</title>
      <link href="/2019/10/15/text/"/>
      <url>/2019/10/15/text/</url>
      
        <content type="html"><![CDATA[<h4 id="get方法访问网站"><a href="#get方法访问网站" class="headerlink" title="get方法访问网站"></a>get方法访问网站</h4><hr><p><em>笔记概要</em></p><blockquote><p>创建一个服务端，server.py, 一个客户端，client.py<br>客户端GET方式发送数据<br>服务器获取GET发送的数据<br>客户端接收response,并进行解码</p></blockquote><p><em>知识要点</em></p><blockquote><p><strong><a href="https://www.imooc.com/article/49788" target="_blank" rel="noopener">1,urllib.request.urlopen()函数用于实现对目标url的访问。</a></strong><br>函数原型如下：urllib.request.urlopen(url, data=None, [timeout, ]*, cafile=None, capath=None, cadefault=False, context=None)　<br>url:  需要打开的网址<br>data：Post提交的数据<br>timeout：设置网站的访问超时时间</p></blockquote><blockquote><p><strong>2,urllib.parse.quote(“参数”)</strong><br>如果参数是”中文”，必须使用quote进行编码</p></blockquote><blockquote><p><strong>3,flask.request.args.get(“参数”)来获取参数的值</strong></p></blockquote><blockquote><p><strong>4,先启动服务器，再启动客户端</strong></p></blockquote><hr><p><img src="./1570800515258.png" alt="Alt text"></p><p><img src="./1570800504504.png" alt="Alt text"></p><hr><p><em>server.py</em></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> flask<span class="token keyword">from</span> datetime <span class="token keyword">import</span> timedeltaapp <span class="token operator">=</span> flask<span class="token punctuation">.</span>Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SEND_FILE_MAX_AGE_DEFAULT'</span><span class="token punctuation">]</span> <span class="token operator">=</span> timedelta<span class="token punctuation">(</span>seconds<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'DEBUG'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    实现对客户端请求的响应    """</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># if 防止参数不存在的情况</span>        province <span class="token operator">=</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span>            <span class="token string">"province"</span><span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token string">"province"</span> <span class="token keyword">in</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>args <span class="token keyword">else</span> <span class="token string">""</span>        city <span class="token operator">=</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span>            <span class="token string">"city"</span><span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token string">"city"</span> <span class="token keyword">in</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>args <span class="token keyword">else</span><span class="token string">""</span>        <span class="token keyword">return</span> province <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> city    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">return</span><span class="token punctuation">(</span>str<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><hr><p><em>client.py</em></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse<span class="token triple-quoted-string string">"""客户端GET方法发送数据"""</span>url <span class="token operator">=</span> <span class="token string">"http://127.0.0.1:5000"</span><span class="token keyword">try</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span><span class="token string">"广东"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 对中文汉字进行编码</span>    c <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span><span class="token string">"深圳"</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> <span class="token string">"province="</span> <span class="token operator">+</span> p <span class="token operator">+</span> <span class="token string">"&amp;city="</span> <span class="token operator">+</span> c    resp <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>url <span class="token operator">+</span> <span class="token string">"?"</span> <span class="token operator">+</span> data<span class="token punctuation">)</span>    html <span class="token operator">=</span> resp<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    html <span class="token operator">=</span> html<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span></code></pre><h4 id="POST方法访问网站"><a href="#POST方法访问网站" class="headerlink" title="POST方法访问网站"></a>POST方法访问网站</h4><hr><p><em>笔记概要</em></p><blockquote><p>创建服务器server.py, 客户端client.py<br>启动服务器，再启动客户端<br>对比get,post方法的区别<br>使用post方法<br>get,post方法混用</p></blockquote><hr><p><em>知识点归纳</em></p><blockquote><p><strong>对于server</strong><br>@app.route(“”, methods = [“GET”])默认GET方法<br>需手动添加POST方法，@app.route(“”, methods = [“POST”,”GET”])</p></blockquote><blockquote><p>flask.request.<code>form</code>.get(参数) – post方法<br>flask.request.<code>args</code>.get(参数) –get方法<br>flask.request.<code>values</code>.get(参数) – post,get方法</p></blockquote><blockquote><p><strong>对于client</strong><br>提交的表单data需要转成二进制 data = data.encode()<br>urllib.parse.quote() 转成十六进制 %% %%</p></blockquote><hr><p><em>server.py</em></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> flask<span class="token keyword">from</span> datetime <span class="token keyword">import</span> timedeltaapp <span class="token operator">=</span> flask<span class="token punctuation">.</span>Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SEND_FILE_MAX_AGE_DEFAULT'</span><span class="token punctuation">]</span> <span class="token operator">=</span> timedelta<span class="token punctuation">(</span>seconds<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># app.config['DEBUG'] = True</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"POST"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    服务器获取POST的数据    """</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 解析过的的表单对象的 MultiDict</span>        p <span class="token operator">=</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span>            <span class="token string">"province"</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token string">"province"</span> <span class="token keyword">in</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form <span class="token keyword">else</span><span class="token string">""</span>        c <span class="token operator">=</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span>            <span class="token string">"city"</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token string">"city"</span> <span class="token keyword">in</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form <span class="token keyword">else</span><span class="token string">""</span>        n <span class="token operator">=</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span>            <span class="token string">"note"</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token string">"note"</span> <span class="token keyword">in</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form <span class="token keyword">else</span><span class="token string">""</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>        <span class="token keyword">return</span> p <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> c <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> n    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">return</span> str<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><hr><p><em>client.py</em></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse<span class="token triple-quoted-string string">"""客户端发生POST数据"""</span>url <span class="token operator">=</span> <span class="token string">"http://127.0.0.1:5000"</span><span class="token keyword">try</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span><span class="token string">"福建"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 十六进制</span>    c <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span><span class="token string">"福州"</span><span class="token punctuation">)</span>    note <span class="token operator">=</span> <span class="token triple-quoted-string string">"""    福州，别称榕城，简称福、榕，隶属于福建省，位于福建省东部、闽江下游及沿海地区，是福建省省会，福建省的政治、文化、交通中心，    海峡西岸经济区中心城市之一。福州建城于公元前202年，历史上曾长期作为福建的政治中心。是中国东南沿海重要都市、东部战区陆军机关驻地。    福州地貌属典型的河口盆地，盆地四周被群山峻岭所环抱，其海拔多在600~1000米之间。    """</span>    note <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>note<span class="token punctuation">)</span>    data <span class="token operator">=</span> <span class="token string">"province="</span> <span class="token operator">+</span> p <span class="token operator">+</span> <span class="token string">"&amp;city="</span> <span class="token operator">+</span> c <span class="token operator">+</span> <span class="token string">"&amp;note="</span> <span class="token operator">+</span> note    data <span class="token operator">=</span> data<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 二进制</span>    resp <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>    html <span class="token operator">=</span> resp<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 对HTTPResponse类型进行处理</span>    html <span class="token operator">=</span> html<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 解码</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span></code></pre><h4 id="Web下载文件"><a href="#Web下载文件" class="headerlink" title="Web下载文件"></a>Web下载文件</h4><p><em>笔记概要</em></p><blockquote><p>创建服务器server.py, 客户端client.py<br>启动服务器，再启动客户端<br>对比get,post方法的区别<br>使用post方法<br>get,post方法混用</p></blockquote><hr><p><em>知识点归纳</em></p><blockquote><p><strong>对于server</strong><br>@app.route(“”, methods = [“GET”])默认GET方法<br>需手动添加POST方法，@app.route(“”, methods = [“POST”,”GET”])</p></blockquote><blockquote><p>flask.request.<code>form</code>.get(参数) – post方法<br>flask.request.<code>args</code>.get(参数) –get方法<br>flask.request.<code>values</code>.get(参数) – post,get方法</p></blockquote><blockquote><p><strong>对于client</strong><br>提交的表单data需要转成二进制 data = data.encode()<br>urllib.parse.quote() 转成十六进制 %% %%</p></blockquote><hr><p><em>server.py</em></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> flask<span class="token keyword">from</span> datetime <span class="token keyword">import</span> timedeltaapp <span class="token operator">=</span> flask<span class="token punctuation">.</span>Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SEND_FILE_MAX_AGE_DEFAULT'</span><span class="token punctuation">]</span> <span class="token operator">=</span> timedelta<span class="token punctuation">(</span>seconds<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># app.config['DEBUG'] = True</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"POST"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    服务器获取POST的数据    """</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 解析过的的表单对象的 MultiDict</span>        p <span class="token operator">=</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span>            <span class="token string">"province"</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token string">"province"</span> <span class="token keyword">in</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form <span class="token keyword">else</span><span class="token string">""</span>        c <span class="token operator">=</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span>            <span class="token string">"city"</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token string">"city"</span> <span class="token keyword">in</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form <span class="token keyword">else</span><span class="token string">""</span>        n <span class="token operator">=</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span>            <span class="token string">"note"</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token string">"note"</span> <span class="token keyword">in</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form <span class="token keyword">else</span><span class="token string">""</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>        <span class="token keyword">return</span> p <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> c <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> n    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">return</span> str<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wz</title>
      <link href="/2019/10/13/wz/"/>
      <url>/2019/10/13/wz/</url>
      
        <content type="html"><![CDATA[<details>    <summary>  代码块Highlight  </summary>        <pre><code>            print("hello")    </code></pre></details><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/10/13/hello-world/"/>
      <url>/2019/10/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> npm </tag>
            
            <tag> nvm </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
