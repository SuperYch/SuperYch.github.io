<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python网络爬虫程序技术</title>
      <link href="/2019/10/15/spider/"/>
      <url>/2019/10/15/spider/</url>
      
        <content type="html"><![CDATA[<h4 id="get方法访问网站"><a href="#get方法访问网站" class="headerlink" title="get方法访问网站"></a>get方法访问网站</h4><hr><p><em>笔记概要</em></p><blockquote><p>创建一个服务端，server.py, 一个客户端，client.py<br>客户端GET方式发送数据<br>服务器获取GET发送的数据<br>客户端接收response,并进行解码</p></blockquote><p><em>知识要点</em></p><blockquote><p><strong><a href="https://www.imooc.com/article/49788" target="_blank" rel="noopener">1,urllib.request.urlopen()函数用于实现对目标url的访问。</a></strong><br>函数原型如下：urllib.request.urlopen(url, data=None, [timeout, ]*, cafile=None, capath=None, cadefault=False, context=None)　<br>url:  需要打开的网址<br>data：Post提交的数据<br>timeout：设置网站的访问超时时间</p></blockquote><blockquote><p><strong>2,urllib.parse.quote(“参数”)</strong><br>如果参数是”中文”，必须使用quote进行编码</p></blockquote><blockquote><p><strong>3,flask.request.args.get(“参数”)来获取参数的值</strong></p></blockquote><blockquote><p><strong>4,先启动服务器，再启动客户端</strong></p></blockquote><hr><p><img src="./1570800515258.png" alt="Alt text"></p><p><img src="./1570800504504.png" alt="Alt text"></p><hr><p><em>server.py</em></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> flask<span class="token keyword">from</span> datetime <span class="token keyword">import</span> timedeltaapp <span class="token operator">=</span> flask<span class="token punctuation">.</span>Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SEND_FILE_MAX_AGE_DEFAULT'</span><span class="token punctuation">]</span> <span class="token operator">=</span> timedelta<span class="token punctuation">(</span>seconds<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'DEBUG'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    实现对客户端请求的响应    """</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># if 防止参数不存在的情况</span>        province <span class="token operator">=</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span>            <span class="token string">"province"</span><span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token string">"province"</span> <span class="token keyword">in</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>args <span class="token keyword">else</span> <span class="token string">""</span>        city <span class="token operator">=</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span>            <span class="token string">"city"</span><span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token string">"city"</span> <span class="token keyword">in</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>args <span class="token keyword">else</span><span class="token string">""</span>        <span class="token keyword">return</span> province <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> city    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">return</span><span class="token punctuation">(</span>str<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><hr><p><em>client.py</em></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse<span class="token triple-quoted-string string">"""客户端GET方法发送数据"""</span>url <span class="token operator">=</span> <span class="token string">"http://127.0.0.1:5000"</span><span class="token keyword">try</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span><span class="token string">"广东"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 对中文汉字进行编码</span>    c <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span><span class="token string">"深圳"</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> <span class="token string">"province="</span> <span class="token operator">+</span> p <span class="token operator">+</span> <span class="token string">"&amp;city="</span> <span class="token operator">+</span> c    resp <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>url <span class="token operator">+</span> <span class="token string">"?"</span> <span class="token operator">+</span> data<span class="token punctuation">)</span>    html <span class="token operator">=</span> resp<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    html <span class="token operator">=</span> html<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span></code></pre><h4 id="POST方法访问网站"><a href="#POST方法访问网站" class="headerlink" title="POST方法访问网站"></a>POST方法访问网站</h4><hr><p><em>笔记概要</em></p><blockquote><p>创建服务器server.py, 客户端client.py<br>启动服务器，再启动客户端<br>对比get,post方法的区别<br>使用post方法<br>get,post方法混用</p></blockquote><hr><p><em>知识点归纳</em></p><blockquote><p><strong>对于server</strong><br>@app.route(“”, methods = [“GET”])默认GET方法<br>需手动添加POST方法，@app.route(“”, methods = [“POST”,”GET”])</p></blockquote><blockquote><p>flask.request.<code>form</code>.get(参数) – post方法<br>flask.request.<code>args</code>.get(参数) –get方法<br>flask.request.<code>values</code>.get(参数) – post,get方法</p></blockquote><blockquote><p><strong>对于client</strong><br>提交的表单data需要转成二进制 data = data.encode()<br>urllib.parse.quote() 转成十六进制 %% %%</p></blockquote><hr><p><em>server.py</em></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> flask<span class="token keyword">from</span> datetime <span class="token keyword">import</span> timedeltaapp <span class="token operator">=</span> flask<span class="token punctuation">.</span>Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SEND_FILE_MAX_AGE_DEFAULT'</span><span class="token punctuation">]</span> <span class="token operator">=</span> timedelta<span class="token punctuation">(</span>seconds<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># app.config['DEBUG'] = True</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"POST"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    服务器获取POST的数据    """</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 解析过的的表单对象的 MultiDict</span>        p <span class="token operator">=</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span>            <span class="token string">"province"</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token string">"province"</span> <span class="token keyword">in</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form <span class="token keyword">else</span><span class="token string">""</span>        c <span class="token operator">=</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span>            <span class="token string">"city"</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token string">"city"</span> <span class="token keyword">in</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form <span class="token keyword">else</span><span class="token string">""</span>        n <span class="token operator">=</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span>            <span class="token string">"note"</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token string">"note"</span> <span class="token keyword">in</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form <span class="token keyword">else</span><span class="token string">""</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>        <span class="token keyword">return</span> p <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> c <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> n    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">return</span> str<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><hr><p><em>client.py</em></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse<span class="token triple-quoted-string string">"""客户端发生POST数据"""</span>url <span class="token operator">=</span> <span class="token string">"http://127.0.0.1:5000"</span><span class="token keyword">try</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span><span class="token string">"福建"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 十六进制</span>    c <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span><span class="token string">"福州"</span><span class="token punctuation">)</span>    note <span class="token operator">=</span> <span class="token triple-quoted-string string">"""    福州，别称榕城，简称福、榕，隶属于福建省，位于福建省东部、闽江下游及沿海地区，是福建省省会，福建省的政治、文化、交通中心，    海峡西岸经济区中心城市之一。福州建城于公元前202年，历史上曾长期作为福建的政治中心。是中国东南沿海重要都市、东部战区陆军机关驻地。    福州地貌属典型的河口盆地，盆地四周被群山峻岭所环抱，其海拔多在600~1000米之间。    """</span>    note <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>note<span class="token punctuation">)</span>    data <span class="token operator">=</span> <span class="token string">"province="</span> <span class="token operator">+</span> p <span class="token operator">+</span> <span class="token string">"&amp;city="</span> <span class="token operator">+</span> c <span class="token operator">+</span> <span class="token string">"&amp;note="</span> <span class="token operator">+</span> note    data <span class="token operator">=</span> data<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 二进制</span>    resp <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>    html <span class="token operator">=</span> resp<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 对HTTPResponse类型进行处理</span>    html <span class="token operator">=</span> html<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 解码</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span></code></pre><h4 id="Web下载文件"><a href="#Web下载文件" class="headerlink" title="Web下载文件"></a>Web下载文件</h4><p><em>笔记概要</em></p><blockquote><p>创建服务器server.py, 客户端client.py<br>启动服务器，再启动客户端<br>对比get,post方法的区别<br>使用post方法<br>get,post方法混用</p></blockquote><hr><p><em>知识点归纳</em></p><blockquote><p><strong>对于server</strong><br>@app.route(“”, methods = [“GET”])默认GET方法<br>需手动添加POST方法，@app.route(“”, methods = [“POST”,”GET”])</p></blockquote><blockquote><p>flask.request.<code>form</code>.get(参数) – post方法<br>flask.request.<code>args</code>.get(参数) –get方法<br>flask.request.<code>values</code>.get(参数) – post,get方法</p></blockquote><blockquote><p><strong>对于client</strong><br>提交的表单data需要转成二进制 data = data.encode()<br>urllib.parse.quote() 转成十六进制 %% %%</p></blockquote><hr><p><em>server.py</em></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> flask<span class="token keyword">from</span> datetime <span class="token keyword">import</span> timedeltaapp <span class="token operator">=</span> flask<span class="token punctuation">.</span>Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SEND_FILE_MAX_AGE_DEFAULT'</span><span class="token punctuation">]</span> <span class="token operator">=</span> timedelta<span class="token punctuation">(</span>seconds<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># app.config['DEBUG'] = True</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"POST"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    服务器获取POST的数据    """</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 解析过的的表单对象的 MultiDict</span>        p <span class="token operator">=</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span>            <span class="token string">"province"</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token string">"province"</span> <span class="token keyword">in</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form <span class="token keyword">else</span><span class="token string">""</span>        c <span class="token operator">=</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span>            <span class="token string">"city"</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token string">"city"</span> <span class="token keyword">in</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form <span class="token keyword">else</span><span class="token string">""</span>        n <span class="token operator">=</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span>            <span class="token string">"note"</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token string">"note"</span> <span class="token keyword">in</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form <span class="token keyword">else</span><span class="token string">""</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>        <span class="token keyword">return</span> p <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> c <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> n    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">return</span> str<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="Web学生管理系统"><a href="#Web学生管理系统" class="headerlink" title="Web学生管理系统"></a>Web学生管理系统</h4><hr><p><em>笔记概要</em></p><ul><li><p>创建服务器（server)和客户端（client)</p></li><li><details> <summary><mark>服务器的作用是建立与维护一个sqllite3的学生数据库students.db中学生记录表students:<mark></mark></mark></summary><blockquote><p>学生的记录包括学号No, 姓名Name, 性别Sex与年龄Age, 服务器的作用是建立与维护一个sqllite的学生数据库students.db中的学生记录表studnet:<br>  <code>create table students  (No varchar(16) primary key, Name varchar(16), Sex varchar(8), Age int)</code><br>   服务器建立一个Web网站， 同时提供<strong>查询学生记录， 增加学生记录，删除学生记录</strong>等接口服务。服务器为了与客户端通讯， 建立了opt参数如表：</p><table><thead><tr><th align="left">opt值</th><th align="right">含义</th></tr></thead><tbody><tr><td align="left">init</td><td align="right">初始化学生列表</td></tr><tr><td align="left">insert</td><td align="right">增加学生</td></tr><tr><td align="left">delete</td><td align="right">删除学生</td></tr><tr><td align="left"></td><td align="right">获取学生记录</td></tr></tbody></table></blockquote><p>  图片上传中</p></details></li></ul><ul><li><strong>服务端和客户端是互相协商的</strong>, 服务器的数据库更新, 客户端students列表也更新(students里存的是每个学生的信息, 学生的信息是个字典eg:  ‘No’: ‘ ‘, ‘Name’: ‘ ‘, ‘Sex’: ‘ ‘, ‘Age’: ‘int类型 ‘)</li><li>只要服务器不重启(实际上是重新建立新的数据库), 那么即使students列<code>students.clear()</code>，依旧可以通过<code>urllib.request.urlopen(url)</code>访问服务器,<strong>服务器的opt=””,则返回数据库里所以的学生记录</strong></li><li><details> <summary><mark>客户端的作用是向服务端发送请求，传递get数据，post的数据,对服务端的数据库进行访问,进行查询,删除,增加,初始化等操作</mark></summary>  图片上传中</details></li></ul><p><em>知识点归纳</em></p><ul><li><p>了解sqlite3库的使用</p></li><li><p>服务端与客户端的联系</p><hr></li></ul><p><em>stu_server框架</em></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> flask<span class="token keyword">import</span> sqlite3<span class="token keyword">import</span> jsonapp <span class="token operator">=</span> flask<span class="token punctuation">.</span>Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SEND_FILE_MAX_AGE_DEFAULT'</span><span class="token punctuation">]</span> <span class="token operator">=</span> timedelta<span class="token punctuation">(</span>seconds<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">StudentDB</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">openDB</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">closeDB</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">initTable</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">insertRow</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> No<span class="token punctuation">,</span> Name<span class="token punctuation">,</span> Sex<span class="token punctuation">,</span> Age<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">deleteRow</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> NO<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">selectRows</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"POST"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><hr><p><em>stu_client框架</em></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> urlib<span class="token punctuation">.</span>request<span class="token keyword">import</span> json<span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> No<span class="token punctuation">,</span> Nane<span class="token punctuation">,</span> Sex<span class="token punctuation">,</span> Age<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>students <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>url <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">def</span> <span class="token function">listStudents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> students    <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">insertStudent</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">deleteRow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">try</span><span class="token punctuation">:</span>    readStudents<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"***学生名单***"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"0.初始化学生表"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"1.查看学生列表"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"2.增加学生记录"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"3.删除学生记录"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"4.退出这个程序"</span><span class="token punctuation">)</span>        s <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请选择(0,1,2,3,4):"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            initialize<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span><span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            listStudents<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span><span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            insertRow<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span><span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            deleteRow<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span><span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">break</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span></code></pre><hr><details>  <summary><mark><font color="darkred">server具体代码</font></mark></summary>  <p> - 建议移到编辑器查看</p>  <pre><code>  <pre><code># Web学生管理程序# 服务器程序import flaskimport sqlite3import jsonfrom datetime import timedeltaapp = flask.Flask(__name__)app.config['SEND_FILE_MAX_AGE_DEFAULT'] = timedelta(seconds=1)class StudentDB:def openDB(self):  # 一个学生类OpenDB 打开一个数据库    self.con = sqlite3.connect("students.db")  # 数据库我们用sqlite3来连接    self.cursor = self.con.cursor()  # 获取学员的数据库的它的操作游标def closeDB(self):  # 然后closeDB是关闭数据库    self.con.commit()    self.con.close()def initTable(self):  # 创建学生表    res = {}    try:        self.cursor.execute(            "create table students(No varchar(16) primary key, Name varchar(16), Sex varchar(8), Age int)")        res["msg"] = "OK"    except Exception as e:        res["msg"] = str(e)    return resdef insertRow(self, No, Name, Sex, Age):  # 插入一张学生表    res = {}    try:        self.cursor.execute(            "insert  into  students(No, Name, Sex, Age) values(?,?,?,?)", (No, Name, Sex, Age))  # 数据库插入学生的记录        res["msg"] = "OK"    except Exception as e:        res["msg"] = str(e)    return resdef deleteRow(self, No):  # 删除一个学生记录    res = {}    try:        self.cursor.execute(            "delete from students where No = ?", (No,))  # 对这个No的学生进行删除        res["msg"] = "OK"    except Exception as e:        res["msg"] = str(e)    return resdef selectRows(self):  # 获取学生的所以信息    res = {}    try:        data = []        self.cursor.execute("select *from students order by No")        rows = self.cursor.fetchall()        for row in rows:            # 每一个学生记录都是一个字典，然后又很多的记录，这个记录做成一个列表，做一个data的列表            d = {}            d["No"] = row[0]            d["Name"] = row[1]            d["Sex"] = row[2]            d["Age"] = row[3]            data.append(d)            # 这个data的列表放在另一个字典当中，在一个res的字典当中        res["msg"] = "OK"        res["data"] = data    except Exception as e:        res["msg"] = str(e)    return res# 服务器这端必须要识别它是进行什么操作@app.route("/", methods=["GET", "POST"])def process():# 所以它首先要获取一个opt的值, 这个opt的值知道客户端要做什么事情opt = flask.request.values.get(    "opt") if "opt" in flask.request.values else ""res = {}db = StudentDB()  # opt值获取以后，那么它就创建这个一个studentDB一个对象dbdb.openDB()  # 这个对象叫db, 我们打开这个数据库if opt == "init":  # 如果 opt等于init, 那我就DB掉initTable, 就是创建这个DB， 这个数据库的表格    res = db.initTable()elif opt == "insert":  # 如果 opt等于insert， 那么这个时候我就获取No, Name, Sex, Age然后    No = flask.request.values.get(        "No") if "No" in flask.request.values else ""    Name = flask.request.values.get(        "Name") if "Name" in flask.request.values else ""    Sex = flask.request.values.get(        "Sex") if "Sex" in flask.request.values else ""    Age = flask.request.values.get(        "Age") if "No" in flask.request.values else ""    # 调用insertRow创建一个学生记录, 把这个学生记录插入到数据库当中    res = db.insertRow(No, Name, Sex, Age)elif opt == "delete":  # 如果opt 等于delete, 那我就获取学生的No, 然后    No = flask.request.values.get(        "No") if "No" in flask.request.values else ""    res = db.deleteRow(No)  # 调用db.deleteRow删除这个学生这条记录else:    res = db.selectRows()  # 不然的话我就selectRows获取学生的所以信息db.closeDB()# 返回给客户端, 数据化的数据调用json.dumps(res), 也就是把这些数据，做出一个json字符串, 把它传递给客户端,# 那么客户端那一端把它反编译过来, 就是反序列化过来, 变成一个对象, 变成一个python一个对象,这样双方就可以通讯return json.dumps(res)if __name__ == '__main__':    app.run()</code></pre><p>  </p></code></pre><p></p></details><hr><details>  <summary><mark><font color="darkred">client具体代码</font></mark></summary>  <p> - 建议移到编辑器查看</p>  <pre><code>       # Web学生管理程序<pre><code># 客户端程序import urllib.requestimport jsonclass Student:  # 创建一个Student的对象    def __init__(self, No, Name, Sex, Age):  # 有No, Name, Sex, Age四个参数        self.No = No        self.Name = Name        self.Sex = Sex        self.Age = Age    def show(self):  # 打印的方法        print("%-16s%-16s%-8s%-4d" % (self.No, self.Name, self.Sex, self.Age))students = []  # 所以的学生放在一个列表当中url = "http://127.0.0.1:5000"  # http的网址def listStudents():  # 列举所以的学生    global students  # 调用全局变量    print("%-16s%-16s%-8s%-4s" % ("No", "Name", "Sex", "Age"))    for s in students:        s.show()def insertStudent(s):  # 插入一个学生记录    global students    i = 0    # 看学生是否存在,就在students的表格里, 是否已经存在， 如果存在就不插入    while (i &lt; len(students) and s.No &gt; students[i].No):        i = i + 1    if(i &lt; len(students) and s.No == students[i].No):        print(s.No + "already exists")        return False    students.insert(i, s)  # 进行插入    return Truedef deleteRow():    global students    No = input("No=")  # 获取学生的No    if(No != ""):        for i in range(len(students)):            if(students[i].No == No):                st = ""                try:                    st = "No=" + urllib.request.quote(No)                    st = st.encode()                    # opt = delte --get的方式传递过去, 向服务器发送我们这个No的数据 --post方式传递过去                    content = urllib.request.urlopen(url + "?opt=delete", st)                    st = content.readline()                    st = json.loads(st.decode())  # 返回回来是结构化的数据, 是个json数据                    st = st["msg"]                except Exception as e:                    st = str(e)                if(st == "OK"):  # 如果OK, 那就表示已经删除                    del students[i]  # 删除对应列表里的学生数据                    print("删除成功")                else:                    print(st)                breakdef insertRow():    No = input("No=")  # 获取No    Name = input("Name=")  # 获取Name    while True:        Sex = input("Sex=")  # 获取Sex        if(Sex == "男" or Sex == "女"):  # 这个性别的输入是有效的            break        else:            print("Sex is not valid")    Age = input("Age=")  # 获取年龄    if(Age == ""):        Age = 0    else:        Age = int(Age)    if No != "" and Name != "":  # 因为No为主键, 不能为空        s = Student(No, Name, Sex, Age)        for x in students:  # 看这是学生对象是否已经存在列表students中            if(x.No == No):                print(No + "already exists")                return  # 若存在则跳出        st = ""        try:  # 不存在            st = "No=" + urllib.request.quote(No) + "&amp;Name=" + urllib.request.quote(                Name) + "&amp;Sex=" + urllib.request.quote(Sex) + "&amp;Age=" + urllib.request.quote(str(Age))            st = st.encode()            content = urllib.request.urlopen(url + "?opt=insert", st)  # 调用远程协议            st = content.read()            st = json.loads(st.decode())            st = st["msg"]        except Exception as e:            st = str(e)        if(st == "OK"):            #  服务器那端插入成功, 客户端也要插入成功            insertStudent(s)            print("增加成功")        else:            print(st)    else:        print("学号,姓名不能为空")def initialize():  # 初始化    st = ""    try:        content = urllib.request.urlopen(url + "?opt=init")        st = content.read()        st = json.loads(st.decode())        st = st["msg"]    except Exception as e:        st = str(e)    if(st == "OK"):        print("初始成功")    else:        print(st)    return stdef readStudents():  # 客户端与服务端互相协商起来工作的,对于客户端,我们可以把相应的数据给它进行读取    global students    try:        students.clear()        # 只要服务端的数据库没有清空,依旧可以读取到        content = urllib.request.urlopen(url)        data = b""        while True:            buf = content.read(1024)  # 因为读取数据可能有点大, 所以我们分段读, 一次读20个字节出来            if(len(buf) &gt; 0):                data = data + buf            else:                break        data = data.decode()  # 读取的信息储存在data里, 编译成字符串        data = json.loads(data)  # 用json的方法把它反序列化成为一个结构化的数据,结构化的数据就是students列表        if(data["msg"] == "OK"):            data = data["data"]            for d in data:                # each d is a dictionary                # 客户端是用studnets的对象来维护学生记录,我们可以把它转化成一个列表                s = Student(d["No"], d["Name"], d["Sex"], d["Age"])                students.append(s)    except Exception as e:        print(e)try:    readStudents()    while True:        print("")        print("***学生名单***")        print("0.初始化学生表")        print("1.查看学生列表")        print("2.增加学生记录")        print("3.删除学生记录")        print("4.退出这个程序")        s = input("请选择(0,1,2,3,4):")        if(s == "0"):            initialize()        elif(s == "1"):            listStudents()        elif(s == "2"):            insertRow()        elif(s == "3"):            deleteRow()        elif(s == "4"):            breakexcept Exception as e:    print(e)</code></pre><p>  </p></code></pre><p></p></details><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wz</title>
      <link href="/2019/10/13/wz/"/>
      <url>/2019/10/13/wz/</url>
      
        <content type="html"><![CDATA[<h4 id="Web学生管理系统"><a href="#Web学生管理系统" class="headerlink" title="Web学生管理系统"></a>Web学生管理系统</h4><hr><p><em>笔记概要</em></p><ul><li>创建服务器（server)和客户端（client)</li></ul><details> <summary>服务器的作用是建立与维护一个sqllite3的学生数据库students.db中学生记录表students:</summary><blockquote><table><thead><tr><th align="left">opt值</th><th align="right">含义</th><th align="center">Col3</th></tr></thead><tbody><tr><td align="left">init</td><td align="right">field2</td><td align="center">field3</td></tr><tr><td align="left">insert</td><td align="right">field2</td><td align="center">field3</td></tr><tr><td align="left">delete</td><td align="right">field2</td><td align="center">field3</td></tr></tbody></table></blockquote></details><details>  <summary>折叠代码块</summary><blockquote><p>学生的记录包括学号No, 姓名Name, 性别Sex与年龄Age, 服务器的作用是建立与维护一个sqllite的学生数据库students.db中的学生记录表studnet:<br><code>create table students  (No varchar(16) primary key, Name varchar(16), Sex varchar(8), Age int)</code></p><ul><li>服务器建立一个Web网站， 同时提供<strong>查询学生记录， 增加学生记录，删除学生记录</strong>等接口服务。服务器为了与客户端通讯， 建立了opt参数如表：<table><thead><tr><th align="left">opt值</th><th align="right">含义</th></tr></thead><tbody><tr><td align="left">init</td><td align="right">初始化学生列表</td></tr><tr><td align="left">insert</td><td align="right">增加学生</td></tr><tr><td align="left">delete</td><td align="right">删除学生</td></tr><tr><td align="left"></td><td align="right">获取学生记录</td></tr></tbody></table></li></ul></blockquote></details><details>  <summary>折叠代码块</summary>  <pre><blockcode>      System.out.println("虽然可以折叠代码块");     System.out.println("但是代码无法高亮");  </blockcode></pre></details><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/10/13/hello-world/"/>
      <url>/2019/10/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> npm </tag>
            
            <tag> nvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript声明文件</title>
      <link href="/2019/09/05/page-1/"/>
      <url>/2019/09/05/page-1/</url>
      
        <content type="html"><![CDATA[<p>```python<br>print(2)</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript声明文件</title>
      <link href="/2019/09/05/page/"/>
      <url>/2019/09/05/page/</url>
      
        <content type="html"><![CDATA[<pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
