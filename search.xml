<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python网络爬虫程序技术</title>
      <link href="/2019/10/15/text/"/>
      <url>/2019/10/15/text/</url>
      
        <content type="html"><![CDATA[<p>####Web下载文件<br><em>笔记概要</em></p><blockquote><p>sever.py<br>两次请求<br>第一次请求,服务器返回可以访问的文件名<br>第二次请求，服务器判断文件是否存在，存在则返回二进制文件</p></blockquote><blockquote><p>client.py<br>两次响应<br>第一次响应为可访问的文件名<br>第二次响应为可访问的文件</p></blockquote><p><em>知识点归纳</em></p><blockquote><p>urllib.request.urlretrieve()使用<br>其他见笔记</p></blockquote><hr><p><img src="./1570902306329.png" alt="Alt text"><br><img src="./1570902313783.png" alt="Alt text"></p><p><em>工程目录</em><br><img src="./1570902446454.png" alt="Alt text"></p><hr><p><em>server.py</em></p><pre><code>import flaskfrom datetime import timedeltaimport osapp = flask.Flask(__name__)app.config['SEND_FILE_MAX_AGE_DEFAULT'] = timedelta(seconds=1)# app.config['DEBUG'] = True"""Web返回数据"""@app.route("/")def index():    if "fileName" not in flask.request.values:        return "图像.jpg"    else:        # data = b""        try:            fileName = flask.request.values.get("fileName")            if fileName != "" and os.path.exists(fileName):                fobj = open(fileName, "rb")                data = fobj.read()                fobj.close()                return data        except Exception as e:            return b""if __name__ == '__main__':    app.run()</code></pre><p><em>client.py</em></p><pre><code>import urllib.requestimport urllib.parse"""Web下载文件"""url = "http://127.0.0.1:5000"try:    resp = urllib.request.urlopen(url)    resp = resp.read()    fileName = resp.decode()    print("准备下载" + fileName)    data = urllib.request.urlopen(        url + "?fileName=" + urllib.parse.quote(fileName))    data = data.read()    fobj = open("download" + fileName, "wb")    fobj.write(data)    fobj.close()    print("下载完毕", len(data), "字节")except Exception as e:    print(e)</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wz</title>
      <link href="/2019/10/13/wz/"/>
      <url>/2019/10/13/wz/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/10/13/hello-world/"/>
      <url>/2019/10/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> npm </tag>
            
            <tag> nvm </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
