<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>javaweb</title>
      <link href="/2020/05/08/javaweb/"/>
      <url>/2020/05/08/javaweb/</url>
      
        <content type="html"><![CDATA[<h1 id="基础加强"><a href="#基础加强" class="headerlink" title="基础加强"></a>基础加强</h1><ul><li><p>Junit单元测试</p></li><li><p>反射</p></li><li><p>注解</p></li></ul><h2 id="Junit单元测试"><a href="#Junit单元测试" class="headerlink" title="Junit单元测试"></a>Junit单元测试</h2><h3 id="测试分类"><a href="#测试分类" class="headerlink" title="测试分类"></a>测试分类</h3><ol><li><p>黑盒测试：不需要写代码，给输入值，看程序是否能够输出期望的值。</p></li><li><p>白盒测试：需要写代码的。关注程序具体的执行流程。</p><p><img src="pic/image-20200508234053953-1588953448875.png" alt="image-20200508234053953"></p></li></ol><p>   <img src="pic/image-20200508234649462-1588953438099.png" alt="image-20200508234649462"></p><h3 id="Junit使用"><a href="#Junit使用" class="headerlink" title="Junit使用"></a>Junit使用</h3><p>：白盒测试</p><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ol><li><p><strong>定义一个测试类（测试用例）</strong></p><p><em>建议:</em> </p><ul><li>测试类名：被测试的的类名Test            CalculatorTest</li><li>包名：xxx.xxx.xx.test        cn.itcast.test</li></ul></li></ol><ol start="2"><li><p><strong>定义测试方法：可以独立运行</strong></p><p> <em>建议：</em></p><ul><li>方法名：test测试的方法名        testAdd()  </li><li>返回值：void</li><li>参数列表：空参</li></ul></li></ol><ol start="3"><li><p><strong>给方法加@Test</strong></p></li><li><p><strong>导入junit依赖环境</strong></p></li></ol><h4 id="判定结果"><a href="#判定结果" class="headerlink" title="判定结果"></a>判定结果</h4><ul><li>红色：失败</li><li>绿色：成功</li><li>一般我们会使用<strong>断言</strong>操作来处理结果<ul><li><code>Assert.assertEquals</code>(期望的结果,运算的结果)【方法名写仔细了，没有Array】</li></ul></li></ul><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><ul><li>@Before:<ul><li>修饰的方法会在测试方法之前被自动执行</li></ul></li><li>@After:<ul><li>修饰的方法会在测试方法执行之后自动被执行</li></ul></li></ul><h4 id="方法演示"><a href="#方法演示" class="headerlink" title="方法演示"></a>方法演示</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>itcast<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">import</span> cn<span class="token punctuation">.</span>itcast<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Calculator<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>After<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Assert<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Before<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CalculatorTest</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 初始化方法：     *  用于资源申请，所有测试方法在执行之前都会先执行该方法     */</span>    <span class="token annotation punctuation">@Before</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"init..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 释放资源方法：     *  在所有测试方法执行完后，都会自动执行该方法     */</span>    <span class="token annotation punctuation">@After</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"close..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 测试add方法     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// System.out.println("我被执行了");</span>        <span class="token comment" spellcheck="true">//1.创建计算器对象</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"testAdd..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Calculator c  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Calculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.调用add方法</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//System.out.println(result);</span>        <span class="token comment" spellcheck="true">//3.断言  我断言这个结果是3</span>        Assert<span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.创建计算器对象</span>        Calculator c  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Calculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">sub</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"testSub...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Assert<span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>省略了 Calculator.java。具体看原工程</p></blockquote><h2 id="反射：框架设计的灵魂"><a href="#反射：框架设计的灵魂" class="headerlink" title="反射：框架设计的灵魂"></a>反射：框架设计的灵魂</h2><ul><li><p>框架：半成品软件。可以在框架的基础上进行软件开发，简化编码</p></li><li><p>反射：将类的各个组成部分封装为其他对象，这就是反射机制</p><ul><li>好处<ol><li>可以在程序运行过程中，操作这些对象。</li><li>可以解耦，提高程序的可扩展性。</li></ol></li></ul></li><li><p>java代码的三个阶段</p><p><img src="https://raw.githubusercontent.com/SuperYch/picBed/master/img/image-20200508234252907.png" alt="image-20200508234252907"></p></li></ul><h3 id="获取class对象的方法"><a href="#获取class对象的方法" class="headerlink" title="获取class对象的方法"></a>获取class对象的方法</h3><ol><li><code>Class.forName("全类名")</code>：将字节码文件加载进内存，返回<code>Class对象</code><ul><li>多用于配置文件，将类名定义在配置文件中。读取文件，加载类</li></ul></li><li><code>类名.class</code>：通过类名的属性class获取<ul><li>多用于参数的传递</li></ul></li><li><code>对象.getClass()</code>：getClass()方法在<code>Object类</code>中定义着。<ul><li>多用于对象的获取字节码的方式</li></ul></li></ol><p><em>案例演示</em></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>itcast<span class="token punctuation">.</span>reflect<span class="token punctuation">;</span><span class="token keyword">import</span> cn<span class="token punctuation">.</span>itcast<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Person<span class="token punctuation">;</span><span class="token keyword">import</span> cn<span class="token punctuation">.</span>itcast<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Student<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectDemo1</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**        获取Class对象的方式：            1. Class.forName("全类名")：将字节码文件加载进内存，返回Class对象            2. 类名.class：通过类名的属性class获取            3. 对象.getClass()：getClass()方法在Object类中定义着。     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.Class.forName("全类名")</span>        Class <span class="token class-name">cls1</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"cn.itcast.domain.Person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cls1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.类名.class</span>        Class <span class="token class-name">cls2</span> <span class="token operator">=</span> Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cls2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.对象.getClass()</span>        Person p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class <span class="token class-name">cls3</span> <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cls3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//== 比较三个对象,可得出结论</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cls1 <span class="token operator">==</span> cls2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cls1 <span class="token operator">==</span> cls3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>        Class <span class="token class-name">c</span> <span class="token operator">=</span> Student<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c <span class="token operator">==</span> cls1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><em>结论</em></p><blockquote><p>同一个字节码文件<code>(*.class)</code>在一次程序运行过程中，<strong>只会被加载一次</strong>，<strong>不论通过哪一种方式获取的Class对象都是同一个。</strong></p></blockquote><h3 id="class对象的功能"><a href="#class对象的功能" class="headerlink" title="class对象的功能"></a>class对象的功能</h3><p>获取功能</p><ol><li>获取成员变量们<ul><li><code>Field[] getFields()</code>：获取所有public修饰的成员变量，包括父类的。</li><li><code>Field getField(String name)</code>   ：获取指定名称的 public修饰的成员变量，包括父类的。</li><li><code>Field[] getDeclaredFields()</code>：获取所有的成员变量，不考虑修饰符</li><li><code>Field getDeclaredField(Strin name)</code> ：返回一个Field对象，它反映此表示的类或接口的指定已声明字段类对象。 name参数是一个String ，它指定了所需字段的简单名称。<br>如果此类对象表示数组类型，则此方法不会找到数组类型的length字段。 </li></ul></li></ol><ol start="2"><li><p>获取构造方法们</p><ul><li><code>Constructor&lt;?&gt;[] getConstructors()</code></li><li><code>Constructor&lt;T&gt; getConstructor(类&lt;?&gt;... parameterTypes)</code></li></ul></li><li><p>获取成员方法们</p><ul><li><code>Method[] getMethods()</code></li><li><code>Method getMethod(String name, 类&lt;?&gt;... parameterTypes)</code></li></ul></li><li><p>获取全类名</p><ul><li><code>String getName()</code></li></ul></li><li><p>相关异常</p><ul><li>NoSuchMethodException - 如果找不到匹配的方法。</li><li>NoSuchFieldException - 如果找不到指定名称的字段。</li><li>ClassNotFoundException - 如果该类无法找到 。</li></ul></li></ol><blockquote><p>注：其中凡是带有Declared的方法，返回的对象均不包括继承字段/继承方法。令：子类不会继承父类的构造函数。</p></blockquote><h3 id="Field：成员变量"><a href="#Field：成员变量" class="headerlink" title="Field：成员变量"></a>Field：成员变量</h3><p>操作</p><ol><li><p>设置值</p><ul><li><code>void set(Object obj, Object value)</code></li></ul></li><li><p>获取值</p><ul><li><code>get(Object obj)</code></li></ul></li><li><p>忽略访问权限修饰符的安全检查</p><ul><li><code>setAccessible(true)</code>:暴力反射</li></ul></li></ol><h3 id="Constructor-构造方法"><a href="#Constructor-构造方法" class="headerlink" title="Constructor:构造方法"></a>Constructor:构造方法</h3><p>创建对象：</p><ul><li><code>T newInstance(Object... initargs)</code> <ul><li>如果使用空参数构造方法创建对象，操作可以简化：Class对象的newInstance方法</li></ul></li></ul><h3 id="Method：方法对象"><a href="#Method：方法对象" class="headerlink" title="Method：方法对象"></a>Method：方法对象</h3><p>执行方法：</p><ol><li><p><code>Object invoke(Object obj, Object... args)</code>  </p></li><li><p>获取方法名称：</p><ul><li><code>String getName</code>:获取方法名</li></ul></li></ol><h3 id="演示案例"><a href="#演示案例" class="headerlink" title="演示案例"></a>演示案例</h3><blockquote><ul><li>需求：写一个”框架”，不能改变该类的任何代码的前提下，可以帮我们创建任意类的对象，并且执行其中任意方法<ul><li>实现：<ol><li>配置文件</li><li>反射</li></ol></li><li>步骤：<ol><li>将需要创建的对象的全类名和需要执行的方法定义在配置文件中</li><li>在程序中加载读取配置文件</li><li>使用反射技术来加载类文件进内存</li><li>创建对象</li><li>执行方法</li></ol></li></ul></li></ul></blockquote><p><em>配置文件pro.properties</em></p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">className</span><span class="token punctuation">=</span><span class="token attr-value">cn.itcast.domain.Student</span><span class="token attr-name">methodName</span><span class="token punctuation">=</span><span class="token attr-value">sleep</span></code></pre><p><em>反射ReflectTest</em></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>itcast<span class="token punctuation">.</span>reflect<span class="token punctuation">;</span><span class="token keyword">import</span> cn<span class="token punctuation">.</span>itcast<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Person<span class="token punctuation">;</span><span class="token keyword">import</span> cn<span class="token punctuation">.</span>itcast<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Student<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 框架类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//可以创建任意类的对象，可以执行任意方法</span>        <span class="token comment" spellcheck="true">/*            前提：不能改变该类的任何代码。可以创建任意类的对象，可以执行任意方法         */</span>      <span class="token comment" spellcheck="true">/*  Person p = new Person();        p.eat();*/</span><span class="token comment" spellcheck="true">/*        Student stu = new Student();        stu.sleep();*/</span>        <span class="token comment" spellcheck="true">//1.加载配置文件</span>        <span class="token comment" spellcheck="true">//1.1创建Properties对象</span>        Properties pro <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1.2加载配置文件，转换为一个集合</span>        <span class="token comment" spellcheck="true">//1.2.1获取class目录下的配置文件</span>        ClassLoader classLoader <span class="token operator">=</span> ReflectTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        InputStream is <span class="token operator">=</span> classLoader<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"pro.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pro<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.获取配置文件中定义的数据</span>        String className <span class="token operator">=</span> pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"className"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String methodName <span class="token operator">=</span> pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"methodName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.加载该类进内存</span>        Class <span class="token class-name">cls</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.创建对象</span>        Object obj <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5.获取方法对象</span>        Method method <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//6.执行方法</span>        method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>获取class对象的方法，class对象的功能，Field，Constructor，Method的使用见原工程</p></blockquote><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><ul><li><p>概念：说明程序的。给计算机看的。</p></li><li><p>注释：用文字描述程序的。给程序员看的。</p></li><li><p>定义：<strong>注解（Annotation），也叫元数据。一种代码级别的说明。它是JDK1.5及以后版本引入的一个特性，与类、接口、枚举是在同一个层次。它可以声明在包、类、字段、方法、局部变量、方法参数等的前面，用来对这些元素进行说明，注释。</strong></p></li><li><p>总结</p><blockquote><ul><li>JDK1.5之后的新特性</li><li>说明程序的</li><li>使用注解：@注解名称</li></ul></blockquote></li></ul><h3 id="作用分类"><a href="#作用分类" class="headerlink" title="作用分类"></a>作用分类</h3><ol><li><p>编写文档：通过代码里标识的注解生成文档【生成文档doc文档】</p><pre class=" language-powershell"><code class="language-powershell"><span class="token function">PS</span> C:\Users\Mr<span class="token punctuation">.</span>Yang\Desktop\新建文件夹> javadoc <span class="token punctuation">.</span>\AnnoDemo1<span class="token punctuation">.</span>java</code></pre><blockquote><p>在新建文件夹下存在名为AnnoDemo1.java文件。注：要注意保存的编码要与系统相同，且删除自己建立的包名。</p></blockquote></li><li><p>代码分析：通过代码里标识的注解对代码进行分析【使用反射】</p></li><li><p>编译检查：通过代码里标识的注解让编译器能够实现基本的编译检查【Override】</p></li></ol><h3 id="JDK中预定义的一些注解"><a href="#JDK中预定义的一些注解" class="headerlink" title="JDK中预定义的一些注解"></a>JDK中预定义的一些注解</h3><ul><li><code>@Override</code>    ：检测被该注解标注的方法是否是继承自父类(接口)的</li><li><code>@Deprecated</code>：该注解标注的内容，表示已过时</li><li><code>@SuppressWarnings</code>：压制警告<ul><li>一般传递参数all  <code>@SuppressWarnings("all")</code></li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * JDK中预定义的一些注解 *         * @Override    ：检测被该注解标注的方法是否是继承自父类(接口)的 *         * @Deprecated：该注解标注的内容，表示已过时 *         * @SuppressWarnings：压制警告 * * */</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"all"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnoDemo2</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//例如Data类里许多过时的方法都用——划去，其实就是该方法使用了@Deprecated 。</span>    <span class="token comment" spellcheck="true">//表示有了更好的方法，不过此方法还可以使用。</span>    <span class="token annotation punctuation">@Deprecated</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//有缺陷</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//替代show1方法</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">show1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Date date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h3><h4 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/***元注解**/</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> 注解名称<span class="token punctuation">{</span>    属性列表<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>本质：注解本质上就是一个接口，该接口默认继承Annotation接口，通过字节码文件反编译可以得出以下代码<code>public interface MyAnno extends java.lang.annotation.Annotation {}</code> 。</p></blockquote><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><p>：接口中的抽象方法</p><p>要求：</p><ol><li>属性的返回值类型有下列取值<ul><li>基本数据类型</li><li>String</li><li>枚举</li><li>注解</li><li>以上类型的数组</li></ul></li><li>定义了属性，在使用时需要给属性赋值<ul><li>如果定义属性时，使用<code>default</code>关键字给属性默认初始化值，则使用注解时，可以不进行属性的赋值。</li><li>如果只有一个属性需要赋值，并且属性的名称是<code>value</code>，则value可以省略，直接定义值即可。</li><li>数组赋值时，值使用{}包裹。如果数组中只有一个值，则{}可以省略</li></ul></li></ol><h4 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h4><p>：用于描述注解的注解</p><ol><li><p><code>@Target</code>：描述注解能够作用的位置</p><ul><li><p><code>ElementType.常量名</code>取值</p></li><li><table><thead><tr><th align="center">常量名</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">TYPE</td><td align="center">作用于类上</td></tr><tr><td align="center">METHOD</td><td align="center">作用于方法上</td></tr><tr><td align="center">FIELD</td><td align="center">作用于成员变量上</td></tr></tbody></table></li></ul></li><li><p><code>@Retention</code>：描述注解被保留的阶段</p><ul><li><p><code>RetentionPolicy.常量名</code>的取值</p></li><li><table><thead><tr><th align="left">常量名</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">SOURCE</td><td align="left">注释将被编译器丢弃。</td></tr><tr><td align="left">CLASS</td><td align="left">注释将由编译器记录在类文件中，但VM不需要在运行时保留。 这是默认行为。</td></tr><tr><td align="left">RUNTIME</td><td align="left">当前被描述的注解，会保留到class字节码文件中，并被JVM读取到</td></tr></tbody></table><blockquote><p>其分别对应java文件对应的三个阶段，一般我们都使用第三阶段</p></blockquote></li></ul></li><li><p><code>@Documented</code>：描述注解是否被抽取到api文档中</p><ul><li>可通过javadoc+.java文件 ：命令生成相应api文档，其中jdk api文档都是如此生成的</li></ul></li><li><p><code>@Inherited</code>：描述注解是否被子类继承</p></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** 元注解：用于描述注解的注解     * @Target：描述注解能够作用的位置     * @Retention：描述注解被保留的阶段     * @Documented：描述注解是否被抽取到api文档中     * @Inherited：描述注解是否被子类继承 * */</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">,</span>ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">,</span>ElementType<span class="token punctuation">.</span>FIELD<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Inherited</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">MyAnno3</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h4 id="在程序使用-解析-注解"><a href="#在程序使用-解析-注解" class="headerlink" title="在程序使用(解析)注解"></a>在程序使用(解析)注解</h4><p>：获取注解中定义的属性值</p><ol><li>获取注解定义的位置的对象  （Class，Method,Field）</li><li>获取指定的注解：getAnnotation(Class)</li></ol><ul><li><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//其实就是在内存中生成了一个该注解接口的子类实现对象</span><span class="token comment" spellcheck="true">//例如： Pro an = reflectTestClass.getAnnotation(Pro.class);生成了Pro实现类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProImpl</span> <span class="token keyword">implements</span> <span class="token class-name">Pro</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">className</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"cn.itcast.annotation.Demo1"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">methodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"show"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><ol start="3"><li>调用注解中的抽象方法获取配置的属性值</li></ol><h3 id="演示案例1"><a href="#演示案例1" class="headerlink" title="演示案例1"></a>演示案例1</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> annotation<span class="token punctuation">.</span>demo<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ElementType<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Retention<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RetentionPolicy<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Target<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 描述需要执行的类名，和方法名 */</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Pro</span> <span class="token punctuation">{</span>    String <span class="token function">className</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String <span class="token function">methodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> annotation<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">import</span> annotation<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>Pro<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 框架类 */</span><span class="token annotation punctuation">@Pro</span><span class="token punctuation">(</span>className <span class="token operator">=</span> <span class="token string">"annotation.demo.Demo1"</span><span class="token punctuation">,</span>methodName <span class="token operator">=</span> <span class="token string">"show"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*            前提：不能改变该类的任何代码。可以创建任意类的对象，可以执行任意方法         */</span>        <span class="token comment" spellcheck="true">//1.解析注解</span>        <span class="token comment" spellcheck="true">//1.1获取该类的字节码文件对象</span>        Class<span class="token operator">&lt;</span>ReflectTest<span class="token operator">></span> reflectTestClass <span class="token operator">=</span> ReflectTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.获取上边的注解对象</span>        <span class="token comment" spellcheck="true">//其实就是在内存中生成了一个该注解接口的子类实现对象</span>        <span class="token comment" spellcheck="true">/*            public class ProImpl implements Pro{                public String className(){                    return "cn.itcast.annotation.Demo1";                }                public String methodName(){                    return "show";                }            } */</span>        Pro an <span class="token operator">=</span> reflectTestClass<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>Pro<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.调用注解对象中定义的抽象方法，获取返回值</span>        String className <span class="token operator">=</span> an<span class="token punctuation">.</span><span class="token function">className</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String methodName <span class="token operator">=</span> an<span class="token punctuation">.</span><span class="token function">methodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.加载该类进内存</span>        Class <span class="token class-name">cls</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.创建对象</span>        Object obj <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5.获取方法对象</span>        Method method <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//6.执行方法</span>        method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>可能会出现的问题：</p><ul><li><p>NullPointerException，查看一下Pro的注解是否写上了@Target和@Retention。</p></li><li><p>NoSuchMethodException，查看一下传递的方法名称是否正确</p></li></ul></blockquote><h3 id="演示案例2"><a href="#演示案例2" class="headerlink" title="演示案例2"></a>演示案例2</h3><p>：简单的测试框架</p><p><em>@Check</em></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> annotation<span class="token punctuation">.</span>demo<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ElementType<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Retention<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RetentionPolicy<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Target<span class="token punctuation">;</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">,</span> ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Check</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p><em>Calculator</em></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> annotation<span class="token punctuation">.</span>demo<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Calculator</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Check</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String s <span class="token operator">=</span> null<span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1 + 0 ="</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Check</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1 - 0 ="</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Check</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mul</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1 * 0 ="</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Check</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1 / 0 ="</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"永无bug..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><em>CalculatorTest</em></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> annotation<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">import</span> annotation<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>Calculator<span class="token punctuation">;</span><span class="token keyword">import</span> annotation<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>Check<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedWriter<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileWriter<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author Ych * @version 13 * @className CalculatorTest * @data 2020/5/13 16:29 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CalculatorTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.创建计算机类对象</span>        Calculator c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Calculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.获取字节码文件对象</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Calculator</span><span class="token operator">></span> cls <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.获取所有的方法</span>        Method<span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//出现异常的次数</span>        BufferedWriter bw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"bug.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.判断方法上是否有Check注解</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Method method <span class="token operator">:</span> methods<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>Check<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//5.有，执行</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">//6.捕获异常，记录到文件中</span>                    number<span class="token operator">++</span><span class="token punctuation">;</span>                    bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"方法出现了异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    bw<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"异常的名称"</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    bw<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"异常的原因"</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    bw<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"----------------------------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"本次测试一共出现"</span> <span class="token operator">+</span> number <span class="token operator">+</span> <span class="token string">"次异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//7.资源释放</span>        bw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>注：Throwable getCause()获取异常，getClass()获取字节码文件对象，getSimpleName()获取字节码文件对象简单的名字（若为getName则会带上包名），getMessage()获取异常信息。</p></blockquote><h1 id="MySQL基础"><a href="#MySQL基础" class="headerlink" title="MySQL基础"></a>MySQL基础</h1><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>codeforces</title>
      <link href="/2020/04/15/icpc/"/>
      <url>/2020/04/15/icpc/</url>
      
        <content type="html"><![CDATA[<h2 id="2019-2020-ICPC-Southeastern-European-Regional-Programming-Contest-SEERC-2019"><a href="#2019-2020-ICPC-Southeastern-European-Regional-Programming-Contest-SEERC-2019" class="headerlink" title="2019-2020 ICPC Southeastern European Regional Programming Contest (SEERC 2019)"></a>2019-2020 ICPC Southeastern European Regional Programming Contest (SEERC 2019)</h2><p>-[✔] D - Cycle String?</p><p>-[✔] F - Game on a Tree</p><p>-[✔] I - Absolute Game</p><p>-[✔] J - Graph and Cycles</p><h3 id="J-Graph-and-Cycles"><a href="#J-Graph-and-Cycles" class="headerlink" title="J - Graph and Cycles"></a>J - Graph and Cycles</h3><hr><h4 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h4><p>给出一个有n（n为奇数）个点的无向完全图，可以从这张图中分割出任意个圈，任意两个分割出来的圈没有重叠的边，而且图中的每一条边必定属于其中一个圈。圈分割出来后，对于其中的每个顶点的两条边取最大值然后相加作为该圈的重量，问如何分割这张图能使所有圈的重量和最小。</p><h4 id="官方题解："><a href="#官方题解：" class="headerlink" title="官方题解："></a>官方题解：</h4><p>我们从点的角度出发,对于一个 <code>cycle-array</code> 的贡献其实就是对每个点连着的两条边取一个最大值。现在我们考虑全局的的代价，每个点要贡献 $\frac{n-1}2$ 次，要把 $n-1$ 条连着的边配成 $\frac{n-1}2$ 对并且是的总代价尽可能小。所以我们贪心地考虑，我们每次把尽量大的两条边配对即可。</p><blockquote><p>补充：由于是奇数点，又因为是完全图，那么每个点的度为偶数。根据<strong>欧拉环游：</strong><br>$$<br>图 G 称为偶图(even graph)，如果G 中每个顶点的度数为偶数。容易发现，连通的偶图即为欧拉图。<br>$$<br>那么必然每个点的任意两条边为一对，n个点组合起来必为一个欧拉图。以此类推，每个点其他两条边组合（不与之前边重合）为一对，这样又是一个欧拉图。奇数点的Kn完全图，每个点必有（n-1）边（偶数个），最后一定可以形成1个或多个边不重合的环。这样我们就可以贪心的将每个点连接边按从大到小排序，两两组合。</p><p>（钻牛角尖：仔细思考一下，每个点两条边进行比较，每个环的和已经包括开始的边与结束的边的比较的最大值，因为它围成了一个环，可以画个奇数点的图出来看看）【所有说每次钻牛角尖都是想当然，动笔才是关键】</p></blockquote><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> ll long long</span><span class="token macro property">#<span class="token directive keyword">define</span> pb push_back</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> mod <span class="token operator">=</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">2e5</span> <span class="token operator">+</span> <span class="token number">233</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> g<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">,</span><span class="token operator">&amp;</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>        g<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pb</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>        g<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pb</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ll ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">sort</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>greater<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token number">-1</span><span class="token punctuation">;</span>j<span class="token operator">+</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>            ans <span class="token operator">+</span><span class="token operator">=</span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>greater表示内置类型从大到小排序，less表示内置类型从小到大排序。</p></blockquote><h3 id="F-Game-on-a-Tree"><a href="#F-Game-on-a-Tree" class="headerlink" title="F - Game on a Tree"></a>F - Game on a Tree</h3><hr><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>给定一棵根结点为 的树，一开始全白，alice和bob轮流玩，Alice选择一个点，将其染黑，接下来Bob将这个点的某个祖先点或其子树点染黑，2个人轮流来，双方都采取最优策略，问最终谁获胜</p><h4 id="官方题解"><a href="#官方题解" class="headerlink" title="官方题解"></a>官方题解</h4><p>首先我们考虑这样一个游戏：在一张无向图上，游戏的条件和题设基本相同，除了我们只能沿着边走。下面直接给出上述游戏结论，若该无向图存在完美匹配，那么后手必胜，否则先手必胜。证明：无向图存在完美匹配时后手只需沿着匹配走就可以了。当不存在完美匹配时，取一个最大匹配，先手任选一个不在匹配中的点作为起点，然后每次走后手选的点的匹配即可。因为后手不可能选择一个不在匹配中的点，否则将构成增广路与最大匹配矛盾。</p><p>对于原问题，我们重构一张无向图。若两点 $x,y$ 在原树上是子孙关系，我们就在新图中给他们连一条无向边。此时问题转换为求新图是否存在完美匹配。结合图的性质，在原树上深度越小的点，在新图中度数就越大，通用性相较于他的后代更强。所以我们可以贪心地让每个点尽量匹配深度较大的点。设 $f[x]$ 为在原树中以 $x$ 为根的子树所生成的无向图中最少无法匹配上的点的数量。设 $sum = \sum f[y]$其中 $y$ 为 $x$ 的儿子。如果 $sum&gt;0$ 表示子树中还有点没有被配对，选一个点和 $x$ 配对得 $f[x] = sum-1$，否则 $x$ 无法被配对 $f[x] = 1$。即 $f[x] = \begin{cases} sum-1,&amp;sum&gt;0\  1,&amp;sum=0\end{cases}$。后手获胜当且仅当 $f[x]=0$。综上，时间复杂度 $O(n)$。</p><blockquote><p>补充：<a href="http://m.mamicode.com/info-detail-2970115.html" target="_blank" rel="noopener">参考博客</a></p><p>注：此题可看成一个图，每个点必有点与之相连</p><p>若存在完美匹配，则后手必胜，最后一个结点必为后手。（所有点都连起来了）</p><p>若不存在完美匹配。先手一定选择不在匹配内的点。</p><ul><li><p>①若后序后手一直选择匹配内的点，则先手可以按完美匹配那样，先手必为最后一点。</p></li><li><p>②若后序存在后手选择不匹配的点，则矛盾：假设n个点最大匹配为（&lt;v1,v2&gt;,&lt;v3,v4&gt;,&lt;v5,v6&gt;,….,&lt;vk-1,vk&gt;）（k &lt; n）; 现在有先手和后手分别走了不在匹配内的点a,b。则（&lt;a,v1&gt;,&lt;v2,v3&gt;,&lt;v4,b&gt;,&lt;v5,v6&gt;,….,&lt;vk-1,vk&gt;），此时a~b都是连通可达的。那么就与最大匹配数不符。所有后手走不了匹配外的点。</p></li></ul><p>此题的答案就是判断是否存在完美匹配。我们从根结点开始找，找到的最大匹配数一定最优。</p><p>此题也可以使用树dp寻找最大匹配数。</p></blockquote><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAXV <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">[</span>MAXV<span class="token punctuation">]</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> son<span class="token punctuation">[</span>MAXV<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*例如：                                   other                                        /  \                                       fa   other                                      /\                                     x  other                                    / \                                  y   z    递归到叶子结点y,f[y] = 1 -->接着到y的父节点x f[x] = 1,（f[x]+=f[y]） =2，    说明这两点(x,y)还未匹配，则执行f[x]-=2; 这样会使得x的父节点fa,f[fa]+f[x] =   f[fa],说明fa此时不能与x进行匹配，因为x已匹配过，fa需另寻其他能与它匹配的子结点*/</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> fa<span class="token punctuation">)</span> <span class="token punctuation">{</span>    f<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//自身点</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> y <span class="token operator">:</span> son<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">==</span> fa<span class="token punctuation">)</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> f<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//子结点有与之相匹配的点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span>        f<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">;</span>        cin <span class="token operator">>></span> u <span class="token operator">>></span> v<span class="token punctuation">;</span>        son<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        son<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Alice"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">else</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Bob"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>附：<a href="https://blog.csdn.net/sixdaycoder/article/details/47720471" target="_blank" rel="noopener">二分图-KM算法</a>，<a href="https://blog.csdn.net/sixdaycoder/article/details/47680831" target="_blank" rel="noopener">二分图的最大匹配-匈牙利算法</a> 【关于增广路讲的十分不错】</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> c/c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣</title>
      <link href="/2019/11/01/leetcode/"/>
      <url>/2019/11/01/leetcode/</url>
      
        <content type="html"><![CDATA[<h3 id="中等难度"><a href="#中等难度" class="headerlink" title="中等难度"></a>中等难度</h3><h4 id="加油站"><a href="#加油站" class="headerlink" title="加油站"></a><a href="https://leetcode-cn.com/problems/gas-station/" target="_blank" rel="noopener">加油站</a></h4><p><strong>考点</strong>:<em>贪心，数组</em><br><em>题意：</em></p><blockquote><p>给你一条路线，从加油站1到加油站2的花费的油量，以及到加油站2所能补充的油量，问是否能走完<strong>一圈</strong>，若能，求出出发点</p></blockquote><p><em>思路</em></p><blockquote><p>判断能否走完全程：总油量sum，花费cost，<strong>sum-cost&lt; 0</strong>时，一定不能走完全程<br>求出发点：若当前i站的<strong>(curr_tank +=gas[i] - cost[i]) &lt; 0</strong>,则此站行不通，sta = i + 1</p></blockquote><p><em>思考</em><br>为什么不是上一站的sta + 1</p><blockquote><ul><li>原因是作为起始站，首先它要保证到自己时<em>curr_tank &gt;= 0</em>，上一个站使得<em>curr_tank &lt; 0</em>，必然起始站<em>gas-cost &gt;= 0</em>，(如果你觉是在它之前的<strong>i-1</strong>站让<em>curr_tank</em>变到很多，到当前i站即使为负，<em>curr_tank &gt;= 0</em>，这就想歪了，这种情况必然取<strong>i-1</strong>站作为起始) </li></ul></blockquote><blockquote><ul><li>这样以来以i站开始，到i+k时，<em>curr_tank &lt;0</em>,那么不可能再从<strong>i+1</strong>开始，因为i站的<em>gas-cost &gt;= 0</em>，也就是说</li><li>$\sum_{i}^k({gas-cost}) $ &gt;$ \sum_{i+1}^k({gas-cost})$ </li><li>$(curr\_tank(i-&gt;k) &gt; curr\_tank(i+1-&gt;k))$</li><li>类似的从<strong>i+1~(k)</strong>出发的<em>curr_rank</em>都小于从<strong>i</strong>出发的<em>curr_rank</em>，所以 <strong>sta = k+1</strong>(k为失败那一站)</li></ul></blockquote><p><em>code</em></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">canCompleteCircuit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> gas<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cost<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> total_tank <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> curr_tank <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> gas<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> sta <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>            total_tank <span class="token operator">+=</span>gas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            curr_tank <span class="token operator">+=</span>gas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>curr_tank <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                curr_tank <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                sta <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span>  total_tank <span class="token operator">>=</span> <span class="token number">0</span><span class="token operator">?</span> sta<span class="token operator">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> java </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>codeforces</title>
      <link href="/2019/10/29/codeforces/"/>
      <url>/2019/10/29/codeforces/</url>
      
        <content type="html"><![CDATA[<h1 id="Codeforces"><a href="#Codeforces" class="headerlink" title="Codeforces"></a>Codeforces</h1><h2 id="Codeforces-Round-629-Div-3"><a href="#Codeforces-Round-629-Div-3" class="headerlink" title="Codeforces Round #629 (Div. 3) "></a><a href="http://codeforces.com/blog/entry/75246" target="_blank" rel="noopener">Codeforces Round #629 (Div. 3) </a></h2><p>-[✔] A. Divisibility Problem</p><p>-[✔] B. K-th Beautiful String</p><p>-[✔] C. Ternary XOR</p><p>-[✔] D. Carousel</p><p>-[]E. Tree Queries</p><p>-[]F. Make k Equal</p><h3 id="A-Divisibility-Problem"><a href="#A-Divisibility-Problem" class="headerlink" title="A. Divisibility Problem"></a>A. Divisibility Problem</h3><hr><p><strong>考点：math，*800</strong></p><p>题意：</p><blockquote><p>有a，b两个正整数，可对a进行+1操作，求最少操作次数，使得a能整除b</p></blockquote><p>思路：</p><blockquote><p>如果$a % b = 0$那么输出0；否则输出$b - a%b$。</p></blockquote><p>代码：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> _DEBUG</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    freopen("output.txt", "w", stdout);</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>    cin <span class="token operator">>></span> t<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>        cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">%</span> b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token number">0</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> b <span class="token operator">-</span> a <span class="token operator">%</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="B-K-th-Beautiful-String"><a href="#B-K-th-Beautiful-String" class="headerlink" title="B. K-th Beautiful String"></a>B. K-th Beautiful String</h3><hr><p><strong>考点： binary search    brute force    combinatorics    implementation    math    *1300</strong></p><p>题意：</p><blockquote><p>给你长度为n的字符串。【字符串中只包含字符‘a’与‘b’，且b只有两个】。共有$\frac{n*(n-1)}{2}$种组合，按字典序从小到大排序。输入t，代表t组数据。每组数据，输入n和k，代表字符的长度，和你所需要字符串在字典的顺序。求满足条件的字符串，打印输出。</p></blockquote><p>思路（官方）：</p><blockquote><p>让我们尝试找到最左侧出现的“ b”的位置（在从 $n-2 到 2$ 的所有位置上迭代）。如果$k≤n-i-1$，则这是最左边’b’出现的必需位置。 那么最右边出现的位置是$n-k$，因此我们可以打印答案。 否则，让k减少$n−i-1$（删除在当前位置上最左边的“ b”的所有字符串）并前进到下一个位置。 显然，以这种方式，我们按字典顺序考虑了所有可能的字符串。</p><p>解释k-=(n-i-1)：(n-i-1)代表了在该位置最左边的‘b’共有多少种排列。当最左边的b所在位置不满足条件，那么所有以此位置的‘b’加上最右边的’b’的排列组合都不满足。（表中index = 1~n）当leftm ‘b’，pos = 4时，共有组合com=1; pos = 3, com = 2; pos = 3, com = 3等等。</p><table><thead><tr><th align="center">n=5, k = 3(index = 1~n)</th><th align="center">leftmost ‘b’</th><th align="center">rightmost ‘b’</th></tr></thead><tbody><tr><td align="center">aaabb</td><td align="center">4</td><td align="center">5</td></tr><tr><td align="center">aabab</td><td align="center">3</td><td align="center">5</td></tr><tr><td align="center">aabba</td><td align="center">3</td><td align="center">4</td></tr><tr><td align="center">abaab</td><td align="center">2</td><td align="center">5</td></tr><tr><td align="center">ababa</td><td align="center">2</td><td align="center">4</td></tr><tr><td align="center">abbaa</td><td align="center">2</td><td align="center">3</td></tr><tr><td align="center">….</td><td align="center">pos:1\2\3\4</td><td align="center">comnum:1\2\3\4</td></tr></tbody></table></blockquote><p>代码（官方）：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> forn(i, n) for (int i = 0; i &lt; int(n); i++)</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>    cin <span class="token operator">>></span> t<span class="token punctuation">;</span>    <span class="token function">forn</span><span class="token punctuation">(</span>tt<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">;</span>        cin <span class="token operator">>></span> n <span class="token operator">>></span> k<span class="token punctuation">;</span>        string <span class="token function">s</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'b'</span><span class="token punctuation">;</span>                s<span class="token punctuation">[</span>n <span class="token operator">-</span> k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'b'</span><span class="token punctuation">;</span>                cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            k <span class="token operator">-</span><span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>思路（自己）：</p><blockquote><p>我们发现固定最左边的’b’，发现组合个数按等差数列递增（1+2+3+n），那么$\frac{c*(c+1)}{2} \geq k$ , d代表了从左边起第几个‘b’，位置pos1 = n - c；第k位包含在这个位置‘b’的组合数里。那么最右边的’b’等于 pos1 + (所差的个数)+1。（总数减所需数，从后往前减）。</p></blockquote><p>代码（个人）：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span> cin<span class="token operator">>></span>t<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ll n<span class="token punctuation">,</span> k<span class="token punctuation">;</span> cin<span class="token operator">>></span>n<span class="token operator">>></span>k<span class="token punctuation">;</span>        ll c <span class="token operator">=</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.0</span><span class="token operator">+</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token operator">+</span><span class="token number">8.0</span><span class="token operator">*</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//cout&lt;&lt;c&lt;&lt;endl;</span>        <span class="token keyword">int</span> pos1 <span class="token operator">=</span> n <span class="token operator">-</span> c<span class="token punctuation">;</span>        <span class="token keyword">int</span> pos2 <span class="token operator">=</span> pos1 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>c<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">-</span>k<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//cout&lt;&lt;pos1&lt;&lt;" "&lt;&lt;pos2&lt;&lt;endl;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> pos1 <span class="token operator">||</span> i <span class="token operator">==</span> pos2<span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span><span class="token string">'b'</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> cout<span class="token operator">&lt;&lt;</span><span class="token string">'a'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="C-Ternary-XOR"><a href="#C-Ternary-XOR" class="headerlink" title="C. Ternary XOR"></a>C. Ternary XOR</h3><hr><p><strong>考点：  greedy    implementation    *1200</strong></p><p>题意：</p><blockquote><p>定义一种算法$x_i=a⊙b \quad x_i=(a_i+b_i)%3 $ ，其中a，b，x全部都有0，1，2字符组成；x字符的每一位都由（a+b）%3取得。现在给你c，求a与b，使得 $max(a,b)$ 尽可能小。</p></blockquote><p>思路：</p><blockquote><p>让我们从左到右对数字x进行迭代，如果当前的数字是0或者2,我们可以使得$a_i = b_i = 0 或者 a_i = b_i = 1 $ 这是最优的选择。 然后当第一次出现$x_i = 1$ 我们可以使得 $a_i = 1，b_i = 0$ , 接着无论如何都让$a_i = 0, b_i = x_i$ （这里我们默认a &gt; b）</p></blockquote><p>代码（官方）：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> _DEBUG</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    freopen("output.txt", "w", stdout);</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>    cin <span class="token operator">>></span> t<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n<span class="token punctuation">;</span>        string x<span class="token punctuation">;</span>        cin <span class="token operator">>></span> n <span class="token operator">>></span> x<span class="token punctuation">;</span>        string <span class="token function">a</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">b</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 迭代过程中找到第一个1的位置，并将之后的值按算法处理，完成跳出循环。</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'1'</span><span class="token punctuation">;</span>                b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'0'</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'0'</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>代码（个人）：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span> cin<span class="token operator">>></span>t<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> n<span class="token punctuation">;</span> cin<span class="token operator">>></span>n<span class="token punctuation">;</span>        string a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">;</span>        cin<span class="token operator">>></span>c<span class="token punctuation">;</span>        <span class="token keyword">int</span> pos1<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//找到第一次出现1的位置</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>pos1 <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//默认a>b</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pos1 <span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//有1情况</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pos1<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>                a <span class="token operator">+</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span> <span class="token operator">+</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                b <span class="token operator">+</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span> <span class="token operator">+</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//xi = 1, a,b进行拼接</span>            a <span class="token operator">+</span><span class="token operator">=</span><span class="token string">'1'</span><span class="token punctuation">;</span>            b <span class="token operator">+</span><span class="token operator">=</span><span class="token string">'0'</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> pos1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>                a <span class="token operator">+</span><span class="token operator">=</span><span class="token string">'0'</span><span class="token punctuation">;</span>                b <span class="token operator">+</span><span class="token operator">=</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 无1情况</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>                a <span class="token operator">+</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span> <span class="token operator">+</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                b <span class="token operator">+</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span> <span class="token operator">+</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        cout<span class="token operator">&lt;&lt;</span>a<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>b<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="D-Carousel"><a href="#D-Carousel" class="headerlink" title="D. Carousel"></a>D. Carousel</h3><hr><p><strong>考点：constructive algorithms    greedy    math    *1800</strong></p><p>题意：</p><blockquote><p>有n只动物，n只动物围成一圈，用不同的数字代表不同的动物。你要给每只动物涂色，<em>唯一的限制：**</em>相邻<strong>且</strong>不同**的动物需要涂成不一样的颜色，问你尽可能少要用多少种颜色。</p></blockquote><p>思路（官方）：</p><blockquote><p>这个问题的答案最多为3。让我们通过构造对其进行证明。</p><p>首先，①如果所有的$t_i$是相等的，那么答案是1。否则，数组t中至少有两个不同的值，因此答案至少是2；</p><p>​            ②如果n是偶数，那么答案是2，因为你可以使得颜色按[1,2,1,2,….,1,2]进行填充；</p><p>​            ③第一种情况是一些相邻的图形具有相同的类型。那么答案就是2，因为你可以把这两个值合并成一个，得到偶数的情况。否则，所有相邻的图形对都有不同的类型，如果将这个循环数组视为一个图（长度周期为n）,然后你会注意到它不是二部图，所以你需要至少3种颜色来得到答案(用任何两个相邻的顶点有不同颜色的方式来给所有的顶点着色)。答案是3，可以这样[1,2,1,2,…,1,2,3]填充。</p></blockquote><p>代码（官方）：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">a</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">count</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token number">2</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//若存在相邻的相同动物</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> a<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">ans</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> pos <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> pos <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>pos<span class="token punctuation">,</span> j <span class="token operator">^</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ans<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> pos <span class="token operator">=</span> i<span class="token punctuation">;</span> pos <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>pos<span class="token punctuation">,</span> j <span class="token operator">^</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ans<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token number">2</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> pos <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>pos<span class="token punctuation">)</span> <span class="token punctuation">{</span>                cout <span class="token operator">&lt;&lt;</span> ans<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token number">3</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token number">3</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> _DEBUG</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    freopen("output.txt", "w", stdout);</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token keyword">int</span> q<span class="token punctuation">;</span>cin <span class="token operator">>></span> q<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> qq <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> qq <span class="token operator">&lt;</span> q<span class="token punctuation">;</span> qq<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>代码（个人）：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> _for(i, a, b) for (int i = (a); i &lt; (b); ++i)</span><span class="token macro property">#<span class="token directive keyword">define</span> _rep(i, a, b) for (int i = (a); i &lt;= (b); ++i)</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">2e5</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> _DEBUG</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"data.in"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"data.out"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>    cin <span class="token operator">>></span> t<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n<span class="token punctuation">;</span>        cin <span class="token operator">>></span> n<span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">_rep</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span> cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> same <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">_rep</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> a<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                same <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>same <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token function">_rep</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token number">2</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token function">_rep</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> st <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> ed <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token function">_rep</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> a<span class="token punctuation">[</span>i <span class="token operator">%</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    st <span class="token operator">=</span> i<span class="token punctuation">,</span> ed <span class="token operator">=</span> i <span class="token operator">%</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                    b<span class="token punctuation">[</span>st<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>ed<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> ed <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> st <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>st <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token number">3</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                <span class="token function">_for</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token number">3</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token number">2</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                <span class="token function">_rep</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>                cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Codeforces-Round-630-Editorial"><a href="#Codeforces-Round-630-Editorial" class="headerlink" title="Codeforces Round #630 Editorial"></a><a href="http://codeforces.com/blog/entry/75432" target="_blank" rel="noopener">Codeforces Round #630 Editorial</a></h2><p>-[✔] A. Exercising Walk</p><p>-[✔] B. Composite Coloring</p><p>-[✔] C. K-Complete Word</p><p>-[]D. Walk on Matrix</p><p>-[]E. Height All the Same</p><p>-[]F. Independent Set</p><p>-[]G. No Monotone Triples</p><h3 id="A-Exercising-Walk"><a href="#A-Exercising-Walk" class="headerlink" title="A. Exercising Walk"></a>A. Exercising Walk</h3><hr><p><strong>考点：implementation</strong></p><p>题意：</p><blockquote><p>爱丽丝有一只可爱的猫，她想锻炼它。共有四种操作：向左a次，向右b次，向上d次，向下c次。现在猫位于（x，y）。给你（x1，y1），（x2，y2）,使得$x1≤u≤x2 \quad and \quad y1≤v≤y2$ （u，v）表示猫当前位于的位置，不超过给定的范围。现在求你判断猫经过(a+b+c+d)次操作，是否最终位于范围内，是输出“Yes”，否则输出“No”。</p></blockquote><p>思路（个人）：</p><blockquote><p>需要考虑各种边际情况，满足以下条件。step1代表x方向需要的<strong>位移</strong>大小，step2代表y方向需要<strong>位移</strong>大小。<br>$$<br>step1 = x - a + b; \qquad step2 = y - c + d; \quad ①\<br>x1 \leq step1 \leq x2 \quad且\quad y1 \leq step2 \leq y2 \qquad②\<br>step1 \ != INF \quad 且 \quad step2 \ != INF \qquad \quad \ \ ③<br>$$</p></blockquote><blockquote><p>Ⅰ.当（x，y）位于（x1，y1） –&gt; (x2，y2)内（不包含边际情况）。Ⅱ. a = b = 0，step1使用①式；c = d = 0，step2使用①式。Ⅲ. 当（x，y）不满足条件Ⅰ，Ⅱ时，step1 = INF，step2 = INF。（实际就是‘No’）<img src="https://raw.githubusercontent.com/SuperYch/picBed/master/img/image-20200401172212110.png" alt="image-20200401172212110"></p></blockquote><blockquote><p>满足②式，③式，输出‘Yes’，否则输出’No’。</p></blockquote><p>代码：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// #define _DEBUG</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> _DEBUG</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"data.in"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"data.out"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>    cin <span class="token operator">>></span> t<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2<span class="token punctuation">;</span>        cin <span class="token operator">>></span> a <span class="token operator">>></span> b <span class="token operator">>></span> c <span class="token operator">>></span> d<span class="token punctuation">;</span>        cin <span class="token operator">>></span> x <span class="token operator">>></span> y <span class="token operator">>></span> x1 <span class="token operator">>></span> y1 <span class="token operator">>></span> x2 <span class="token operator">>></span> y2<span class="token punctuation">;</span>        <span class="token keyword">int</span> step1 <span class="token operator">=</span> INF<span class="token punctuation">,</span> step2 <span class="token operator">=</span> INF<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x1 <span class="token operator">&lt;</span> x <span class="token operator">&amp;&amp;</span> x <span class="token operator">&lt;=</span> x2<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>x1 <span class="token operator">&lt;=</span> x <span class="token operator">&amp;&amp;</span> x <span class="token operator">&lt;</span> x2<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> b <span class="token operator">&amp;&amp;</span> a <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            step1 <span class="token operator">=</span> x <span class="token operator">-</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>y1 <span class="token operator">&lt;</span> y <span class="token operator">&amp;&amp;</span> y <span class="token operator">&lt;=</span> y2<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>y1 <span class="token operator">&lt;=</span> y <span class="token operator">&amp;&amp;</span> y <span class="token operator">&lt;</span> y2<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> d <span class="token operator">&amp;&amp;</span> c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            step2 <span class="token operator">=</span> y <span class="token operator">-</span> c <span class="token operator">+</span> d<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>step1 <span class="token operator">==</span> INF <span class="token operator">||</span> step2 <span class="token operator">==</span> INF<span class="token punctuation">)</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"No"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x1 <span class="token operator">&lt;=</span> step1 <span class="token operator">&amp;&amp;</span> step1 <span class="token operator">&lt;=</span> x2 <span class="token operator">&amp;&amp;</span> y1 <span class="token operator">&lt;=</span> step2 <span class="token operator">&amp;&amp;</span> step2 <span class="token operator">&lt;=</span> y2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Yes"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"No"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>注：此题卡了好久。</p></blockquote><h3 id="B-Composite-Coloring"><a href="#B-Composite-Coloring" class="headerlink" title="B. Composite Coloring"></a>B. Composite Coloring</h3><hr><p><strong>考点： constructive algorithms    greedy    math    number theory</strong></p><p>题意：</p><blockquote><p>有一系列的复合数（可由两个或以上的数乘积得来），现在要你给这些数涂颜色。<strong>唯一约束</strong>：<strong>“不同数字”</strong>需要涂上不同颜色。注：【此题的不同数字：若a，b式不同数字，则gcd(a，b) = 1，反之，gcd &gt; 1的两个数是为同数字。】。题目保证，在复合数$a_i \leq 1000$，使用的颜色不会超过11种。</p></blockquote><p>思路（个人）：</p><blockquote><p>根据题目，使用颜色不会超过11种，我们找到11个素数[2，3，5，7，11，13，17，19，23，29，31]。每个素数代表一种颜色。将所给的$\mbox{复合数} % 素数$,若mod结果为0，则此数归为该颜色。剩下就是处理颜色个数问题，离散一下。可以用set统计一共用了多少种颜色，并进行离散$f_x \rightarrow f_y$</p></blockquote><p>代码（个人）：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1005</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> b<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> vis<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> m<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// freopen("data.in", "r", stdin);</span>    <span class="token comment" spellcheck="true">// freopen("data.out", "w", stdout);</span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>    cin <span class="token operator">>></span> t<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n<span class="token punctuation">;</span>        cin <span class="token operator">>></span> n<span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>vis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>            cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> st<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置vis，防止一个数有多种组合，导致后序更新，将前一种颜色全替换完</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">11</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>vis<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">%</span> m<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    st<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    vis<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> mp<span class="token punctuation">;</span>        <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> x <span class="token operator">:</span> st<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mp<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>cnt<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> st<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> mp<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="C-K-Complete-Word"><a href="#C-K-Complete-Word" class="headerlink" title="C. K-Complete Word"></a>C. K-Complete Word</h3><hr><p><strong>考点：dfs and similar    dsu    greedy    strings</strong></p><p>题意：</p><blockquote><p>有一种单词叫做<em>k-complete</em>，应该满足以以下两个条件①s是回文数；②s是个循环数，每隔k个数，字母相等<br>$$<br>\mbox{s is a palindrome, i.e.} \quad s_i=s_{n+1−i} \ \mbox{ for all}\quad 1≤i≤n;①\<br>\mbox{s has a period of k , i.e.} \quad s_i=s_{k+i}  \ \mbox{ for all}\quad 1≤i≤n−k.②<br>$$<br>现在给你单词s，你可以改变单词的每个字母，问最少操作多少次，使得s满足 k - complete。</p></blockquote><p>思路（个人）：</p><blockquote><p>我们会发现，s种每k（$i_1,i_2,…,i_k; i_{k+1},i_{k+2},…,i_{2k}$）长度的单词应该是一样的，这样才能使得单词s是个循环。且单词又要满足回文，又因为每k个单词一样，那么k长度的单词也应该是回文序。那么就是对k长度的单词进行处理：$max{满足回文+满足循环}$ 。</p></blockquote><p>代码（个人）：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">2e5</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> b<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> s<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// freopen("data.in", "r", stdin);</span>    <span class="token comment" spellcheck="true">// freopen("data.out", "w", stdout);</span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>    cin <span class="token operator">>></span> t<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">;</span>        cin <span class="token operator">>></span> n <span class="token operator">>></span> k<span class="token punctuation">;</span>        cin <span class="token operator">>></span> <span class="token punctuation">(</span>s <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> k<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> alp1<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> alp2<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//循环，回文</span>            <span class="token comment" spellcheck="true">//位于i位置，以i位置起的循环，字母统计个数。</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j <span class="token operator">+</span><span class="token operator">=</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> c <span class="token operator">=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">;</span>                alp1<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//位于i位置，以i位置起的循环，它们对于的回文序位置的字母统计个数</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> k <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j <span class="token operator">+</span><span class="token operator">=</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> c <span class="token operator">=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">;</span>                alp2<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">int</span> ma <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//求得哪个字母的满足回文+循环个数最多</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>alp1<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> alp2<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> ma<span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">//那么该位置且他对于的回文位置都用该字母填充。每k个循环一样。</span>                    ma <span class="token operator">=</span> alp1<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> alp2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//长度为n的word，截成k长，共有n/k个，对于i位置以及该位置对应回文序字母共有2*（n/k)，需要操作数为总数减去不需要改变的字母个数。   </span>            ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">/</span> k<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">-</span> ma<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Educational-Codeforces-Round-84-Rated-for-Div-2"><a href="#Educational-Codeforces-Round-84-Rated-for-Div-2" class="headerlink" title="Educational Codeforces Round 84 (Rated for Div. 2)"></a><a href="http://codeforces.com/contest/1327" target="_blank" rel="noopener">Educational Codeforces Round 84 (Rated for Div. 2)</a></h2><p>-[✔]A. Sum of Odd Integers</p><p>-[✔]B. Princesses and Princes</p><p>-[✔]C. Game with Chips</p><h3 id="A-Sum-of-Odd-Integers"><a href="#A-Sum-of-Odd-Integers" class="headerlink" title="A. Sum of Odd Integers"></a>A. Sum of Odd Integers</h3><hr><p><strong>考点：  math    *1100</strong></p><p>题意：</p><blockquote><p>你有两个整数n和k。你的任务是找出n是否可以表示为k个不同的正奇数(不能被2整除)的和。你必须回答t独立测试用例。</p></blockquote><p>思路：</p><blockquote><p>① n为偶数，k为奇数；② n为奇数，k为偶数；③前k个正奇数和超过n。只要满足以上三点之一，结果都是NO，否则输出YES。</p></blockquote><p>代码(个人)：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// freopen("data.in", "r", stdin);</span>    <span class="token comment" spellcheck="true">// freopen("data.out", "w", stdout);</span>    ll t<span class="token punctuation">;</span>    cin <span class="token operator">>></span> t<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ll n<span class="token punctuation">,</span> k<span class="token punctuation">;</span>        cin <span class="token operator">>></span> n <span class="token operator">>></span> k<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 奇数个奇数和不等于偶数。同理 n&amp;1 ! k&amp;1</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> k <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> k <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"NO"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//等差求和S = na1 + d* n*(n-1)/2</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">*</span> k <span class="token operator">></span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"NO"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"YES"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="B-Princesses-and-Princes"><a href="#B-Princesses-and-Princes" class="headerlink" title="B. Princesses and Princes"></a>B. Princesses and Princes</h3><hr><p><strong>考点：brute force    graphs    greedy    *1300</strong></p><p>题意:</p><blockquote><p>公主找王子。每个公主都有自己心仪的王子。每个公主<strong>依次</strong>选择自己列表里，数最小的王子做丈夫。现在你是国王，你可以劝说一个公主列表增加一位王子。你是否能使最后couple数量增加，若能输出IMPROVE，和公主序号和王子序号。否则，输出OPTIMAL。</p></blockquote><p>思路：</p><blockquote><p>按题意走完分配，若有公主和王子剩下，则进行配对。</p></blockquote><p>代码（个人）：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> d<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// freopen("data.in", "r", stdin);</span>    <span class="token comment" spellcheck="true">// freopen("data.out", "w", stdout);</span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>    cin <span class="token operator">>></span> t<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n<span class="token punctuation">;</span>        cin <span class="token operator">>></span> n<span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> mp<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> m<span class="token punctuation">;</span>            cin <span class="token operator">>></span> m<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> p<span class="token punctuation">;</span>                cin <span class="token operator">>></span> p<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//统计用过的王子</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>mp<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                    mp<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        cin <span class="token operator">>></span> p<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                p <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//无王子剩下</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"OPTIMAL"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"IMPROVE"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> p <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>注：题目太长了，一开始还以为是二分图配对</p></blockquote><h3 id="C-Game-with-Chips"><a href="#C-Game-with-Chips" class="headerlink" title="C. Game with Chips"></a>C. Game with Chips</h3><hr><p><strong>考点：constructive algorithms    implementation    *1600</strong></p><p>题意：</p><blockquote><p>有n * m大的网格，k个芯片位于位置(x，y)。现在给k个每个芯片应该对应的位置$(fx_i,fy_i)$ ,有四种操作，上下左右。（若此次操作超出网格范围，则停在原地，等待下次操作）。问能否在  2 * n * m操作数里，完成每个芯片<strong>到达过</strong>他对应的位置。有求出操作数，并打印操作。无打印-1。</p></blockquote><p>思路：</p><blockquote><p>我们可以将所有芯片都移动到左上脚，那么需要操作$（n+m-2）$。接着从左上—-&gt;右下，走S型。所需操作$n<em>（m-1）+ （n-1）$ ，求和得到 $n+m +nm -3 &lt; 2</em>nm$(证明的话，应该求导判断)</p></blockquote><p>代码（个人）：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> m <span class="token operator">>></span> k<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token operator">*</span> k<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>        cin <span class="token operator">>></span> x <span class="token operator">>></span> y<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> m <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">+</span> n <span class="token operator">*</span> <span class="token punctuation">(</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> n<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">'D'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">'L'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">'R'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">'U'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">'L'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">'U'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>注：题目中，上下左右真奇怪。上下移动的是x，左右移动的是y。做的时候自己画图，只要操作对应清楚，就可以。</p></blockquote><h2 id="Codeforces-Round-631-Div-2-Thanks-Denis-aramis-Shitov"><a href="#Codeforces-Round-631-Div-2-Thanks-Denis-aramis-Shitov" class="headerlink" title="Codeforces Round #631 (Div. 2) - Thanks, Denis aramis Shitov!"></a><a href="http://codeforces.com/contest/1330" target="_blank" rel="noopener">Codeforces Round #631 (Div. 2) - Thanks, Denis aramis Shitov!</a></h2><p>-[✔] A. Dreamoon and Ranking Collection</p><p>-[✔] B. Dreamoon Likes Permutations</p><p>-[✔] C. Dreamoon Likes Coloring</p><h3 id="A-Dreamoon-and-Ranking-Collection"><a href="#A-Dreamoon-and-Ranking-Collection" class="headerlink" title="A. Dreamoon and Ranking Collection"></a>A. Dreamoon and Ranking Collection</h3><hr><p><strong>考点：implementation    *1000</strong></p><p>题意：</p><blockquote><p>第一行包含两个整数n,x$ (1\leq n,x \leq100)。$第二行包含正的非零整数$a_1,a_2,…, a_n (1\leq a_i \leq 100)。$ </p><p>你可以往数组里添加x个数，问你数组里从1起能到达的最大数。（1，2，3….，ans）。</p></blockquote><p>思路：</p><blockquote><p>因为要求1起连续的最大的数，那么对于这个数一定不超过（n+x），所以<code>for(i --&gt; n+x)</code>填充不足的数，x–。<code>if(x==0) break;</code> 。就求出ans</p></blockquote><p>代码（个人）：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// #define _DEBUG</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>    cin <span class="token operator">>></span> t<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n<span class="token punctuation">,</span> x<span class="token punctuation">;</span>        cin <span class="token operator">>></span> n <span class="token operator">>></span> x<span class="token punctuation">;</span>        map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> mp<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> a<span class="token punctuation">;</span>            cin <span class="token operator">>></span> a<span class="token punctuation">;</span>            mp<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token operator">+</span>x<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                x<span class="token operator">--</span><span class="token punctuation">;</span>            ans <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="B-Dreamoon-Likes-Permutations"><a href="#B-Dreamoon-Likes-Permutations" class="headerlink" title="B. Dreamoon Likes Permutations"></a>B. Dreamoon Likes Permutations</h3><hr><p><strong>考点： implementation    *1400</strong></p><p>题意：</p><blockquote><p>Dreamoon具有长度为$l_1和l_2$的两个排列$p_1和p_2$，（p1,p2包含的数为1~l）现在给出一些列a，（由p1和p2拼接成），求l1和l2长度。输出满足情况的l1,l2个数和它们的长度。</p></blockquote><p>思路（个人）：</p><blockquote><p>算出a前缀和，后缀和。判断位于该位置的<br>$$<br>前缀和 == (1+i)<em>i / 2 \quad and \quad 后缀和 ==（n-i+1）</em>(n-i) /2 \<br>且所用数唯一<br>$$</p></blockquote><p>代码（个人）：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">const</span> ll maxn <span class="token operator">=</span> <span class="token number">2e5</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span>ll a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> b<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ios::sync_with_stdio(false);</span>    ll t<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// cin >> t;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ll n<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        ll sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        map<span class="token operator">&lt;</span>ll<span class="token punctuation">,</span> ll<span class="token operator">></span> mp1<span class="token punctuation">,</span> mp2<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>ll i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>ll i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mp1<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//该数若不唯一，则达到下一个p,则前缀和全置为-1，不满足条件</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mp1<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>ll j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>                    b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            sum <span class="token operator">+</span><span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>ll i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mp2<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            sum <span class="token operator">+</span><span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> sum <span class="token operator">-</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mp2<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span>                    c<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        set<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span>ll<span class="token punctuation">,</span> ll<span class="token operator">>></span> st<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>ll i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ll ans1 <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            ll ans2 <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> ans1 <span class="token operator">&amp;&amp;</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> ans2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                st<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> n <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// cout &lt;&lt; st.size() &lt;&lt; endl;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> st<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>st<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> x <span class="token operator">:</span> st<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld %lld\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">.</span>first<span class="token punctuation">,</span> x<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// cout &lt;&lt; x.first &lt;&lt; " " &lt;&lt; x.second &lt;&lt; endl;</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>注：做的时候一定要判断数唯不唯一，就因为只算前缀和，而造成WA了4发。eg：6  1 2 3 5 5 1；答案为0</p></blockquote><h3 id="C-Dreamoon-Likes-Coloring"><a href="#C-Dreamoon-Likes-Coloring" class="headerlink" title="C. Dreamoon Likes Coloring"></a>C. Dreamoon Likes Coloring</h3><hr><p><strong>考点： constructive algorithms    greedy    *1800</strong></p><p>题意：</p><blockquote><p>涂n$(n \leq 100000)$个格子，有m种颜色。$\mbox{每种颜色可涂的长度为}l_i \mbox{且需要在}[1,n-l_i+1] \mbox{选择位置开始涂}$ 。求每种颜色开始涂抹时的位置p，满足每种颜色都使用，且格子都得有颜色。（若所涂范围重叠，那么格子颜色为后涂的。）。若无法满足条件，输出-1.</p></blockquote><p>思路：</p><p><strong>简化一下问题：什么情况时不满足条件</strong></p><ul><li>所有可涂长度加在一起，也无法涂满n个格子</li><li>考虑每一次染色的左端点都比上一次染色向后偏移一位，第i个颜色涂在i位，即$p_i = i$ , 若$n - l_i + 1 &lt; i$ 那么说明这个颜色无法涂抹，因为之前的格子都涂满了颜色。（没有比这种能够把颜色用完的最优方案了，若不满足说明颜色用不完。）</li></ul><p><strong>剩下就是满足条件的，那要怎么填</strong></p><ul><li><p>若每次$p_i = i$ 势必会有涂不满的情况。</p></li><li><p>统计所有颜色最大能够涂满的格子数suff_sum(前缀和）</p></li><li><p>当$suff_sum \geq n时说明p_i = i$ 时可以填满格子</p></li><li><p>当$suff_sum &lt; n时说明p_i = i$ 时填不满格子，此时$p_i = n - suff_sum + 1 $（相当于离填满差了多少，填在此位+suff_sum的长度 == n , 保证了suff_sum正好可以填满n)。</p><blockquote><p>tip: suff_sum是当前能够填充的最大长度，不要想着我不填在 （n - suff_sum + 1）而是在此之前，那么你永远填不到n。还需要注意 sum可能超过int范围。</p></blockquote></li></ul><p>代码：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> int long long</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAXN <span class="token operator">=</span> <span class="token number">2e5</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">int</span> l<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> suff_sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>int32_t <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">>></span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        suff_sum <span class="token operator">+</span><span class="token operator">=</span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> n <span class="token operator">-</span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> cout <span class="token operator">&lt;&lt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>suff_sum <span class="token operator">&lt;</span> n<span class="token punctuation">)</span>        <span class="token keyword">return</span> cout <span class="token operator">&lt;&lt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token function">max</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> n <span class="token operator">-</span> suff_sum <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        suff_sum <span class="token operator">-</span><span class="token operator">=</span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//更新能够填充最大长度</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>tip: 此题只需简化问题，剔除不满足条件的情况，那么其他就好讨论了。/(ㄒoㄒ)/~~</p><p><a href="https://blog.csdn.net/qq_42968686/article/details/105315793?%3E" target="_blank" rel="noopener">参考博客</a>（主要官方英文太长了）</p></blockquote><h2 id="Codeforces-Round-632-Div-2-editorial"><a href="#Codeforces-Round-632-Div-2-editorial" class="headerlink" title="Codeforces Round #632 (Div. 2) editorial"></a><a href="http://codeforces.com/blog/entry/75802" target="_blank" rel="noopener">Codeforces Round #632 (Div. 2) editorial</a></h2><p>-[✔]A. Little Artem</p><p>-[✔]B. Kind Anton</p><p>-[✔]C. Eugene and an array</p><h3 id="A-Little-Artem"><a href="#A-Little-Artem" class="headerlink" title="A. Little Artem"></a>A. Little Artem</h3><hr><p><strong>考点： constructive algorithms    *1000</strong></p><p>题意：</p><blockquote><p>有n*m大的网格，可以往里面涂上黑色和白色。定义B为一个黑色周围有一个及以上相邻的白色的个数，W为一个白色周围有一个及以上相邻的黑色的个数。满足B = W + 1。就是good。求满足good的涂法。打印输出（B代表涂黑，W代表涂白）。</p></blockquote><p>思路：</p><blockquote><p>将白色涂抹在网格任意一个角落（左上，左下，右上，右下）。其他全涂黑。那么 B = 2，W = 1满足条件。</p></blockquote><p>代码：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// #define _DEBUG</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> _DEBUG</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"data.in"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// freopen("data.out", "w", stdout);</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>    cin <span class="token operator">>></span> t<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>        cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> n <span class="token operator">&amp;&amp;</span> j <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>                    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"W"</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"B"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="B-Kind-Anton"><a href="#B-Kind-Anton" class="headerlink" title="B. Kind Anton"></a>B. Kind Anton</h3><hr><p><strong>考点：greedy implementation *1100</strong></p><p>题意：</p><blockquote><p>给你数组a,b。（数组a只包含0，-1，1的个数）现在你可以将$a_i添加到a_j中使得满足a_j = b_j \quad (1 \leq i &lt; j \leq n)$ 。问你是否可以通过多次该操作，使得 $对于所有 a_i = b_i$ （既数组相等）</p></blockquote><p>思路：</p><blockquote><p>我们可以发现$(1 \leq i &lt; j \leq n)$ 那么说明对于当前的位置pos,只受到之前的索引【pos-1,pos-2,…,1】的影响。</p><p>那么我们先统计a中1，-1的个数，接着我们对a从后往前遍历，判断$a_i 与 b_i$的大小，若$a_i &gt; b_i$ 则需要-1，判断此时-1的个数，若个数大于0,则可以使得$a_i == b_i$ ; 若$a_i &lt; b_i$ 则需要-1，判断此时1的个数，若个数大于0,则可以使得$a_i == b_i$ ; (注意算个数时需要先减去自身的数值再判断，避免只剩自身加自身情况，这是不允许的；且从后往前需减去后面可以使用数的个数)</p></blockquote><p>代码：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// #define _DEBUG</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> _DEBUG</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"data.in"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// freopen("data.out", "w", stdout);</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>    cin <span class="token operator">>></span> t<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n<span class="token punctuation">;</span>        cin <span class="token operator">>></span> n<span class="token punctuation">;</span>        map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> mp<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            mp<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>            cin <span class="token operator">>></span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mp<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> need <span class="token operator">=</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>need <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> mp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>need <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> mp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"YES"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"NO"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="C-Eugene-and-an-array"><a href="#C-Eugene-and-an-array" class="headerlink" title="C. Eugene and an array"></a>C. Eugene and an array</h3><hr><p><strong>考点：binary search  data structures  implementation  two pointers  *1700</strong></p><p>题意：</p><blockquote><p>给你n个$(1 \leq n \leq 2 \times 10^5)$ 由$a_i (-10^9 \leq a_i \leq 10^9)$组成的数组a。你可以对数组a进行两种操作：①你可以从数组开头往后删除元素（0个或者多个）；②你可以从数组末尾往前删除元素（0个或者多个）。现在问你得到的子数组b，它的所有子数组c都满足c数组自身和不为0。那么就说b满足题目条件，求满足条件的b给个数。 </p></blockquote><p>思路：</p><blockquote><p><strong>首先我们要知道若两个前缀和相等，那么说明它们之前数的和为0.</strong> </p><p>现在我们遍历数组a，并统计不同前缀和所在的位置，定义一个mx表示从mx位开始到当前位i前缀和不为0。答案$ans += i - mx$ ; $mx = max(mx, ls[sum])$ 表示当前的mx是否在ls[sum]之前，若$mx &lt; ls[sum]$，则 i - mx 会将 前缀和相等之间的子数组算入，则不满足条件，此时需要更行mx的值，又因为$ls[sum] = i+1$ 边界右移所以$mx = 上一次ls[sum]$ 就行了。若$mx &gt; ls[sum]$ 则不需要更新。</p><p><strong>注意：ls[0] = 1 用来规避第一次出现0，且mx = 0的情况</strong>  </p></blockquote><p>代码：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// #define _DEBUG</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> _DEBUG</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"data.in"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// freopen("data.out", "w", stdout);</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    ll n<span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> mx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    map<span class="token operator">&lt;</span>ll<span class="token punctuation">,</span> ll<span class="token operator">></span> ls<span class="token punctuation">;</span>    ls<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ll a<span class="token punctuation">;</span>        cin <span class="token operator">>></span> a<span class="token punctuation">;</span>        sum <span class="token operator">+</span><span class="token operator">=</span> a<span class="token punctuation">;</span>        mx <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>mx<span class="token punctuation">,</span> ls<span class="token punctuation">[</span>sum<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ans <span class="token operator">+</span><span class="token operator">=</span> i <span class="token operator">-</span> mx<span class="token punctuation">;</span>        ls<span class="token punctuation">[</span>sum<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>做的时候边界处理很久。<a href="https://www.cnblogs.com/Tianwell/p/12665218.html" target="_blank" rel="noopener">可以参考一下</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> c/c++ </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python网络爬虫程序技术</title>
      <link href="/2019/10/15/spider/"/>
      <url>/2019/10/15/spider/</url>
      
        <content type="html"><![CDATA[<h3 id="flask网站搭建与访问"><a href="#flask网站搭建与访问" class="headerlink" title="flask网站搭建与访问"></a>flask网站搭建与访问</h3><h4 id="flask-web网络"><a href="#flask-web网络" class="headerlink" title="flask web网络"></a>flask web网络</h4><p><a href="http://docs.jinkan.org/docs/flask/" target="_blank" rel="noopener">flask帮助文档</a></p><p><em>flask简介</em><br><a href="https://www.cnblogs.com/gugubeng/p/9722668.html" target="_blank" rel="noopener">blog</a></p><blockquote><p>Flask是一个基于Python实现的Web开发‘微’框架 ‘MicroFramework’<br>Django是一个重型框架<br>官方文档: <a href="http://flask.pocoo.org/docs/0.12/" target="_blank" rel="noopener">http://flask.pocoo.org/docs/0.12/</a><br>中文文档: <a href="http://docs.jinkan.org/docs/flask/" target="_blank" rel="noopener">http://docs.jinkan.org/docs/flask/</a><br>Flask和Django一样，也是一个基于MVC设计模式的Web框架<br>M:Model   V:View   C:Controller<br>MVVM,MVT</p></blockquote><p><em>Flask依赖三个库</em></p><blockquote><p>Jinja2 模板引擎 { % % } 模板：静态html+模板语言 { %  % } # mardown下{ }要加空格<br>Werkzeug WSGI工具集<br>Itsdangerous 基于Django的签名模块</p></blockquote><p><em>流行的Flask</em></p><blockquote><p>Flask流行的主要原因:<br>1.有非常齐全的官方文档，上手非常方便<br>2.有非常好的扩展机制和第三方扩展环境，工作中常见的软件都会有对应的扩展。自己动手实现扩展也很容易<br>3.社区活跃度非常高<br>4.微型框架的形式给了开发者更大的选择空间</p></blockquote><p>flask实例<br><em>server.py</em></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> flask<span class="token keyword">from</span> datetime <span class="token keyword">import</span> timedeltaapp <span class="token operator">=</span> flask<span class="token punctuation">.</span>Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 初始化一个Flask的对象，参数__name__是程序的名称</span><span class="token comment" spellcheck="true"># 用来解决"已修改静态页面代码，静态页面却没有发生变化"</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SEND_FILE_MAX_AGE_DEFAULT'</span><span class="token punctuation">]</span> <span class="token operator">=</span> timedelta<span class="token punctuation">(</span>seconds<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 调试</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'DEBUG'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"你好"</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/he"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"Hi,你好"</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><hr><h4 id="get方法访问网站"><a href="#get方法访问网站" class="headerlink" title="get方法访问网站"></a>get方法访问网站</h4><p><em>笔记概要</em></p><blockquote><p>创建一个服务端，server.py, 一个客户端，client.py<br>客户端GET方式发送数据<br>服务器获取GET发送的数据<br>客户端接收response,并进行解码</p></blockquote><p><em>知识要点</em></p><blockquote><p><strong><a href="https://www.imooc.com/article/49788" target="_blank" rel="noopener">1,urllib.request.urlopen()函数用于实现对目标url的访问。</a></strong><br>函数原型如下：urllib.request.urlopen(url, data=None, [timeout, ]*, cafile=None, capath=None, cadefault=False, context=None)　<br>url:  需要打开的网址<br>data：Post提交的数据<br>timeout：设置网站的访问超时时间</p></blockquote><blockquote><p><strong>2,urllib.parse.quote(“参数”)</strong><br>如果参数是”中文”，必须使用quote进行编码</p></blockquote><blockquote><p><strong>3,flask.request.args.get(“参数”)来获取参数的值</strong></p></blockquote><blockquote><p><strong>4,先启动服务器，再启动客户端</strong></p></blockquote><p><img src="./1570800515258.png" alt="Alt text"></p><p><img src="./1570800504504.png" alt="Alt text"></p><p><em>server.py</em></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> flask<span class="token keyword">from</span> datetime <span class="token keyword">import</span> timedeltaapp <span class="token operator">=</span> flask<span class="token punctuation">.</span>Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SEND_FILE_MAX_AGE_DEFAULT'</span><span class="token punctuation">]</span> <span class="token operator">=</span> timedelta<span class="token punctuation">(</span>seconds<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'DEBUG'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    实现对客户端请求的响应    """</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># if 防止参数不存在的情况</span>        province <span class="token operator">=</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span>            <span class="token string">"province"</span><span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token string">"province"</span> <span class="token keyword">in</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>args <span class="token keyword">else</span> <span class="token string">""</span>        city <span class="token operator">=</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span>            <span class="token string">"city"</span><span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token string">"city"</span> <span class="token keyword">in</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>args <span class="token keyword">else</span><span class="token string">""</span>        <span class="token keyword">return</span> province <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> city    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">return</span><span class="token punctuation">(</span>str<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><em>client.py</em></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse<span class="token triple-quoted-string string">"""客户端GET方法发送数据"""</span>url <span class="token operator">=</span> <span class="token string">"http://127.0.0.1:5000"</span><span class="token keyword">try</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span><span class="token string">"广东"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 对中文汉字进行编码</span>    c <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span><span class="token string">"深圳"</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> <span class="token string">"province="</span> <span class="token operator">+</span> p <span class="token operator">+</span> <span class="token string">"&amp;city="</span> <span class="token operator">+</span> c    resp <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>url <span class="token operator">+</span> <span class="token string">"?"</span> <span class="token operator">+</span> data<span class="token punctuation">)</span>    html <span class="token operator">=</span> resp<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    html <span class="token operator">=</span> html<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span></code></pre><hr><h4 id="POST方法访问网站"><a href="#POST方法访问网站" class="headerlink" title="POST方法访问网站"></a>POST方法访问网站</h4><p><em>笔记概要</em></p><blockquote><p>创建服务器server.py, 客户端client.py<br>启动服务器，再启动客户端<br>对比get,post方法的区别<br>使用post方法<br>get,post方法混用</p></blockquote><p><em>知识点归纳</em></p><blockquote><p><strong>对于server</strong><br>@app.route(“”, methods = [“GET”])默认GET方法<br>需手动添加POST方法，@app.route(“”, methods = [“POST”,”GET”])</p></blockquote><blockquote><p>flask.request.<code>form</code>.get(参数) – post方法<br>flask.request.<code>args</code>.get(参数) –get方法<br>flask.request.<code>values</code>.get(参数) – post,get方法</p></blockquote><blockquote><p><strong>对于client</strong><br>提交的表单data需要转成二进制 data = data.encode()<br>urllib.parse.quote() 转成十六进制 %% %%</p></blockquote><p><em>server.py</em></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> flask<span class="token keyword">from</span> datetime <span class="token keyword">import</span> timedeltaapp <span class="token operator">=</span> flask<span class="token punctuation">.</span>Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SEND_FILE_MAX_AGE_DEFAULT'</span><span class="token punctuation">]</span> <span class="token operator">=</span> timedelta<span class="token punctuation">(</span>seconds<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># app.config['DEBUG'] = True</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"POST"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    服务器获取POST的数据    """</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 解析过的的表单对象的 MultiDict</span>        p <span class="token operator">=</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span>            <span class="token string">"province"</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token string">"province"</span> <span class="token keyword">in</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form <span class="token keyword">else</span><span class="token string">""</span>        c <span class="token operator">=</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span>            <span class="token string">"city"</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token string">"city"</span> <span class="token keyword">in</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form <span class="token keyword">else</span><span class="token string">""</span>        n <span class="token operator">=</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span>            <span class="token string">"note"</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token string">"note"</span> <span class="token keyword">in</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form <span class="token keyword">else</span><span class="token string">""</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>        <span class="token keyword">return</span> p <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> c <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> n    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">return</span> str<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><em>client.py</em></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse<span class="token triple-quoted-string string">"""客户端发生POST数据"""</span>url <span class="token operator">=</span> <span class="token string">"http://127.0.0.1:5000"</span><span class="token keyword">try</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span><span class="token string">"福建"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 十六进制</span>    c <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span><span class="token string">"福州"</span><span class="token punctuation">)</span>    note <span class="token operator">=</span> <span class="token triple-quoted-string string">"""    福州，别称榕城，简称福、榕，隶属于福建省，位于福建省东部、闽江下游及沿海地区，是福建省省会，福建省的政治、文化、交通中心，    海峡西岸经济区中心城市之一。福州建城于公元前202年，历史上曾长期作为福建的政治中心。是中国东南沿海重要都市、东部战区陆军机关驻地。    福州地貌属典型的河口盆地，盆地四周被群山峻岭所环抱，其海拔多在600~1000米之间。    """</span>    note <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>note<span class="token punctuation">)</span>    data <span class="token operator">=</span> <span class="token string">"province="</span> <span class="token operator">+</span> p <span class="token operator">+</span> <span class="token string">"&amp;city="</span> <span class="token operator">+</span> c <span class="token operator">+</span> <span class="token string">"&amp;note="</span> <span class="token operator">+</span> note    data <span class="token operator">=</span> data<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 二进制</span>    resp <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>    html <span class="token operator">=</span> resp<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 对HTTPResponse类型进行处理</span>    html <span class="token operator">=</span> html<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 解码</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span></code></pre><hr><h4 id="Web下载文件"><a href="#Web下载文件" class="headerlink" title="Web下载文件"></a>Web下载文件</h4><p><em>笔记概要</em></p><blockquote><p>创建服务器server.py, 客户端client.py<br>启动服务器，再启动客户端<br>对比get,post方法的区别<br>使用post方法<br>get,post方法混用</p></blockquote><p><em>知识点归纳</em></p><blockquote><p><strong>对于server</strong><br>@app.route(“”, methods = [“GET”])默认GET方法<br>需手动添加POST方法，@app.route(“”, methods = [“POST”,”GET”])</p></blockquote><blockquote><p>flask.request.<code>form</code>.get(参数) – post方法<br>flask.request.<code>args</code>.get(参数) –get方法<br>flask.request.<code>values</code>.get(参数) – post,get方法</p></blockquote><blockquote><p><strong>对于client</strong><br>提交的表单data需要转成二进制 data = data.encode()<br>urllib.parse.quote() 转成十六进制 %% %%</p></blockquote><p><em>server.py</em></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> flask<span class="token keyword">from</span> datetime <span class="token keyword">import</span> timedeltaapp <span class="token operator">=</span> flask<span class="token punctuation">.</span>Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SEND_FILE_MAX_AGE_DEFAULT'</span><span class="token punctuation">]</span> <span class="token operator">=</span> timedelta<span class="token punctuation">(</span>seconds<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># app.config['DEBUG'] = True</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"POST"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    服务器获取POST的数据    """</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 解析过的的表单对象的 MultiDict</span>        p <span class="token operator">=</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span>            <span class="token string">"province"</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token string">"province"</span> <span class="token keyword">in</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form <span class="token keyword">else</span><span class="token string">""</span>        c <span class="token operator">=</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span>            <span class="token string">"city"</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token string">"city"</span> <span class="token keyword">in</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form <span class="token keyword">else</span><span class="token string">""</span>        n <span class="token operator">=</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span>            <span class="token string">"note"</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token string">"note"</span> <span class="token keyword">in</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form <span class="token keyword">else</span><span class="token string">""</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>        <span class="token keyword">return</span> p <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> c <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> n    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">return</span> str<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><hr><h4 id="实践项目-Web学生管理系统"><a href="#实践项目-Web学生管理系统" class="headerlink" title="实践项目-Web学生管理系统"></a>实践项目-Web学生管理系统</h4><p><em>笔记概要</em></p><ul><li><p>创建服务器（server)和客户端（client)</p></li><li><details> <summary><mark>服务器的作用是建立与维护一个sqllite3的学生数据库students.db中学生记录表students:<mark></mark></mark></summary><blockquote><p>学生的记录包括学号No, 姓名Name, 性别Sex与年龄Age, 服务器的作用是建立与维护一个sqllite的学生数据库students.db中的学生记录表studnet:<br>  <code>create table students  (No varchar(16) primary key, Name varchar(16), Sex varchar(8), Age int)</code><br>   服务器建立一个Web网站， 同时提供<strong>查询学生记录， 增加学生记录，删除学生记录</strong>等接口服务。服务器为了与客户端通讯， 建立了opt参数如表：</p><table><thead><tr><th align="left">opt值</th><th align="right">含义</th></tr></thead><tbody><tr><td align="left">init</td><td align="right">初始化学生列表</td></tr><tr><td align="left">insert</td><td align="right">增加学生</td></tr><tr><td align="left">delete</td><td align="right">删除学生</td></tr><tr><td align="left"></td><td align="right">获取学生记录</td></tr></tbody></table></blockquote><p>  <img src="%22F:%5CHexo%5Csource%5Cspic%5C0.jpg%22" alt="0.jpg"></p></details></li></ul><ul><li><strong>服务端和客户端是互相协商的</strong>, 服务器的数据库更新, 客户端students列表也更新(students里存的是每个学生的信息, 学生的信息是个字典eg:  ‘No’: ‘ ‘, ‘Name’: ‘ ‘, ‘Sex’: ‘ ‘, ‘Age’: ‘int类型 ‘)</li><li>只要服务器不重启(实际上是重新建立新的数据库), 那么即使students列<code>students.clear()</code>，依旧可以通过<code>urllib.request.urlopen(url)</code>访问服务器,<strong>服务器的opt=””,则返回数据库里所以的学生记录</strong></li><li><details> <summary><mark>客户端的作用是向服务端发送请求，传递get数据，post的数据,对服务端的数据库进行访问,进行查询,删除,增加,初始化等操作</mark></summary>  图片上传中</details></li></ul><p><em>知识点归纳</em></p><ul><li>了解sqlite3库的使用</li><li>服务端与客户端的联系</li></ul><p><em>stu_server框架</em></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> flask<span class="token keyword">import</span> sqlite3<span class="token keyword">import</span> jsonapp <span class="token operator">=</span> flask<span class="token punctuation">.</span>Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SEND_FILE_MAX_AGE_DEFAULT'</span><span class="token punctuation">]</span> <span class="token operator">=</span> timedelta<span class="token punctuation">(</span>seconds<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">StudentDB</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">openDB</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">closeDB</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">initTable</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">insertRow</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> No<span class="token punctuation">,</span> Name<span class="token punctuation">,</span> Sex<span class="token punctuation">,</span> Age<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">deleteRow</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> NO<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">selectRows</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"POST"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><em>stu_client框架</em></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> urlib<span class="token punctuation">.</span>request<span class="token keyword">import</span> json<span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> No<span class="token punctuation">,</span> Nane<span class="token punctuation">,</span> Sex<span class="token punctuation">,</span> Age<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>students <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>url <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">def</span> <span class="token function">listStudents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> students    <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">insertStudent</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">deleteRow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">try</span><span class="token punctuation">:</span>    readStudents<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"***学生名单***"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"0.初始化学生表"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"1.查看学生列表"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"2.增加学生记录"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"3.删除学生记录"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"4.退出这个程序"</span><span class="token punctuation">)</span>        s <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请选择(0,1,2,3,4):"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            initialize<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span><span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            listStudents<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span><span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            insertRow<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span><span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            deleteRow<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span><span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">break</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span></code></pre><details>  <summary><mark><font color="darkred">server具体代码</font></mark></summary>  <p> - 建议移到编辑器查看</p>  <pre><code>  <pre><code># Web学生管理程序# 服务器程序import flaskimport sqlite3import jsonfrom datetime import timedeltaapp = flask.Flask(__name__)app.config['SEND_FILE_MAX_AGE_DEFAULT'] = timedelta(seconds=1)class StudentDB:def openDB(self):  # 一个学生类OpenDB 打开一个数据库    self.con = sqlite3.connect("students.db")  # 数据库我们用sqlite3来连接    self.cursor = self.con.cursor()  # 获取学员的数据库的它的操作游标def closeDB(self):  # 然后closeDB是关闭数据库    self.con.commit()    self.con.close()def initTable(self):  # 创建学生表    res = {}    try:        self.cursor.execute(            "create table students(No varchar(16) primary key, Name varchar(16), Sex varchar(8), Age int)")        res["msg"] = "OK"    except Exception as e:        res["msg"] = str(e)    return resdef insertRow(self, No, Name, Sex, Age):  # 插入一张学生表    res = {}    try:        self.cursor.execute(            "insert  into  students(No, Name, Sex, Age) values(?,?,?,?)", (No, Name, Sex, Age))  # 数据库插入学生的记录        res["msg"] = "OK"    except Exception as e:        res["msg"] = str(e)    return resdef deleteRow(self, No):  # 删除一个学生记录    res = {}    try:        self.cursor.execute(            "delete from students where No = ?", (No,))  # 对这个No的学生进行删除        res["msg"] = "OK"    except Exception as e:        res["msg"] = str(e)    return resdef selectRows(self):  # 获取学生的所以信息    res = {}    try:        data = []        self.cursor.execute("select *from students order by No")        rows = self.cursor.fetchall()        for row in rows:            # 每一个学生记录都是一个字典，然后又很多的记录，这个记录做成一个列表，做一个data的列表            d = {}            d["No"] = row[0]            d["Name"] = row[1]            d["Sex"] = row[2]            d["Age"] = row[3]            data.append(d)            # 这个data的列表放在另一个字典当中，在一个res的字典当中        res["msg"] = "OK"        res["data"] = data    except Exception as e:        res["msg"] = str(e)    return res# 服务器这端必须要识别它是进行什么操作@app.route("/", methods=["GET", "POST"])def process():# 所以它首先要获取一个opt的值, 这个opt的值知道客户端要做什么事情opt = flask.request.values.get(    "opt") if "opt" in flask.request.values else ""res = {}db = StudentDB()  # opt值获取以后，那么它就创建这个一个studentDB一个对象dbdb.openDB()  # 这个对象叫db, 我们打开这个数据库if opt == "init":  # 如果 opt等于init, 那我就DB掉initTable, 就是创建这个DB， 这个数据库的表格    res = db.initTable()elif opt == "insert":  # 如果 opt等于insert， 那么这个时候我就获取No, Name, Sex, Age然后    No = flask.request.values.get(        "No") if "No" in flask.request.values else ""    Name = flask.request.values.get(        "Name") if "Name" in flask.request.values else ""    Sex = flask.request.values.get(        "Sex") if "Sex" in flask.request.values else ""    Age = flask.request.values.get(        "Age") if "No" in flask.request.values else ""    # 调用insertRow创建一个学生记录, 把这个学生记录插入到数据库当中    res = db.insertRow(No, Name, Sex, Age)elif opt == "delete":  # 如果opt 等于delete, 那我就获取学生的No, 然后    No = flask.request.values.get(        "No") if "No" in flask.request.values else ""    res = db.deleteRow(No)  # 调用db.deleteRow删除这个学生这条记录else:    res = db.selectRows()  # 不然的话我就selectRows获取学生的所以信息db.closeDB()# 返回给客户端, 数据化的数据调用json.dumps(res), 也就是把这些数据，做出一个json字符串, 把它传递给客户端,# 那么客户端那一端把它反编译过来, 就是反序列化过来, 变成一个对象, 变成一个python一个对象,这样双方就可以通讯return json.dumps(res)if __name__ == '__main__':    app.run()</code></pre><p>  </p></code></pre><p></p></details><details>  <summary><mark><font color="darkred">client具体代码</font></mark></summary>  <p> - 建议移到编辑器查看</p>  <pre><code><pre><code>    # Web学生管理程序    # 客户端程序    import urllib.request    import jsonclass Student:  # 创建一个Student的对象    def __init__(self, No, Name, Sex, Age):  # 有No, Name, Sex, Age四个参数        self.No = No        self.Name = Name        self.Sex = Sex        self.Age = Age    def show(self):  # 打印的方法        print("%-16s%-16s%-8s%-4d" % (self.No, self.Name, self.Sex, self.Age))students = []  # 所以的学生放在一个列表当中url = "http://127.0.0.1:5000"  # http的网址def listStudents():  # 列举所以的学生    global students  # 调用全局变量    print("%-16s%-16s%-8s%-4s" % ("No", "Name", "Sex", "Age"))    for s in students:        s.show()def insertStudent(s):  # 插入一个学生记录    global students    i = 0    # 看学生是否存在,就在students的表格里, 是否已经存在， 如果存在就不插入    while (i &lt; len(students) and s.No &gt; students[i].No):        i = i + 1    if(i &lt; len(students) and s.No == students[i].No):        print(s.No + "already exists")        return False    students.insert(i, s)  # 进行插入    return Truedef deleteRow():    global students    No = input("No=")  # 获取学生的No    if(No != ""):        for i in range(len(students)):            if(students[i].No == No):                st = ""                try:                    st = "No=" + urllib.request.quote(No)                    st = st.encode()                    # opt = delte --get的方式传递过去, 向服务器发送我们这个No的数据 --post方式传递过去                    content = urllib.request.urlopen(url + "?opt=delete", st)                    st = content.readline()                    st = json.loads(st.decode())  # 返回回来是结构化的数据, 是个json数据                    st = st["msg"]                except Exception as e:                    st = str(e)                if(st == "OK"):  # 如果OK, 那就表示已经删除                    del students[i]  # 删除对应列表里的学生数据                    print("删除成功")                else:                    print(st)                breakdef insertRow():    No = input("No=")  # 获取No    Name = input("Name=")  # 获取Name    while True:        Sex = input("Sex=")  # 获取Sex        if(Sex == "男" or Sex == "女"):  # 这个性别的输入是有效的            break        else:            print("Sex is not valid")    Age = input("Age=")  # 获取年龄    if(Age == ""):        Age = 0    else:        Age = int(Age)    if No != "" and Name != "":  # 因为No为主键, 不能为空        s = Student(No, Name, Sex, Age)        for x in students:  # 看这是学生对象是否已经存在列表students中            if(x.No == No):                print(No + "already exists")                return  # 若存在则跳出        st = ""        try:  # 不存在            st = "No=" + urllib.request.quote(No) + "&amp;Name=" + urllib.request.quote(                Name) + "&amp;Sex=" + urllib.request.quote(Sex) + "&amp;Age=" + urllib.request.quote(str(Age))            st = st.encode()            content = urllib.request.urlopen(url + "?opt=insert", st)  # 调用远程协议            st = content.read()            st = json.loads(st.decode())            st = st["msg"]        except Exception as e:            st = str(e)        if(st == "OK"):            #  服务器那端插入成功, 客户端也要插入成功            insertStudent(s)            print("增加成功")        else:            print(st)    else:        print("学号,姓名不能为空")def initialize():  # 初始化    st = ""    try:        content = urllib.request.urlopen(url + "?opt=init")        st = content.read()        st = json.loads(st.decode())        st = st["msg"]    except Exception as e:        st = str(e)    if(st == "OK"):        print("初始成功")    else:        print(st)    return stdef readStudents():  # 客户端与服务端互相协商起来工作的,对于客户端,我们可以把相应的数据给它进行读取    global students    try:        students.clear()        # 只要服务端的数据库没有清空,依旧可以读取到        content = urllib.request.urlopen(url)        data = b""        while True:            buf = content.read(1024)  # 因为读取数据可能有点大, 所以我们分段读, 一次读20个字节出来            if(len(buf) &gt; 0):                data = data + buf            else:                break        data = data.decode()  # 读取的信息储存在data里, 编译成字符串        data = json.loads(data)  # 用json的方法把它反序列化成为一个结构化的数据,结构化的数据就是students列表        if(data["msg"] == "OK"):            data = data["data"]            for d in data:                # each d is a dictionary                # 客户端是用studnets的对象来维护学生记录,我们可以把它转化成一个列表                s = Student(d["No"], d["Name"], d["Sex"], d["Age"])                students.append(s)    except Exception as e:        print(e)try:    readStudents()    while True:        print("")        print("***学生名单***")        print("0.初始化学生表")        print("1.查看学生列表")        print("2.增加学生记录")        print("3.删除学生记录")        print("4.退出这个程序")        s = input("请选择(0,1,2,3,4):")        if(s == "0"):            initialize()        elif(s == "1"):            listStudents()        elif(s == "2"):            insertRow()        elif(s == "3"):            deleteRow()        elif(s == "4"):            breakexcept Exception as e:    print(e)</code></pre><p>  </p></code></pre><p></p></details><hr><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><h4 id="re库的使用"><a href="#re库的使用" class="headerlink" title="re库的使用"></a>re库的使用</h4><p><em>re库主要功能函数</em></p><table><thead><tr><th align="left">函数</th><th align="left">说明</th><th align="left">原型</th></tr></thead><tbody><tr><td align="left">re.search()</td><td align="left">在一个字符串中搜索<strong>匹配正则表达式的第一个位置</strong>，返回match对象</td><td align="left">re.search(pattern,string,flags=0)</td></tr><tr><td align="left">re.match()</td><td align="left">从一个字符串的<strong>开始位置</strong>起匹配正则表达式,<strong>返回match对象</strong></td><td align="left">re.match(pattern,string,flags=0)</td></tr><tr><td align="left">re.findall()</td><td align="left">搜索字符串,以<strong>列表类型</strong>返回全部能匹配的子串</td><td align="left">re.findall(pattern,string,flags=0)</td></tr><tr><td align="left">re.split()</td><td align="left">将一个字符串按照正则表达式匹配结果进行分割,<strong>返回列表类型</strong></td><td align="left">re.split(pattern,string,maxsplit=0,flags=0)</td></tr><tr><td align="left">re.finditer()</td><td align="left">搜索字符串,返回一个匹配结果的迭代类型,每个迭代元素是<strong>match对象</strong></td><td align="left">re.finditer(pattern,string,flags=0)</td></tr><tr><td align="left">re.sub</td><td align="left">在一个字符串中替换所有匹配正则表达式的子串,返回替换后的<strong>字符串</strong></td><td align="left">re.sub(pattern,repl,string,count=0,flags=0)</td></tr></tbody></table><blockquote><p><code>pattern</code>:正则表达式的字符串或原生字符串表示<br><code>string</code>:待匹配字符串<br><code>flags</code>:正则表达式使用时的控制标记<br><code>maxsplit</code>:最大分割数,剩余部分作为最后一个元素输出<br><code>repl</code>:替换匹配字符串的字符串<br><code>count</code>:匹配的最大替换次数</p></blockquote><ul><li>flags:正则表达式使用时的控制标记</li></ul><blockquote><table><thead><tr><th align="left">常用标记</th><th align="left">说明</th><th align="left">原型</th></tr></thead><tbody><tr><td align="left">re.I</td><td align="left">忽略正则表达式的大小写,[A-Z]能够匹配小写字符</td><td align="left">re.IGNORECASE</td></tr><tr><td align="left">re.M</td><td align="left">正则表达式中的^操作符能够将给定字符串的每行当作匹配开始</td><td align="left">re.MULTILINE</td></tr><tr><td align="left">re.S</td><td align="left">正则表达式中的.操作符能够匹配所有字符,默认匹配除换行外的所有字符</td><td align="left">re.DOTALL</td></tr></tbody></table></blockquote><ul><li>maxsplit:最大分割数,剩余部分作为最后一个元素输出<blockquote><p>example:<br><code>re.split(r'[1-9]\d{5}','BIT10081 TSU10084',maxsplit = 1)</code><br><code>&gt;&gt;&gt;['BIT', ’TSU10084‘]</code><br><code>re.split(r'[1-9]\d{5}','BIT10081 TSU10084')</code><br><code>&gt;&gt;&gt;['BIT', 'TSU','']</code></p></blockquote></li></ul><p><em>re库的另一种等价用法</em></p><blockquote><p><code>&gt;&gt;&gt;rst = re.search(r'[1-9]\d{5}','BIT 100081')</code>函数式用法:一次性操作</p></blockquote><blockquote><p><code>&gt;&gt;&gt;regex = re.compile(r'[1-9]\d{5}')</code>面向对象用法:编译后的多次操作<br><code>&gt;&gt;&gt;rst = regex.search('BIT 100081')</code></p></blockquote><table><thead><tr><th align="left">函数</th><th align="left">说明</th><th align="left">原型</th></tr></thead><tbody><tr><td align="left">regex.search()</td><td align="left">在一个字符串中搜索<strong>匹配正则表达式的第一个位置</strong>，<strong>返回match对象</strong></td><td align="left">regex.search(string,flags=0)</td></tr><tr><td align="left">regex.match()</td><td align="left">从一个字符串的<strong>开始位置</strong>起匹配正则表达式,<strong>返回match对象</strong></td><td align="left">regex.match(string,flags=0)</td></tr><tr><td align="left">regex.findall()</td><td align="left">搜索字符串,以<strong>列表类型</strong>返回全部能匹配的子串</td><td align="left">regex.findall(string,flags=0)</td></tr><tr><td align="left">regex.split()</td><td align="left">将一个字符串按照正则表达式匹配结果进行分割,<strong>返回列表类</strong>型</td><td align="left">regex.split(string,maxsplit=0,flags=0)</td></tr><tr><td align="left">regex.finditer()</td><td align="left">搜索字符串,返回一个匹配结果的迭代类型,<strong>每个迭代元素是match对象</strong></td><td align="left">regex.finditer(string,flags=0)</td></tr><tr><td align="left">regex.sub</td><td align="left">在一个字符串中替换所有匹配正则表达式的子串,返回替换后的<strong>字符串</strong></td><td align="left">regex.sub(repl,string,count=0,flags=0)</td></tr></tbody></table><p><em>总结</em></p><blockquote><p>re.方法名 = (regex = re.compile()+regex.方法名)</p></blockquote><hr><h4 id="python正则表达式"><a href="#python正则表达式" class="headerlink" title="python正则表达式"></a>python正则表达式</h4><h5 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h5><blockquote><p>正则表达式是用来匹配与查找字符串的,从网上爬取数据自然或多或少会用到正则表达式。Python的正则表达式要先引入re模块,正则表达式以r引导,例如:</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> rereg <span class="token operator">=</span> r<span class="token string">"\d+"</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token string">"abc123cd"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span></code></pre><blockquote><p>其中<code>r"\d"+</code>正则表达式表示匹配连续的多个数值,search是re中的函数,从”abc123cd”字符串中搜索连续的数值,得到”123”,返回一个匹配对象,因此程序结果如下:<br><code>&lt;sre.SRE_Match.object; span = (3,6), match='123'&gt;</code><br>从结果看出,在指定的字符串中找到了连续的数值,得到”123”,span(3,6)表示开始的位置是3,结束的位置是6,这正好是”123”在”abc123cd”中的位置。</p></blockquote><p><em>知识点归纳</em></p><blockquote><p>re库的使用<br>常用的正则表达式<br>r””,保留字符串的原始形式<br>re库遵循贪婪匹配,匹配最长字符串,若在正则表达式中+’?’则是最小匹配数<br>span()遵循前闭后开</p></blockquote><p><em>正则表达式常用操作符</em></p><table><thead><tr><th align="center">操作符</th><th align="left">说明</th><th align="left">实例</th></tr></thead><tbody><tr><td align="center">.</td><td align="left">表示任何单个字符</td><td align="left"></td></tr><tr><td align="center">[ ]</td><td align="left">字符集，对单个字符给出取值范围</td><td align="left">[abc]表示a,b,c,[a-z]表示a到z单个字符</td></tr><tr><td align="center">[^ ]</td><td align="left">非字符集，对单个字符给出排除范围</td><td align="left">[^abc]表示非a或b或c的单个字符</td></tr><tr><td align="center">*</td><td align="left">前一个字符0次或无限次扩展</td><td align="left">abc*表示ab,abc,abcc,abccc等</td></tr><tr><td align="center">+</td><td align="left">前一个字符1次或无限次扩展</td><td align="left">abc+表示abc,abcc,abcc等</td></tr><tr><td align="center">?</td><td align="left">前一个字符0次或者1次扩展</td><td align="left">abc?表示ab,abc</td></tr><tr><td align="center">|</td><td align="left">左右表达式任意一个</td><td align="left">abc|def表示abc或def</td></tr><tr><td align="center">{ m }</td><td align="left">扩展前一个字符m次</td><td align="left">ab{2}c表示abbc</td></tr><tr><td align="center">{ m,n }</td><td align="left">扩展前一个字符m至n次(含n)</td><td align="left">ab{1,2}表示abc,abbc</td></tr><tr><td align="center">^</td><td align="left">匹配字符串开头</td><td align="left">^abc表示abc且在一个字符串的开头</td></tr><tr><td align="center">$</td><td align="left">匹配字符串结尾</td><td align="left">abc$表示abc且在一个字符串的结尾</td></tr><tr><td align="center">( )</td><td align="left">分组标记,内部只能使用|操作符</td><td align="left">(abc)表示abc,(abc|def)表示abc或def</td></tr><tr><td align="center">\d</td><td align="left">数字,等价于[0-9]</td><td align="left"></td></tr><tr><td align="center">\w</td><td align="left">单词字符,等价于[A-Za-z0-9_]</td><td align="left"></td></tr></tbody></table><hr><p><em>笔记概要</em><br>    </p><details><br>        <summary><strong>1.字符”\d”匹配0-9之间的一个数值</strong></summary><br>        <pre><br>            <code><br>                    import re<br>                    reg = r"\d"<br>                    m = re.search(reg, "abc123cd")<br>                    print(m)<br>            </code><br>                    结果找到第一个数值”1”<br>                    <code>&lt;sre.SRE_Match object; span = (3, 4), match = '1'&gt;</code><br>        </pre><br>    </details><br>    <details><br>        <summary><strong>2.字符”+”重复前一个匹配字符<code>一次或多次</code></strong></summary><br>        <pre><br>            <code><br>                import re<br>                reg = r"b\d+"<br>                m = re.search(reg, "a12b123c")<br>                print(m)<br>            </code><br>            结果找到了”b123”<br>            <code>&lt;sre.SRE_Match object; span = (3, 7), match = 'b123'&gt;</code><br>            注意:r”b\d+”第一个字符匹配”b”,后面是连续的多个数字,因此是”b123”,不是”a12”,(如果多个b呢)<br>        </pre><br>    </details><br>    <details><br>        <summary><strong>3.字符”*“重复前一个匹配字符<code>零次或多次</code></strong></summary><br>        <pre><br>            "*"与"+"类似,但有区别,例如:<br>            <code><br>                import re<br>                reg = r"ab+"<br>                m = re.search(reg, "acabc")<br>                print(m)<br>                reg = r"ab*"<br>                m = re.search(reg, "acabc")<br>                print(m)<br>            </code><br>            结果:<br>            <code>&lt;sre.SRE_Match object; span = (2, 4), match = 'ab'&gt;</code><br>            <code>&lt;sre.SRE_Match object; span = (0, 1), match = 'a'&gt;</code><br>        </pre><br>    </details><br>    <details><br>        <summary><strong>4.字符”?”重复前一个匹配字符<code>零次或一次</code></strong></summary><br>        <pre><br>            <code><br>                import re<br>                reg = r"ab?"<br>                m = re.search(reg, "abbcabc")<br>                print(m)<br>            </code><br>            结果:<br>            <code>&lt;sre.SRE_Match object; span = (0, 2), match = 'ab'&gt;</code><br>            匹配结果是”ab”,其中b重复一次<br>        </pre><br>    </details><br>    <details><br>        <summary><strong>5.字符”.”代表任何一个字符,但是没有特别声明时<code>不代表字符"\n"</code></strong></summary><br>        <pre><br>            <code><br>                import re<br>                s = "xaxby"<br>                m = re.search(r"a.b", s)<br>                print(m)<br>            </code><br>            结果”.”代表了字符”x”<br>            <code>&lt;sre.SRE_Match object; span = (1, 4), match = 'axb'&gt;</code><br>        </pre><br>    </details><br>    <details><br>        <summary><strong>6.字符”|”代表把左右分成两个部分</strong></summary><br>        <pre><br>            <code><br>                import re<br>                s = "xaabababy"<br>                m = re.search(r"ab|ba", s)<br>                print(m)<br>            </code><br>            结果匹配”ab”或者”ba”的可以:<br>            <code>&lt;sre.SRE_Match object; span = (2,4), match = 'ab'&gt;</code><br>        </pre><br>    </details><br>    <details><br>        <summary><strong>7.特殊字符使用反斜线”"引导,例如”\r”, “\n”, “\t”, “\\“分别表示回车,换行,制表符号与反斜线主键本身</strong></summary><br>        <pre><br>            <code><br>                import re<br>                reg = r"a\nb"<br>                m = re.search(reg, "ca\nbcabc")<br>                print(m)<br>            </code><br>            结果匹配”a\n\b”:<br>            <code>&lt;sre.SRE_Match object; span = (1, 4), match = 'a\nb'&gt;</code><br>        </pre><br>    </details><br>    <details><br>        <summary><strong>8.字符”\b”表示单词的结尾,单词的结尾包括各种空白字符或者字符串结尾</strong></summary><br>        <pre><br>            <code><br>                import re<br>                reg = r"car\b"<br>                m = re.search(reg, "The car is black")<br>                print(m)<br>            </code><br>            结果匹配”car”,因为”car”后面是一个空格:<br>            <code>&lt;sre.SRE_Match object; span = (4, 7), match = 'car'&gt;</code><br>        </pre><br>    </details><br>    <details><br>        <summary><strong>9,”[]”中字符是任选择一个,如果字符是ASCII码中连续的一组,那么可以使用”.”符号连接,例如<br>        [0-9]表示0-9其中一个数字,[A-Z]的其中一个大写字符,[0-9A-Z]表示0-9的其中一个数字或者是A-Z的其中一个大写字符</strong></summary><br>        <pre><br>            <code><br>                import re<br>                reg = r"x[0-9]y"<br>                m = re.search(reg, "xyx2y")<br>                print(m)<br>            </code><br>            结果匹配”x2y”:<br>            <code>&lt;sre.SRE_Match object; span = (2, 5), match = 'x2y'&gt;</code><br>        </pre><br>    </details><br>    <details><br>        <summary><strong>10,”^”出现在[]的第一个字符位置,就代表取反,例如[^ab0-9]表示不是a,b,也不是0-9的数字</strong></summary><br>        <pre><br>            <code><br>                import re<br>                reg = r"x[^ab0-9]y"<br>                m = re.search(reg, "xayx2yxcy")<br>                print(m)<br>            </code><br>            结果匹配”xcy”:<br>            <code>&lt;sre.SRE_Match object; span = (6, 9), match = 'xcy'&gt;</code><br>        </pre><br>    </details><br>    <details><br>        <summary><strong>11,”\s”匹配任何空白字符,等价”[\r\n\x20\t\f\v]”</strong></summary><br>        <pre><br>            <code><br>                import re<br>                s = "1a ba\tbxy"<br>                m = re.search(r"a\sb", s)<br>                print(m)<br>            </code><br>            结果匹配”a b”:<br>            <code>&lt;sre.SRE_Match object; span = (1, 4), match = 'a b'&gt;</code><br>        </pre><br>    </details><br>    <details><br>        <summary><strong>12,”\w”匹配包括下划线内的单词字符,等价”[a-zA-Z0-9_]”</strong></summary><br>        <pre><br>            <code><br>                import re<br>                reg = r"\w+"<br>                m = re.search(reg, "Python is easy")<br>                print(m)<br>            </code><br>            结果匹配”Python”:<br>            <code>&lt;sre.SRE_Match object; span = (0, 6), match = 'Python'&gt;</code><br>        </pre><br>    </details><br>    <details><br>        <summary><strong>13,”^”匹配字符串的开头位置</strong></summary><br>        <pre><br>            <code><br>                import re<br>                reg = r"^ab"<br>                m = re.search(reg, "cabcab")<br>                print(m)<br>            </code><br>            结果:None<br>            没有匹配到任何字符,因为”cabcab”中虽然有”ab”,但不是”ab”开头<br>    </pre></details><br>    <details><br>        <summary><strong>14,”$”字符匹配字符串的结尾位置</strong></summary><br>        <pre><br>            <code><br>                import re<br>                reg = r"ab$"<br>                m = re.search(reg, "abcab")<br>                print(m)<br>            </code><br>            匹配结果是最后一个”ab”,而不是第一个”ab”:<br>            <code>&lt;sre.SRE_Match object; span = (3, 5), match = 'ab'&gt;</code><br>        </pre><br>    </details><br>    <details><br>        <summary><strong>15,使用括号(…)可以把(…)看成一个整体,经常与”+”,”*”,”?”的连续使用,对(…)部分进行重复</strong></summary><br>        <pre><br>            <code><br>                import re<br>                reg = r"(ab)+"<br>                m = re.search(reg, "ababcab")<br>                print(m)<br>            </code><br>            结果匹配”abab”,”+”对ab进行了重复:<br>            <code>&lt;sre.SRE_Match object; span = (0, 4), match = 'abab'&gt;</code><br>        </pre><br>    </details><p></p><p><em>练习</em></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> res <span class="token operator">=</span> <span class="token string">"I am testing search function"</span>reg <span class="token operator">=</span> r<span class="token string">"[A-Za-z]+\b"</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>reg<span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token keyword">while</span> m <span class="token operator">!=</span> None<span class="token punctuation">:</span>    start <span class="token operator">=</span> m<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    end <span class="token operator">=</span> m<span class="token punctuation">.</span>end<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>start<span class="token punctuation">:</span>end<span class="token punctuation">]</span><span class="token punctuation">)</span>    s <span class="token operator">=</span> s<span class="token punctuation">[</span>end<span class="token punctuation">:</span><span class="token punctuation">]</span>    m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>reg<span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""Iamtestingsearchfunction程序开始匹配到一个单词后m.start(),m.end()就是单词的起始位置,s[start:end]为截取的单词,之后程序再次匹配字符串s=s[end:],即字符串的后半段,一直匹配完毕为止就找出每个单词"""</span></code></pre><h4 id="实践项目-爬取学生信息"><a href="#实践项目-爬取学生信息" class="headerlink" title="实践项目-爬取学生信息"></a>实践项目-爬取学生信息</h4><p><em>实践要求</em></p><ul><li>设计一个Web服务器server.py,它读取students.txt文件中的学生数据,以表格的形式呈现在网页上,其中students.txt的格式如下:<blockquote><p>No,Name,Gender,Age<br>1001,张零山,男,20<br>1002,张一山,男,20<br>1003,张二山,男,20<br>1004,张三山,男,20<br>第一行是学生表格的标题,有学号No,姓名Name,性别Gender,年龄Age,每个学生占一行,各个数据之间用逗号隔开</p></blockquote></li><li>设计一个客户端的爬虫程序,它从这个网页上爬取学生的这些信息,存储到数据库中.学生数据库可以使用sqlite数据库students.db</li></ul><p><em>服务器程序</em></p><blockquote><p>服务器程序首先读取同一个目录下的students.txt文件,然后组成一张<code>&lt;table&gt;</code><br>的html表格用于网页的形式呈现,效果如图:<br>学生信息表</p></blockquote><blockquote><table><thead><tr><th align="center">No</th><th align="center">Name</th><th align="center">Gender</th><th align="center">Age</th></tr></thead><tbody><tr><td align="center">1001</td><td align="center">张零山</td><td align="center">男</td><td align="center">20</td></tr><tr><td align="center">1002</td><td align="center">张一山</td><td align="center">男</td><td align="center">20</td></tr><tr><td align="center">1003</td><td align="center">张二山</td><td align="center">男</td><td align="center">20</td></tr><tr><td align="center">1004</td><td align="center">张三山</td><td align="center">男</td><td align="center">20</td></tr></tbody></table></blockquote><blockquote><p>程序先检查students.txt文件是否存在,如果存在就打开读取,读出的一行的数据是用逗号分开的,<br>因此使用split(“,”)函数拆分开,然后把一行组织在…的行中,把每个数据组织在…的单元格中,程序如下：</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 爬取学生信息</span><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token keyword">import</span> os<span class="token keyword">from</span> datetime <span class="token keyword">import</span> timedeltaapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SEND_FILE_MAX_AGE_DEFAULT'</span><span class="token punctuation">]</span> <span class="token operator">=</span> timedelta<span class="token punctuation">(</span>seconds<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"students.txt"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        st <span class="token operator">=</span> <span class="token string">"&lt;h3>学生信息表&lt;h3>"</span>        st <span class="token operator">=</span> st <span class="token operator">+</span> <span class="token string">"&lt;table border = '1' width = '300'>"</span>        fobj <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"students.txt"</span><span class="token punctuation">,</span> <span class="token string">"rt"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 读取一行,去掉行尾部"\n"换行符号</span>            s <span class="token operator">=</span> fobj<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 如果读到文件末尾部就退出</span>            <span class="token keyword">if</span> s <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>            s <span class="token operator">=</span> s<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span>            st <span class="token operator">=</span> st <span class="token operator">+</span> <span class="token string">"&lt;tr>"</span>            <span class="token comment" spellcheck="true"># 把各个数据组织在&lt;td>...&lt;/td>的单元中</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                st <span class="token operator">=</span> st <span class="token operator">+</span> <span class="token string">"&lt;td>"</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"&lt;/td>"</span>            <span class="token comment" spellcheck="true"># 完成一行</span>            st <span class="token operator">=</span> st <span class="token operator">+</span> <span class="token string">"&lt;/tr>"</span>        fobj<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        st <span class="token operator">=</span> st <span class="token operator">+</span> <span class="token string">"&lt;/table>"</span>        <span class="token keyword">return</span> st<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><em>客户端程序</em></p><blockquote><p>客户端程序访问””网址,从中下载其html页面,这个网页的结果如下:<br>程序先分解html中<code>&lt;tr&gt;...&lt;/tr&gt;</code>标签<br>接着在分解<code>&lt;tr&gt;&lt;/tr&gt;</code>标签中的每个这样就得到所需的数据了</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 爬取学生学习客户端</span><span class="token keyword">import</span> re<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">import</span> sqlite3<span class="token keyword">def</span> <span class="token function">searchWeb</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">:</span>    rows <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 查询第一个&lt;tr>...&lt;/tr></span>    m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"&lt;tr>"</span><span class="token punctuation">,</span> html<span class="token punctuation">)</span>    n <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"&lt;/tr>"</span><span class="token punctuation">,</span> html<span class="token punctuation">)</span>    <span class="token keyword">if</span> m <span class="token operator">!=</span> None <span class="token operator">and</span> n <span class="token operator">!=</span> None<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 跳过第一行的标题</span>        html <span class="token operator">=</span> html<span class="token punctuation">[</span>n<span class="token punctuation">.</span>end<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 查询第二行开始的数据部分</span>    m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"&lt;tr>"</span><span class="token punctuation">,</span> html<span class="token punctuation">)</span>    n <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"&lt;/tr>"</span><span class="token punctuation">,</span> html<span class="token punctuation">)</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>m <span class="token operator">!=</span> None <span class="token operator">and</span> n <span class="token operator">!=</span> None<span class="token punctuation">)</span><span class="token punctuation">:</span>        row <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># start是&lt;tr>的结束部分</span>        start <span class="token operator">=</span> m<span class="token punctuation">.</span>end<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># end是&lt;/tr>的起始部分</span>        end <span class="token operator">=</span> n<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># t 是&lt;tr>...&lt;/tr>包含得到字符串</span>        t <span class="token operator">=</span> html<span class="token punctuation">[</span>start<span class="token punctuation">:</span>end<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># html[n.end():]是剩余的html</span>        html <span class="token operator">=</span> html<span class="token punctuation">[</span>n<span class="token punctuation">.</span>end<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 查询第一组&lt;td>...&lt;/td>的数据</span>        a <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"&lt;td>"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>        b <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"&lt;/td>"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>        i <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>a <span class="token operator">!=</span> None <span class="token operator">and</span> n <span class="token operator">!=</span> None<span class="token punctuation">)</span><span class="token punctuation">:</span>            start <span class="token operator">=</span> a<span class="token punctuation">.</span>end<span class="token punctuation">(</span><span class="token punctuation">)</span>            end <span class="token operator">=</span> b<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 找到一组&lt;td>...&lt;/td>的数据</span>            row<span class="token punctuation">.</span>append<span class="token punctuation">(</span>t<span class="token punctuation">[</span>start<span class="token punctuation">:</span>end<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># t[b.end():]是本行剩余的部分</span>            t <span class="token operator">=</span> t<span class="token punctuation">[</span>b<span class="token punctuation">.</span>end<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span>            a <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"&lt;td>"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>            b <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"&lt;/td>"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 增加一行数据</span>        rows<span class="token punctuation">.</span>append<span class="token punctuation">(</span>row<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 继续查找下一行&lt;tr>...&lt;/tr></span>        m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"&lt;tr>"</span><span class="token punctuation">,</span> html<span class="token punctuation">)</span>        n <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"&lt;/tr>"</span><span class="token punctuation">,</span> html<span class="token punctuation">)</span>    <span class="token keyword">return</span> rows<span class="token keyword">def</span> <span class="token function">saveDB</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>rows<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        con <span class="token operator">=</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">"students.db"</span><span class="token punctuation">)</span>        cursor <span class="token operator">=</span> con<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"drop table students"</span><span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">pass</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            sql <span class="token operator">=</span> <span class="token string">"create table students (No varchar(128) primary key, Name varchar(128), Gender varchar(128), Age int)"</span>            cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">pass</span>        <span class="token keyword">for</span> row <span class="token keyword">in</span> rows<span class="token punctuation">:</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>row<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                sql <span class="token operator">=</span> <span class="token string">"insert into students(No,Name,Gender,Age) values(?,?,?,?)"</span>                <span class="token keyword">try</span><span class="token punctuation">:</span>                    No <span class="token operator">=</span> row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                    Name <span class="token operator">=</span> row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>                    Gender <span class="token operator">=</span> row<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>                    Age <span class="token operator">=</span> int<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                    cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token punctuation">(</span>No<span class="token punctuation">,</span> Name<span class="token punctuation">,</span> Gender<span class="token punctuation">,</span> Age<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 数据库提交保存</span>        con<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>        con<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">showWeb</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Showing data from Web..."</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> rows<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">showDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Showing data from DB:"</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        con <span class="token operator">=</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">"students.db"</span><span class="token punctuation">)</span>        cursor <span class="token operator">=</span> con<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>        cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"select* from students"</span><span class="token punctuation">)</span>        rows <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> row <span class="token keyword">in</span> rows<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span>        con<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">"http://127.0.0.1:5000/"</span>    resp <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    data <span class="token operator">=</span> resp<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    html <span class="token operator">=</span> data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>    rows <span class="token operator">=</span> searchWeb<span class="token punctuation">(</span>html<span class="token punctuation">)</span>    showWeb<span class="token punctuation">(</span>rows<span class="token punctuation">)</span>    saveDB<span class="token punctuation">(</span>rows<span class="token punctuation">)</span>    showDB<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span></code></pre><p><strong>注意</strong></p><ul><li><code>s = fobj.readline().strip("\n")</code>中的<code>strip</code>不能用<code>sqlit("\n")</code></li><li><code>import urllib.request</code></li><li><code>&lt;tr&gt;...&lt;/tr&gt;</code>与<code>&lt;td&gt;...&lt;/td&gt;</code>不要搞混了</li><li><a href="https://blog.csdn.net/sinat_35886587/article/details/80561959" target="_blank" rel="noopener">sqlit3</a></li><li>相关细节见代码</li><li>心情不好,细节后续会继续补充</li></ul><hr><h3 id="BeautifulSoup"><a href="#BeautifulSoup" class="headerlink" title="BeautifulSoup"></a>BeautifulSoup</h3><h4 id="BeautifulSoup的使用"><a href="#BeautifulSoup的使用" class="headerlink" title="BeautifulSoup的使用"></a><a href="https://www.cnblogs.com/youxin/p/3190433.html" target="_blank" rel="noopener">BeautifulSoup的使用</a></h4><p><a href="https://blog.csdn.net/lu8000/article/details/82313054" target="_blank" rel="noopener">参考博客</a></p><ul><li><p>安装</p><blockquote><p>打开cmd运行<code>pip install bs4</code></p></blockquote></li><li><p>使用</p><blockquote><p><code>from bs4 import BeautifulSoup</code><br>soup = BeautifulSoup(文件,解析方法)</p></blockquote></li></ul><p><em>code</em></p><pre class=" language-python"><code class="language-python">    <span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup    fobj <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"index.html"</span><span class="token punctuation">,</span> <span class="token string">'rb+'</span><span class="token punctuation">)</span>    html <span class="token operator">=</span> fobj<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    fobj<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print(html)</span>    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>prettify<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><em>index.html</em></p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>The Dormouse's story<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>            The Dormouse's story        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>story<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        Once upon a time there were three little sisters; and their names were        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://example.com/elsie<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sister<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>link1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Elsie<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>,        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://example.com/elsie<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sister<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>link2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Lacie<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>and        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://example.com/elsie<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sister<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>link3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Tillie<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>;        and they lived at the bottom og a well.    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>story<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><ul><li>基本方法的使用见参考博客</li><li>BeautifulSoup获取元素的属性值</li><li>BeautifulSoup获取元素包含的文本值</li><li>BeautifulSoup高级查找见下一章</li></ul><hr><h4 id="BeautifulSoup的高级使用"><a href="#BeautifulSoup的高级使用" class="headerlink" title="BeautifulSoup的高级使用"></a>BeautifulSoup的高级使用</h4><p><em>引入</em></p><blockquote><p>一般的find或者find_all都能满足我们的需求，如果还不能那么可以设计一个查找函数来进行查找</p></blockquote><p><em>要求</em></p><blockquote><p>查找文档中的<code>"http://example.com/lacie"</code>的节点元素<code>&lt;a&gt;</code></p></blockquote><p><em>常用方法</em></p><blockquote><p><code>find_all()</code>函数的原型如下:<br>1.<code>find_all(self, name = None, attrs = {}, recursive = True, text = None, limit = None, **kwargs)</code><br>2.<code>self</code>表明它是一个类成员函数;<br>3.<code>name</code>是要查找的tag元素名称,默认是None,如果不提供,就是查找所以元素;<br>4.<code>attrs</code>是元素的属性,它是一个字典,默认是空,如果提供就是查找有这个指定属性的元素(<br>在name = None时,只要所以的标签满足attrs,就能打印出来)<br>5.<code>recursive</code>指定查找是否在元素节点的子树下面全范围进行,默认是True;<br>6.后面的<code>text,limit,kwargs</code>参数比较复杂,将在后面介绍<br>7.find_all函数返回查找到的所以指定元素的列表,每个元素是一个bs4.element.Tag对象<br>8.find_all是查找所以满足要求的元素节点,如果我们只查找一个元素节点,那么可以使用find函数</p><p><code>find</code>函数原型如下:<br>1.<code>find(self,name = None, attrs = {}, recursive = True, text = None, limit = None, **kwargs)</code><br>2.使用方法与find_all类似，不同的是它只返回第一个满足要求的节点,不是一个列表</p></blockquote><p><em>实例</em></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoupdoc <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;html>&lt;head>&lt;title>The Dormouse's story&lt;/title>&lt;/head>&lt;body>&lt;p class="title">&lt;b>The Dormouse's story&lt;/b>&lt;/p>    &lt;p class="story">        Once upon a time there were three little sisters; and their names were        &lt;a href="http://example.com/elsie" class="sister" id="link1">Elsie&lt;/a>,        &lt;a href="http://example.com/lacie" class="sister" id="link2">Lacie&lt;/a>and        &lt;a href="http://example.com/tillie" class="sister" id="link3">Tillie&lt;/a>;        and they lived at the bottom og a well.    &lt;/p>    &lt;p class="story">...&lt;/p>&lt;/body>&lt;/html>"""</span><span class="token keyword">def</span> <span class="token function">myFilter</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>tag<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>tag<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string">'a'</span> <span class="token operator">and</span> tag<span class="token punctuation">.</span>has_attr<span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">)</span> <span class="token operator">and</span> tag<span class="token punctuation">[</span><span class="token string">"href"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"http://example.com/lacie"</span><span class="token punctuation">)</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>doc<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span>tag <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>myFilter<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span></code></pre><p><em>结果</em></p><blockquote><p>html<br>head<br>title<br>body<br>p<br>b<br>p<br>a<br>a<br>a<br>p<br><code>[&lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;]</code></p></blockquote><p><em>说明</em></p><blockquote><p>在程序中我们定义一个筛选函数myFilter(tag),它的参数是tag对象,在调用soup.find_all(myFilter)时程序会把每一个tag元素传递给myFilter函数,由该函数决定这个tag的取舍,如果myFilter返回True就保留这个tag到结果集中,不然就丢掉这个tag。因此程序执行时可以看到上述的结果等一个个tag经过myFilter的筛选,只有节点<code>[&lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;]</code>满足要求<br>因此结果为:<br><code>[&lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;]</code><br>其中:<br>tag.name是tag的名称;<br>tag.has_attr(attName)判断tag是否有attName属性:<br>tag[attName]是tag的attName属性值;</p></blockquote><p><em>注意</em></p><blockquote><p>return (tag.name == ‘p’ and tag[“class”] ==<code>"story"</code>) –无返回值<br> return (tag.name == ‘p’ and tag[“class”] ==<code>["story"]</code>) –有返回值<br>tag[“class”],它的词一定是个列表,但只有一个元素时,也需要使用列表</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token string">""</span><span class="token string">""</span><span class="token string">""</span><span class="token keyword">def</span> <span class="token function">myFilter</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>tag<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>tag<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string">'p'</span> <span class="token operator">and</span> tag<span class="token punctuation">[</span><span class="token string">"class"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token string">"story"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>doc<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span>tag <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>myFilter<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span></code></pre><p><em>结果</em></p><pre class=" language-html"><code class="language-html">[<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>story<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        Once upon a time there were three little sisters; and their names were        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sister<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://example.com/elsie<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>link1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Elsie<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>,        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sister<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://example.com/lacie<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>link2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Lacie<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>and        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sister<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://example.com/tillie<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>link3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Tillie<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>;        and they lived at the bottom og a well.    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>, <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>story<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>]</code></pre><hr><h4 id="BeautifulSoup遍历文档元素"><a href="#BeautifulSoup遍历文档元素" class="headerlink" title="BeautifulSoup遍历文档元素"></a>BeautifulSoup遍历文档元素</h4><table><thead><tr><th align="left">方法</th><th align="left">作用</th><th align="left">注意</th></tr></thead><tbody><tr><td align="left">.parent</td><td align="left">获取元素节点的父节点</td><td align="left"><code>&lt;html&gt;</code>的父节点是名称为[document]的节点，这个节点的父节点是None</td></tr><tr><td align="left">.children</td><td align="left">获取元素节点的直接子元素节点</td><td align="left">包括element,text等类型的节点，迭代获取</td></tr><tr><td align="left">.desendants</td><td align="left">获取元素节点的所有子孙元素节点</td><td align="left">迭代获取</td></tr><tr><td align="left">.next_sibling</td><td align="left">获取元素节点的兄弟节点</td><td align="left">获取下一个兄弟节点,包括element,text等类型的节点</td></tr><tr><td align="left">.previous_sibling</td><td align="left">获取元素节点的兄弟节点</td><td align="left">获取上一个兄弟节点,包括element,text等类型节点</td></tr></tbody></table><hr><h4 id="BeautifulSoup使用CSS语法查找元素"><a href="#BeautifulSoup使用CSS语法查找元素" class="headerlink" title="BeautifulSoup使用CSS语法查找元素"></a>BeautifulSoup使用CSS语法查找元素</h4><p><em>方法</em></p><blockquote><p>tag.select(css)<br>其中tag是一个bs4.element.Tag对象，即HTML中的一个element节点元素,select是它的查找方法，css是类似css语法的一个字符串，一般结构如下：<br>[tagName][attName[=value]]<br>其中[…]部分是可选的；<br>tagName是元素名称，如果没有指定就是所有元素；<br>attName=value是属性名称，value是它对应的值，可以不指定属性，在指定了属性后也可以不指定值；<br>tag.select(css)返回一个bs4.element.Tag的列表，哪怕只有一个元素也是一个列表；</p></blockquote><ul><li><p>查找元素节点</p><blockquote><table><thead><tr><th align="left">函数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">soup.select(“a”)</td><td align="left">查找文档中<strong>所有</strong><code>&lt;a&gt;</code>元素节点</td></tr><tr><td align="left">soup.select(“p a”)</td><td align="left">查找文档中<strong>所有</strong><code>&lt;p&gt;</code>节点下的<code>&lt;a&gt;</code>元素节点</td></tr><tr><td align="left">soup.select(“p [class=’story’] a”)</td><td align="left">查找文档中<strong>所有属性</strong><code>class='story'</code>的<code>&lt;p&gt;</code>节点下的<strong>所有</strong><code>&lt;a&gt;</code>元素节点</td></tr><tr><td align="left">soup.select(“p [class] a”)</td><td align="left">查找文档中<strong>所有具有</strong><code>class</code>属性的<code>&lt;p&gt;</code>节点下的<strong>所有</strong><code>&lt;a&gt;</code>元素节点</td></tr><tr><td align="left">soup.select(“a[id = ‘link1’]”)</td><td align="left">查找属性为<code>id = "link1"</code>的<code>&lt;a&gt;</code>节点</td></tr><tr><td align="left">soup.select(“body head title”)</td><td align="left">查找<code>&lt;body&gt;</code>下面<code>&lt;head&gt;</code>下面的<code>&lt;title&gt;</code>节点</td></tr><tr><td align="left">soup.select(“body [class] “)</td><td align="left">查找<code>&lt;body&gt;</code>下面<strong>所有</strong>具有<code>class</code>属性的节点</td></tr><tr><td align="left">soup.select(“body [class] a”)</td><td align="left">查找<code>&lt;body&gt;</code>下面<strong>所有</strong>具有<code>class</code>属性的节点下面的<code>&lt;a&gt;</code>节点</td></tr></tbody></table></blockquote></li></ul><blockquote><p><em>注意</em> :<strong>写[=value]是value里空格数不同可能导致结果搜索不到，例如：</strong><br><strong>class=”story  xxx”(1个空格)与class=”story  xxx”(两个空格)是不同的，看你所查找的文档树里所包含的空格数 <code>&lt;div class = "story  xxx"&gt;&lt;/div&gt;</code></strong></p></blockquote><ul><li><p>属性语法规则</p><blockquote><p>在CSS结构中[attName=value]中表示attrName与value相等，也可以指定不等，包含等运算关系，具体运算如下表</p></blockquote><blockquote><table><thead><tr><th align="left">选择器</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">[attName]</td><td align="left">用于选取带有指定属性的元素</td></tr><tr><td align="left">[attName=value]</td><td align="left">用于选取带有指定属性和值的元素</td></tr><tr><td align="left">[attName^=value]</td><td align="left">匹配属性值以指定值开头的每个元素</td></tr><tr><td align="left">[attName$=value]</td><td align="left">匹配属性值以指定值结尾的每个元素</td></tr><tr><td align="left">[attName*=value]</td><td align="left">匹配属性值中包含指定值的每个元素</td></tr></tbody></table></blockquote></li><li><p>查找</p></li></ul><table><thead><tr><th align="left">举例</th><th align="left">描述</th><th align="center">注意</th></tr></thead><tbody><tr><td align="left">select(“div p”)</td><td align="left">查找<code>&lt;div&gt;</code>节点下面的所有子孙<code>&lt;p&gt;</code>节点</td><td align="center">节点元素之间用空格分开</td></tr><tr><td align="left">select(“div &gt; p”)</td><td align="left">查找<code>&lt;div&gt;</code>节点下面的所有直接节点<code>&lt;p&gt;</code>，不包含孙节点</td><td align="center">节点元素之间用<code>&gt;</code>分开，注意<code>&gt;</code>前后至少包含一个空格</td></tr><tr><td align="left">select(“div ~ p”)</td><td align="left">查找<code>&lt;div&gt;</code>后面的所有同级别的<code>&lt;p&gt;</code>兄弟节点</td><td align="center">节点元素之间用<code>~</code>分开，注意<code>~</code>前后至少包含一个空格</td></tr><tr><td align="left">select(“div + p”)</td><td align="left">查找<code>&lt;div&gt;</code>前面<strong>第一个</strong>同级别的<code>&lt;p&gt;</code>兄弟节点</td><td align="center">节点元素之间用<code>+</code>分开，注意<code>+</code>前后至少包含一个空格</td></tr></tbody></table><hr><h4 id="实践项目–爬取中国天气网"><a href="#实践项目–爬取中国天气网" class="headerlink" title="实践项目–爬取中国天气网"></a>实践项目–爬取中国天气网</h4><p><em>实践要求</em></p><blockquote><p>爬取所查找城市的近7天的天气状况，并创建weather.db储存(city, date, weather, temp)</p></blockquote><p><em>实践准备</em></p><blockquote><p>网址url = “<a href="http://www.weather.com.cn/”" target="_blank" rel="noopener">http://www.weather.com.cn/”</a><br><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc.zh/" target="_blank" rel="noopener">BeautifulSoup中文文档</a><br><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/#unicode-dammit" target="_blank" rel="noopener">UnicodeDammit文档</a><br><a href="https://stackoverflow.com/questions/436220/determine-the-encoding-of-text-in-python" target="_blank" rel="noopener">UnicodeDammit编码说明</a></p></blockquote><p><em>html界面解析</em></p><blockquote><p>打开网站，选择一个城市，比如福州会发现url = “<a href="http://www.weather.com.cn/weather/101230101.shtml&quot;" target="_blank" rel="noopener">http://www.weather.com.cn/weather/101230101.shtml"</a><br>选择近7天，找到今天，右击检查<br>7天内的信息都存在标签<code>&lt;ul class='t clearfix'&gt;&lt;/ur&gt;</code>里<br>每天的信息都存在标签<code>&lt;li&gt;&lt;&lt;/li&gt;</code>里<br>日期存在标签<code>&lt;h1&gt;&lt;/h1&gt;</code><br>天气存在标签<code>&lt;p class = "wea"&gt;&lt;/p&gt;</code>里<br>温度存在标签<code>&lt;p class = "tem"&gt;&lt;/p&gt;</code>里<br>在<code>&lt;p class = "tem"&gt;&lt;/p&gt;</code>下还有两个子标签<code>&lt;span&gt;&lt;/span&gt;</code>和<code>&lt;i&gt;&lt;/i&gt;</code></p></blockquote><p><em>注意事项</em></p><blockquote><p><strong>1.(其中今天的温度只有)<code>&lt;i&gt;&lt;/i&gt;</code>标签</strong><br><strong>2.标签一定不要写错</strong>(今天只有标签<code>&lt;i&gt;&lt;/i&gt;</code>)<br><strong>3.运用BeautifulSoup查询css文档树,运用select时一定要注意空格的问题,例如：</strong><br><strong><code>soup.select(p[class="tem" span])</code>父节点与attr之间没有空格，而与子孙节点之间有空格</strong><br><strong>4.<code>__init__</code>不要写错了</strong>,(就写错成了<code>__int__</code>)</p></blockquote><p><em>代码实现中遇到的问题</em></p><blockquote><p>1.AttributeError: ‘WeatherForecast’ object has no attribute ‘cityCode’(由于<code>__init__</code>写错了)<br>2.运行时list index out of range,列表越界或者为空(由于select(css)时,里面的空格问题 <code>p [class] i</code>,p与class之间多打了空格)</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> UnicodeDammit<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">import</span> sqlite3<span class="token keyword">class</span> <span class="token class-name">WeatherDB</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">openDB</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>con <span class="token operator">=</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">"weather.db"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>cursor <span class="token operator">=</span> self<span class="token punctuation">.</span>con<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>                "create table weathers <span class="token punctuation">(</span>wCity varchar<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span> wDate varchar<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\                wWeather varchar<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span> wTemp varchar<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span> constraint pk_weather primary key<span class="token punctuation">(</span>wCity<span class="token punctuation">,</span>wDate<span class="token punctuation">)</span><span class="token punctuation">)</span>"<span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"delete from weathers"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">closeDB</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>con<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>con<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">insert</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> city<span class="token punctuation">,</span> date<span class="token punctuation">,</span> weather<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>                <span class="token string">"insert into weathers(wCity,wDate,wWeather,wTemp) values(?,?,?,?)"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>city<span class="token punctuation">,</span> date<span class="token punctuation">,</span> weather<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"select*from weathers"</span><span class="token punctuation">)</span>        rows <span class="token operator">=</span> self<span class="token punctuation">.</span>cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>        tplt1 <span class="token operator">=</span> <span class="token string">"{:16}\t{:20}\t{:32}\t{:20}"</span>        tplt2 <span class="token operator">=</span> <span class="token string">"{:16}\t{:16}\t{:32}\t{:16}"</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>tplt1<span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"城市"</span><span class="token punctuation">,</span> <span class="token string">"日期"</span><span class="token punctuation">,</span> <span class="token string">"天气"</span><span class="token punctuation">,</span> <span class="token string">"温度"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> row <span class="token keyword">in</span> rows<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>tplt2<span class="token punctuation">.</span>format<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">WeatherForecast</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true"># 伪装成浏览器访问网站</span>            <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36"</span><span class="token punctuation">}</span>            <span class="token comment" spellcheck="true"># 默认只能查找这四个城市,后期可能更改根据城市名找到对应码,形成新的url，来获取数据</span>        self<span class="token punctuation">.</span>cityCode <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"北京"</span><span class="token punctuation">:</span> <span class="token string">"101010100"</span><span class="token punctuation">,</span> <span class="token string">"上海"</span><span class="token punctuation">:</span> <span class="token string">"101020100"</span><span class="token punctuation">,</span>                         <span class="token string">"广州"</span><span class="token punctuation">:</span> <span class="token string">"101280101"</span><span class="token punctuation">,</span> <span class="token string">"深圳"</span><span class="token punctuation">:</span> <span class="token string">"101280601"</span><span class="token punctuation">}</span>    <span class="token keyword">def</span> <span class="token function">forecastCity</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> city<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 访问城市是否在默认字典里</span>        <span class="token keyword">if</span> city <span class="token operator">not</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>cityCode<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>city <span class="token operator">+</span> <span class="token string">"code cannot be found"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>        url <span class="token operator">=</span> <span class="token string">"http://www.weather.com.cn/weather/"</span> <span class="token operator">+</span> \            self<span class="token punctuation">.</span>cityCode<span class="token punctuation">[</span>city<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">".shtml"</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            req <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>self<span class="token punctuation">.</span>headers<span class="token punctuation">)</span>            data <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span>            data <span class="token operator">=</span> data<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 判断编码类型</span>            dammit <span class="token operator">=</span> UnicodeDammit<span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"utf-8"</span><span class="token punctuation">,</span> <span class="token string">"gbk"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            data <span class="token operator">=</span> dammit<span class="token punctuation">.</span>unicode_markup            soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">"lxml"</span><span class="token punctuation">)</span>            lis <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">"ul[class='t clearfix'] li"</span><span class="token punctuation">)</span>            n <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment" spellcheck="true"># 判断是否当天</span>            <span class="token keyword">for</span> li <span class="token keyword">in</span> lis<span class="token punctuation">:</span>                <span class="token keyword">try</span><span class="token punctuation">:</span>                    date <span class="token operator">=</span> li<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'h1'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text                    weather <span class="token operator">=</span> li<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'p[class="wea"]'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text                    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                        temp <span class="token operator">=</span> li<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'p[class="tem"] span'</span><span class="token punctuation">)</span><span class="token punctuation">[</span>                            <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> li<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'p[class="tem"] i'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        temp <span class="token operator">=</span> li<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'p[class="tem"] i'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text                    n <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">1</span>                    self<span class="token punctuation">.</span>db<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>city<span class="token punctuation">,</span> date<span class="token punctuation">,</span> weather<span class="token punctuation">,</span> temp<span class="token punctuation">)</span>                <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">process</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cities<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>db <span class="token operator">=</span> WeatherDB<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>db<span class="token punctuation">.</span>openDB<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> city <span class="token keyword">in</span> cities<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>forecastCity<span class="token punctuation">(</span>city<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>db<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>db<span class="token punctuation">.</span>closeDB<span class="token punctuation">(</span><span class="token punctuation">)</span>ws <span class="token operator">=</span> WeatherForecast<span class="token punctuation">(</span><span class="token punctuation">)</span>ws<span class="token punctuation">.</span>process<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"北京"</span><span class="token punctuation">,</span> <span class="token string">"上海"</span><span class="token punctuation">,</span> <span class="token string">"广州"</span><span class="token punctuation">,</span> <span class="token string">"深圳"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"completed"</span><span class="token punctuation">)</span></code></pre><hr><p>@(spider)</p><h3 id="网络树爬取路径"><a href="#网络树爬取路径" class="headerlink" title="网络树爬取路径"></a>网络树爬取路径</h3><p><em>引入</em></p><blockquote><p>一个网站往往由很多相互关联的网页组成，每个网页上都有可能包含我们所关心的数据，那么我们怎么样获取这些数据呢？显然我们必须穿梭于各个网页之间，那么按什么样的规则穿梭呢？常用的有深度优先和广度优先方法。为了说明这两种方法的工作过程，我们特意设计一个简单的网站</p></blockquote><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><ul><li>设计好books.html, program.html, database.html,network.html,mysql.html,java.html,python.html等网页文件以utf-8的编码存储在文件夹，各个文件内容如下代码</li><li>搭建好用Flask设计一个server.py的Web程序来呈现它们</li><li>创建客户端client，分别用递归，dfs ，bfs方法实现路径的爬取</li></ul><p><em>代码</em></p><p><em>server</em></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> flask<span class="token keyword">import</span> os<span class="token keyword">from</span> datetime <span class="token keyword">import</span> timedeltaapp <span class="token operator">=</span> flask<span class="token punctuation">.</span>Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SEND_FILE_MAX_AGE_DEFAULT'</span><span class="token punctuation">]</span> <span class="token operator">=</span> timedelta<span class="token punctuation">(</span>seconds<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">getFile</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> b<span class="token string">""</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">:</span>        fobj <span class="token operator">=</span> open<span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span>        data <span class="token operator">=</span> fobj<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        fobj<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> data@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> getFile<span class="token punctuation">(</span><span class="token string">"books.html"</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/&lt;section>"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">process</span><span class="token punctuation">(</span>section<span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">if</span> section <span class="token operator">!=</span> <span class="token string">""</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> getFile<span class="token punctuation">(</span>section<span class="token punctuation">)</span>    <span class="token keyword">return</span> data<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li>books.html<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>计算机<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>database.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>数据库<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>program.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>程序设计<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>network.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>计算机网络<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre></li><li>database.html<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>数据库<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mysql.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>MySQL数据库<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre></li><li>program.html<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>程序设计<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>python.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Python程序设计<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Java程序设计<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre></li><li>network.html<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>计算机网络<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span></code></pre></li><li>mysql.hhtml<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>MySQL数据库<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span></code></pre></li><li>python.html<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>Python程序设计<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span></code></pre></li><li>java.html<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>Java程序设计<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span></code></pre></li></ul><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><p><em>code</em></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">def</span> <span class="token function">spider</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        resp <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        data <span class="token operator">=</span> resp<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>        soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">"lxml"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">"h3"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span>        links <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> link <span class="token keyword">in</span> links<span class="token punctuation">:</span>            url <span class="token operator">=</span> start_url <span class="token operator">+</span> link<span class="token punctuation">[</span><span class="token string">"href"</span><span class="token punctuation">]</span>            spider<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    start_url <span class="token operator">=</span> <span class="token string">"http://127.0.0.1:5000/"</span>    spider<span class="token punctuation">(</span>start_url<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"The End"</span><span class="token punctuation">)</span></code></pre><h4 id="广度优先搜索（bfs"><a href="#广度优先搜索（bfs" class="headerlink" title="广度优先搜索（bfs)"></a>广度优先搜索（bfs)</h4><p><em>code</em></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">class</span> <span class="token class-name">Queue</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>Q <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">fetch</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>Q<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">enter</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>Q<span class="token punctuation">.</span>append<span class="token punctuation">(</span>obj<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">empty</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>Q<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token keyword">def</span> <span class="token function">bfs_spider</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    queue <span class="token operator">=</span> Queue<span class="token punctuation">(</span><span class="token punctuation">)</span>    queue<span class="token punctuation">.</span>enter<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token operator">not</span> queue<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        url <span class="token operator">=</span> queue<span class="token punctuation">.</span>fetch<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            resp <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>url<span class="token punctuation">)</span>            data <span class="token operator">=</span> resp<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>            soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">"lxml"</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">"h3"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span>            links <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> link <span class="token keyword">in</span> links<span class="token punctuation">:</span>                url <span class="token operator">=</span> start_url <span class="token operator">+</span> link<span class="token punctuation">[</span><span class="token string">"href"</span><span class="token punctuation">]</span>                queue<span class="token punctuation">.</span>enter<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>start_url <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    start_url <span class="token operator">=</span> <span class="token string">"http://127.0.0.1:5000/"</span>    bfs_spider<span class="token punctuation">(</span>start_url<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"The End"</span><span class="token punctuation">)</span></code></pre><h4 id="深度优先搜索（dfs）"><a href="#深度优先搜索（dfs）" class="headerlink" title="深度优先搜索（dfs）"></a>深度优先搜索（dfs）</h4><p><em>code</em></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">class</span> <span class="token class-name">Stack</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>st <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">pop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>st<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取最后一个元素</span>    <span class="token keyword">def</span> <span class="token function">push</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>st<span class="token punctuation">.</span>append<span class="token punctuation">(</span>obj<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">empty</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>st<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token keyword">def</span> <span class="token function">dfs_spider</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    stack <span class="token operator">=</span> Stack<span class="token punctuation">(</span><span class="token punctuation">)</span>    stack<span class="token punctuation">.</span>push<span class="token punctuation">(</span>start_url<span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token operator">not</span> stack<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        url <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            resp <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>url<span class="token punctuation">)</span>            data <span class="token operator">=</span> resp<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>            soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">"lxml"</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">"h3"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span>            links <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> link <span class="token keyword">in</span> links<span class="token punctuation">:</span>                url <span class="token operator">=</span> start_url <span class="token operator">+</span> link<span class="token punctuation">[</span><span class="token string">"href"</span><span class="token punctuation">]</span>                stack<span class="token punctuation">.</span>push<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    start_url <span class="token operator">=</span> <span class="token string">"http://127.0.0.1:5000/"</span>    dfs_spider<span class="token punctuation">(</span>start_url<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"The End"</span><span class="token punctuation">)</span></code></pre><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>（待更新）</p><hr><h3 id="网站图爬取路径"><a href="#网站图爬取路径" class="headerlink" title="网站图爬取路径"></a>网站图爬取路径</h3><p><em>引入</em></p><blockquote><p>网站的各个网页之间的关系未必是树的结构，它们可能形成一个复杂的图的结构，如果在前面的网页都加一条<code>&lt;a href = "books.html"&gt;Home&lt;/a&gt;</code>，让每个网页都能回到主界面，那么网站的关系就是一个有回路的图</p></blockquote><h4 id="准备-1"><a href="#准备-1" class="headerlink" title="准备"></a>准备</h4><ul><li>设计好books.html, program.html, database.html,network.html,mysql.html,java.html,python.html等网页文件以utf-8的编码存储在文件夹，且除了books.html不需要设置回溯，其他语句都设置了能够回到主菜单的语句<code>&lt;a href="books.html"&gt;&lt;/a&gt;</code></li><li>搭建好用Flask设计一个server.py的Web程序来呈现它们，相关内容见上一章</li><li>创建客户端client，分别用递归，dfs ，bfs方法实现路径的爬取</li><li>在客户端的spider里设置url的列表，用来排除已访问的链接，避免数据重复爬取</li></ul><p><em>代码</em></p><p><em>server</em></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> flask<span class="token keyword">import</span> os<span class="token keyword">from</span> datetime <span class="token keyword">import</span> timedeltaapp <span class="token operator">=</span> flask<span class="token punctuation">.</span>Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SEND_FILE_MAX_AGE_DEFAULT'</span><span class="token punctuation">]</span> <span class="token operator">=</span> timedelta<span class="token punctuation">(</span>seconds<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">getFile</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> b<span class="token string">""</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">:</span>        fobj <span class="token operator">=</span> open<span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span>        data <span class="token operator">=</span> fobj<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        fobj<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> data@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true"># 主界面</span>    <span class="token keyword">return</span> getFile<span class="token punctuation">(</span><span class="token string">"books.html"</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/&lt;section>"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取各个网页</span><span class="token keyword">def</span> <span class="token function">process</span><span class="token punctuation">(</span>section<span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">if</span> section <span class="token operator">!=</span> <span class="token string">""</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> getFile<span class="token punctuation">(</span>section<span class="token punctuation">)</span>    <span class="token keyword">return</span> data<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li>books.html<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>计算机<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>database.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>数据库<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>program.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>程序设计<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>network.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>计算机网络<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre></li><li>database.html<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>数据库<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mysql.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>MySQL数据库<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>books.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre></li><li>program.html<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>程序设计<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>python.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Python程序设计<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Java程序设计<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>books.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre></li><li>network.html<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>计算机网络<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>books.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre></li><li>mysql.hhtml<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>MySQL数据库<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>books.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre></li><li>python.html<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>Python程序设计<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>books.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre></li><li>java.html<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>Java程序设计<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>books.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre></li></ul><h4 id="深度优先搜索"><a href="#深度优先搜索" class="headerlink" title="深度优先搜索"></a>深度优先搜索</h4><p><em>code</em></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">class</span> <span class="token class-name">Stack</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>st <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">pop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>st<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">push</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>st<span class="token punctuation">.</span>append<span class="token punctuation">(</span>obj<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">empty</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>st<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token keyword">def</span> <span class="token function">spider</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    stack <span class="token operator">=</span> Stack<span class="token punctuation">(</span><span class="token punctuation">)</span>    stack<span class="token punctuation">.</span>push<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token operator">not</span> stack<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            url <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> url <span class="token operator">not</span> <span class="token keyword">in</span> urls<span class="token punctuation">:</span>                urls<span class="token punctuation">.</span>append<span class="token punctuation">(</span>url<span class="token punctuation">)</span>                <span class="token keyword">try</span><span class="token punctuation">:</span>                    resp <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>url<span class="token punctuation">)</span>                    data <span class="token operator">=</span> resp<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>                    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">"lxml"</span><span class="token punctuation">)</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">"h3"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span>                    links <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span>                    <span class="token keyword">for</span> link <span class="token keyword">in</span> links<span class="token punctuation">:</span>                        url <span class="token operator">=</span> start_url <span class="token operator">+</span> link<span class="token punctuation">[</span><span class="token string">"href"</span><span class="token punctuation">]</span>                        stack<span class="token punctuation">.</span>push<span class="token punctuation">(</span>url<span class="token punctuation">)</span>                <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>start_url <span class="token operator">=</span> <span class="token string">"http://127.0.0.1:5000/"</span>spider<span class="token punctuation">(</span>start_url<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"The End"</span><span class="token punctuation">)</span></code></pre><h4 id="广度优先搜索"><a href="#广度优先搜索" class="headerlink" title="广度优先搜索"></a>广度优先搜索</h4><p><em>code</em></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">class</span> <span class="token class-name">Queue</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>qe <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">fetch</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>qe<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">enter</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>qe<span class="token punctuation">.</span>append<span class="token punctuation">(</span>obj<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">empty</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>qe<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token keyword">def</span> <span class="token function">spider</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    queue <span class="token operator">=</span> Queue<span class="token punctuation">(</span><span class="token punctuation">)</span>    queue<span class="token punctuation">.</span>enter<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token operator">not</span> queue<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            url <span class="token operator">=</span> queue<span class="token punctuation">.</span>fetch<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> url <span class="token operator">not</span> <span class="token keyword">in</span> urls<span class="token punctuation">:</span>                <span class="token keyword">try</span><span class="token punctuation">:</span>                    urls<span class="token punctuation">.</span>append<span class="token punctuation">(</span>url<span class="token punctuation">)</span>                    resp <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>url<span class="token punctuation">)</span>                    data <span class="token operator">=</span> resp<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>                    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">"lxml"</span><span class="token punctuation">)</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">"h3"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span>                    links <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span>                    <span class="token keyword">for</span> link <span class="token keyword">in</span> links<span class="token punctuation">:</span>                        url <span class="token operator">=</span> start_url <span class="token operator">+</span> link<span class="token punctuation">[</span><span class="token string">"href"</span><span class="token punctuation">]</span>                        queue<span class="token punctuation">.</span>enter<span class="token punctuation">(</span>url<span class="token punctuation">)</span>                <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>start_url <span class="token operator">=</span> <span class="token string">"http://127.0.0.1:5000/"</span>spider<span class="token punctuation">(</span>start_url<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"The End"</span><span class="token punctuation">)</span></code></pre><h4 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h4><blockquote><p>list index out of range可以查看html页面是否缺少标题<code>&lt;h3&gt;&lt;/h3&gt;</code><br>html与htm写链接后缀别写错了</p></blockquote><hr><h3 id="python实现多线程"><a href="#python实现多线程" class="headerlink" title="python实现多线程"></a>python实现多线程</h3><p><em>线程类似于同时执行多个不同程序，多线程运行有如下的优点</em></p><ul><li>使用线程可以把占据长时间的程序中的任务放到后台去处理</li><li>程序的运行速度可能加快</li><li>在一些等待的任务实现上如用户输入，文件读写和网络收发数据等，线程就比较有用了。在这种情况下我们可以释放一些珍贵的资源如内存占用等等</li></ul><h4 id="python的前后台线程"><a href="#python的前后台线程" class="headerlink" title="python的前后台线程"></a>python的前后台线程</h4><blockquote><p>在Python中要启动一个线程，可以使用threading包中的Thread建立一个对象，这个Thread类的基本原型是：<br><code>t = Thread(target, args = None)</code>&gt;其中target是要执行的线程函数，args是一个元组或者列表为target的函数提供参数，然后调用t.start()就开始线程</p></blockquote><ul><li><code>r.setDaemon(False)</code><blockquote><p>设置线程r为<strong>后台线程</strong>，后台线程<strong>不因主线程结束而结束</strong></p></blockquote></li><li><code>r.setDaemon(True)</code><blockquote><p>设置线程r为<strong>前台线程</strong>，后台线程因<strong>主线程结束而结束</strong></p></blockquote></li></ul><p><em>code</em></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">import</span> time<span class="token keyword">import</span> random<span class="token keyword">def</span> <span class="token function">reading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"reading"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>reading<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 写成reading()有区别</span>r<span class="token punctuation">.</span>setDaemon<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"The End"</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""结果reading 0The Endreading 1reading 2reading 3reading 4reading 5reading 6reading 7reading 8reading 9"""</span></code></pre><h4 id="线程的等待"><a href="#线程的等待" class="headerlink" title="线程的等待"></a>线程的等待</h4><blockquote><p>在多线程的程序中往往一个线程(例如主线程)要等待其他线程执行完毕才继续执行，这可以用join函数，使用方法是：<br><code>线程对象r.join()</code><br>意思是要等待r执行完毕其他线程才能继续执行<br>在一个线程代码中执行这条语句，当前的线程就会停止执行，一直等到指定的线程对象的线程执行完毕后才继续执行，即这条语句启动阻塞等待的作用</p></blockquote><p><em>code</em></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">import</span> time<span class="token keyword">import</span> random<span class="token keyword">def</span> <span class="token function">reading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"reading"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>reading<span class="token punctuation">)</span>r<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"The End"</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""结果reading 0reading 1reading 2reading 3reading 4The End"""</span></code></pre><h4 id="等待加后台线程"><a href="#等待加后台线程" class="headerlink" title="等待加后台线程"></a>等待加后台线程</h4><blockquote><p>主线程等待t线程，t线程调用r线程，t线程等待r线程，然后r线程结束，输出”the text e<br>nd”，然后输出”The End”</p></blockquote><p><em>code</em></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">import</span> time<span class="token keyword">import</span> random<span class="token keyword">def</span> <span class="token function">reading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"treading"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>reading<span class="token punctuation">)</span>    r<span class="token punctuation">.</span>setDaemon<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"the text end"</span><span class="token punctuation">)</span>t <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>test<span class="token punctuation">)</span>t<span class="token punctuation">.</span>setDaemon<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"The End"</span><span class="token punctuation">)</span><span class="token string">""</span>"结果<span class="token keyword">import</span> threading<span class="token keyword">import</span> time<span class="token keyword">import</span> random<span class="token keyword">def</span> <span class="token function">reading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"treading"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>reading<span class="token punctuation">)</span>    r<span class="token punctuation">.</span>setDaemon<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"the text end"</span><span class="token punctuation">)</span>t <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>test<span class="token punctuation">)</span>t<span class="token punctuation">.</span>setDaemon<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"The End"</span><span class="token punctuation">)</span><span class="token string">""</span></code></pre><h4 id="多线程与资源"><a href="#多线程与资源" class="headerlink" title="多线程与资源"></a>多线程与资源</h4><blockquote><p>在多个线程的程序中一个普遍存在的问题是，如果多个线程要竞争同时访问与改写公共资源，那么应该怎么样协调各个线程的关系。一个普遍使用方法是使用线程锁，Python使用threading._RLock()类来创建一个线程锁对象：<br>lock = threading._RLock()<br>这个对象lock有两个重要方法是<code>acquire()</code>和<code>release()</code></p></blockquote><ul><li>lock.acquire()和lock.release()<blockquote><ul><li><p>语句强迫lock获取线程锁，如果已经有另外的线程先调用了<code>acquire()</code>方法获取了线程锁而还没有调用<code>release()</code>释放锁，那么这个<code>lock.acquire()</code>就阻塞当前的线程，一直等待锁的控制权，直到别的线程释放锁后<code>lock.acquire()</code>就获取锁并解除阻塞，线程继续执行，执行后线程要调用<code>lock.release()</code>释放锁，不然别的线程会一直得不到锁的控制权</p></li><li><p>使用<code>acquire/release</code>的工作机制我们可以把一段修改公共资源的代码用<code>acquire()与release()</code>夹起来，这样就保证一次最多只有一个线程在修改公共资源，别的线程如果也要修改就必须等待，直到本线程调用<code>release()</code>释放锁后别的线程才能获取锁的控制权进行资源</p></li></ul></blockquote></li></ul><h4 id=""><a href="#" class="headerlink" title=""></a></h4><p><em>code</em></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">import</span> timelock <span class="token operator">=</span> threading<span class="token punctuation">.</span>_RLock<span class="token punctuation">(</span><span class="token punctuation">)</span>words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"p"</span><span class="token punctuation">,</span> <span class="token string">"m"</span><span class="token punctuation">,</span> <span class="token string">"e"</span><span class="token punctuation">,</span> <span class="token string">"f"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">increase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> words    <span class="token keyword">for</span> count <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        lock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"A acquire"</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> words<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                    t <span class="token operator">=</span> words<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                    words<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> words<span class="token punctuation">[</span>j<span class="token punctuation">]</span>                    words<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> t        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span> words<span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>        lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">decrease</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> words    <span class="token keyword">for</span> count <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        lock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"D acquire"</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> words<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                    t <span class="token operator">=</span> words<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                    words<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> words<span class="token punctuation">[</span>j<span class="token punctuation">]</span>                    words<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> t        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"D"</span><span class="token punctuation">,</span> words<span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>        lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>A <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>increase<span class="token punctuation">)</span>A<span class="token punctuation">.</span>setDaemon<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>A<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>D <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>decrease<span class="token punctuation">)</span>D<span class="token punctuation">.</span>setDaemon<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>D<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"The End"</span><span class="token punctuation">)</span><span class="token string">""</span>"结果A acquireA <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">'p'</span><span class="token punctuation">]</span>The EndA acquireA <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">'p'</span><span class="token punctuation">]</span>D acquireD <span class="token punctuation">[</span><span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">]</span>D acquireD <span class="token punctuation">[</span><span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">]</span>D acquireD <span class="token punctuation">[</span><span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">]</span>D acquireD <span class="token punctuation">[</span><span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">]</span>A acquireA <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">'p'</span><span class="token punctuation">]</span>D acquireD <span class="token punctuation">[</span><span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">]</span>A acquireA <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">'p'</span><span class="token punctuation">]</span>A acquireA <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">'p'</span><span class="token punctuation">]</span><span class="token string">""</span></code></pre><p>####注意事项</p><ul><li>有时候sleep太久会导致与理想结果不同</li><li>r = threading.Thread(target = reading)与t = threading.Thread(target = reading())是不同的</li><li><strong>python36通过将方法作为参数传入生成Thread对象 target不能带括号 否则就会由主线程执行…</strong>(别人的见解)</li><li><strong>调用函数，如果带括号，那么是调用函数运行后的结果，调用函数不带括号，调用的是函数本身</strong>(我认为)</li></ul><hr><h3 id="爬取网站复杂数据"><a href="#爬取网站复杂数据" class="headerlink" title="爬取网站复杂数据"></a>爬取网站复杂数据</h3><h4 id="准备-2"><a href="#准备-2" class="headerlink" title="准备"></a>准备</h4><blockquote><p>1.设计好books.html, program.html, database.html,network.html,mysql.html,java.html,python.html等网页文件以utf-8的编码存储在文件夹，个别修改过文件内容如下代码，其他见上一章</p></blockquote><blockquote><p>2.由于我们的Web服务器是本地的，因此下载图像非常快，而实际应用中的Web网站是远程的一个服务器，由于网络原因可能下载会比较慢，为了模拟这个过程，我们在server程序中设置了sleep，在每次返回一个网页或者图像函数getFile中都随机等待1-10秒，这个过程十分类似网络条件较差的情景，即访问任何一个网页或者图像都有1-10秒的延迟</p></blockquote><blockquote><p>3.对于客户端，我们设置了多线程，避免某个线程下载文件过慢，导致线程阻塞</p></blockquote><p><em>code</em></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>MySQL数据库<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    MySQL是一个关系型数据库管理系统，由瑞典MySQL AB 公司开发，目前属于 Oracle 旗下产品。MySQL 是最流行的关系型数据库管理系统之一，在 WEB 应用方面，MySQL是最好的 RDBMS (Relational Database Management System，关系数据库管理系统) 应用软件之一。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mysql.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>books.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>Java程序设计<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    Java是一门面向对象编程语言，不仅吸收了C++语言的各种优点，还摒弃了C++里难以理解的多继承、指针等概念，因此Java语言具有功能强大和简单易用两个特征。Java语言作为静态面向对象编程语言的代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.jpg<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>books.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>Python程序设计<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    Python是一种跨平台的计算机程序设计语言。是一种面向对象的动态类型语言，最初被设计用于编写自动化脚本(shell)，随着版本的不断更新和语言新功能的添加，越来越多被用于独立的、大型项目的开发。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>python.jpg<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>books.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p><em>server</em></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> flask<span class="token keyword">from</span> datetime <span class="token keyword">import</span> timedelta<span class="token keyword">import</span> os<span class="token keyword">import</span> time<span class="token keyword">import</span> randomapp <span class="token operator">=</span> flask<span class="token punctuation">.</span>Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SEND_FILE_MAX_AGE_DEFAULT'</span><span class="token punctuation">]</span> <span class="token operator">=</span> timedelta<span class="token punctuation">(</span>seconds<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">getFile</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> b<span class="token string">""</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">:</span>        fobj <span class="token operator">=</span> open<span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span>        data <span class="token operator">=</span> fobj<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        fobj<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> data@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> getFile<span class="token punctuation">(</span><span class="token string">"books.html"</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/&lt;section>"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">process</span><span class="token punctuation">(</span>section<span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">if</span> section <span class="token operator">!=</span> <span class="token string">""</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> getFile<span class="token punctuation">(</span>section<span class="token punctuation">)</span>    <span class="token keyword">return</span> data<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><em>client</em></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">import</span> threading<span class="token keyword">def</span> <span class="token function">download</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        resp <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>url<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>        data <span class="token operator">=</span> resp<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        fobj <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"download"</span> <span class="token operator">+</span> fileName<span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span>        fobj<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        fobj<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"download"</span><span class="token punctuation">,</span> fileName<span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">spider</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> urls    <span class="token keyword">if</span> url <span class="token operator">not</span> <span class="token keyword">in</span> urls<span class="token punctuation">:</span>        urls<span class="token punctuation">.</span>append<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            resp <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>url<span class="token punctuation">)</span>            data <span class="token operator">=</span> resp<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>            soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">"lxml"</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"h3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span>            links <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span>            divs <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span>            imgs <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>divs<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">and</span> len<span class="token punctuation">(</span>imgs<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>                note <span class="token operator">=</span> divs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text                <span class="token keyword">print</span><span class="token punctuation">(</span>note<span class="token punctuation">)</span>                url <span class="token operator">=</span> start_url <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> imgs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"src"</span><span class="token punctuation">]</span>                T <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>                    target<span class="token operator">=</span>download<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> imgs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"src"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                T<span class="token punctuation">.</span>setDaemon<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>                T<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>                threads<span class="token punctuation">.</span>append<span class="token punctuation">(</span>T<span class="token punctuation">)</span>            <span class="token keyword">for</span> link <span class="token keyword">in</span> links<span class="token punctuation">:</span>                href <span class="token operator">=</span> link<span class="token punctuation">[</span><span class="token string">"href"</span><span class="token punctuation">]</span>                url <span class="token operator">=</span> start_url <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> href                spider<span class="token punctuation">(</span>url<span class="token punctuation">)</span>                <span class="token keyword">pass</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>start_url <span class="token operator">=</span> <span class="token string">"http://127.0.0.1:5000"</span>urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>threads <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>spider<span class="token punctuation">(</span>start_url<span class="token punctuation">)</span><span class="token keyword">for</span> t <span class="token keyword">in</span> threads<span class="token punctuation">:</span>    t<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"The End"</span><span class="token punctuation">)</span></code></pre><h4 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li><code>soup.find("h3").text</code>是find(“h3”)再<strong>.text</strong></li><li><code>soup.select("h3")[0].text</code></li></ul><hr><h4 id="实践项目-–-爬取网站的图像"><a href="#实践项目-–-爬取网站的图像" class="headerlink" title="实践项目 – 爬取网站的图像"></a>实践项目 – 爬取网站的图像</h4><p><em>实践要求</em></p><blockquote><p>我们指定一个网站(例如中国天气网站)，可以爬取这个网站中的所有图像文件，同时把这些文件保存到程序锁在文件夹images子文件夹中，我们先设计一个单线程的爬取程序，这个程序会因为网站的某个图像下载过程缓慢而效率低下，为了提高爬取的效率我们还设计了一个多线程的爬取程序，在多线程程序中如果一个文件下载缓慢，那么也就是它爬取的那个线程缓慢，不影响别的线程</p></blockquote><p><em>网页解析</em></p><blockquote><p>f12,图片检查</p></blockquote><p><em>准备</em></p><blockquote><p>网站：“<a href="http://www.weather.com.cn/”" target="_blank" rel="noopener">http://www.weather.com.cn/”</a><br>start_url: “<a href="http://www.weather.com.cn/weather1d/101230101.shtml&quot;(这里用福州)" target="_blank" rel="noopener">http://www.weather.com.cn/weather1d/101230101.shtml"(这里用福州)</a><br><code>import threading</code>掌握单线程和多线程<br><code>from bs4 import BeautifulSoup,UnicodeDammit</code><br><code>BeautifulSoup</code>用来解析data,eg:”html”<br><code>UnicodeDammit</code>判断数据的解码形式，eg：”utf-8”,”gbk”<br>在工程目录下<strong>建立images文件夹</strong><br>模拟浏览器访问网站<br><code>urljoin()</code>，<a href="https://www.jianshu.com/p/20065f9b39bb" target="_blank" rel="noopener">参考</a><br>第一个参数是基础母站的url，第二个是需要拼接成绝对路径的url。即使后者完全没有前者的内容，也可以。<br>如果url2，是一个完整的url，则以后者的为准，所以，不管url2是不是短连接，都可以放进去拼接。</p></blockquote><h5 id="单线程爬取图像的程序"><a href="#单线程爬取图像的程序" class="headerlink" title="单线程爬取图像的程序"></a>单线程爬取图像的程序</h5><p><em>code</em></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> UnicodeDammit<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>requestheaders <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36"</span><span class="token punctuation">}</span>count <span class="token operator">=</span> <span class="token number">0</span>threads <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>start_url <span class="token operator">=</span> <span class="token string">"http://www.weather.com.cn/weather1d/101230101.shtml"</span><span class="token keyword">def</span> <span class="token function">download</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> count    <span class="token keyword">try</span><span class="token punctuation">:</span>        count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>url<span class="token punctuation">[</span>len<span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            ext <span class="token operator">=</span> url<span class="token punctuation">[</span>len<span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            ext <span class="token operator">=</span> <span class="token string">""</span>        req <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>        data <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>        data <span class="token operator">=</span> data<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        fobj <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"images\\"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token operator">+</span> ext<span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span>        fobj<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        fobj<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"download"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token operator">+</span> ext<span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">imageSpider</span><span class="token punctuation">(</span>start_url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> count    <span class="token keyword">try</span><span class="token punctuation">:</span>        urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        req <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>start_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>        data <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span>        data <span class="token operator">=</span> data<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        dammit <span class="token operator">=</span> UnicodeDammit<span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"utf-8"</span><span class="token punctuation">,</span> <span class="token string">"gbk"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        data <span class="token operator">=</span> dammit<span class="token punctuation">.</span>unicode_markup        soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">"lxml"</span><span class="token punctuation">)</span>        images <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> image <span class="token keyword">in</span> images<span class="token punctuation">:</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                src <span class="token operator">=</span> image<span class="token punctuation">[</span><span class="token string">"src"</span><span class="token punctuation">]</span>                url <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urljoin<span class="token punctuation">(</span>start_url<span class="token punctuation">,</span> src<span class="token punctuation">)</span>                <span class="token keyword">if</span> url <span class="token operator">not</span> <span class="token keyword">in</span> urls<span class="token punctuation">:</span>                    urls<span class="token punctuation">.</span>append<span class="token punctuation">(</span>url<span class="token punctuation">)</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>                    download<span class="token punctuation">(</span>url<span class="token punctuation">)</span>            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>imageSpider<span class="token punctuation">(</span>start_url<span class="token punctuation">)</span></code></pre><h5 id="多线程爬取图像的程序"><a href="#多线程爬取图像的程序" class="headerlink" title="多线程爬取图像的程序"></a>多线程爬取图像的程序</h5><p><em>code</em></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> UnicodeDammit<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">import</span> threadingheaders <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36"</span><span class="token punctuation">}</span>count <span class="token operator">=</span> <span class="token number">0</span>threads <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>start_url <span class="token operator">=</span> <span class="token string">"http://www.weather.com.cn/weather1d/101230101.shtml"</span><span class="token keyword">def</span> <span class="token function">download</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>url<span class="token punctuation">[</span>len<span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            ext <span class="token operator">=</span> url<span class="token punctuation">[</span>len<span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            ext <span class="token operator">=</span> <span class="token string">""</span>        req <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>        data <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>        data <span class="token operator">=</span> data<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        fobj <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"images\\"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token operator">+</span> ext<span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span>        fobj<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        fobj<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"downloaded"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token operator">+</span> ext<span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">imageSpider</span><span class="token punctuation">(</span>start_url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> threads    <span class="token keyword">global</span> count    <span class="token keyword">try</span><span class="token punctuation">:</span>        urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        req <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>start_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>        data <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span>        data <span class="token operator">=</span> data<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        dammit <span class="token operator">=</span> UnicodeDammit<span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"utf-8"</span><span class="token punctuation">,</span> <span class="token string">"gbk"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        data <span class="token operator">=</span> dammit<span class="token punctuation">.</span>unicode_markup        soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">"lxml"</span><span class="token punctuation">)</span>        images <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> image <span class="token keyword">in</span> images<span class="token punctuation">:</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                src <span class="token operator">=</span> image<span class="token punctuation">[</span><span class="token string">"src"</span><span class="token punctuation">]</span>                url <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urljoin<span class="token punctuation">(</span>start_url<span class="token punctuation">,</span> src<span class="token punctuation">)</span>                <span class="token keyword">if</span> url <span class="token operator">not</span> <span class="token keyword">in</span> urls<span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>                    count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span>                    T <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>download<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">)</span>                    T<span class="token punctuation">.</span>setDaemon<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>                    T<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>                    threads<span class="token punctuation">.</span>append<span class="token punctuation">(</span>T<span class="token punctuation">)</span>            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>imageSpider<span class="token punctuation">(</span>start_url<span class="token punctuation">)</span><span class="token keyword">for</span> t <span class="token keyword">in</span> threads<span class="token punctuation">:</span>    t<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"The End"</span><span class="token punctuation">)</span></code></pre><h4 id="注意事项-3"><a href="#注意事项-3" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>出现<strong>“python thread group argument must be none for now”</strong>错误时，检查一下调用threading.Thread()中target写了没有</li><li>出现<strong>“FileNotFoundError: [Errno 2] No such file or directory: ‘images/xsad.jpg’”</strong>，手动在工程项目文件夹下建立images文件夹</li><li>出现<strong>“can only concatenate str (not “int”) to str”</strong>，是因为print时数字需要str(count)</li><li>出现<strong>“[Errno 2] No such file or directory: ‘images\1.png’”</strong>，检查一下open()有无选择读入读写，或者读入读写选错</li></ul><hr><h3 id="Scrapy框架"><a href="#Scrapy框架" class="headerlink" title="Scrapy框架"></a>Scrapy框架</h3><h4 id="scrapy框架爬虫简介"><a href="#scrapy框架爬虫简介" class="headerlink" title="scrapy框架爬虫简介"></a>scrapy框架爬虫简介</h4><p><em>安装scrapy</em></p><blockquote><p>pip install scrapy</p></blockquote><p><em>建立项目</em></p><blockquote><p>scrapy startproject demo</p></blockquote><p><em>准备</em></p><blockquote><p>在F盘建立example文件夹<br>使用 scrapy startproject demo<br>在demo下还有一个demo<br>我们在example 下建立server服务器<br>在demo/demo/spiders下建立MySpider.py, run.py</p></blockquote><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><p><em>server</em></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> flask<span class="token keyword">from</span> datetime <span class="token keyword">import</span> timedeltaapp <span class="token operator">=</span> flask<span class="token punctuation">.</span>Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SEND_FILE_MAX_AGE_DEFAULT'</span><span class="token punctuation">]</span> <span class="token operator">=</span> timedelta<span class="token punctuation">(</span>seconds<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"测试 scrapy"</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><em>spider</em></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">MySpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 继承 scrapy里的Spider类</span>    name <span class="token operator">=</span> <span class="token string">"mySpider"</span>    <span class="token keyword">def</span> <span class="token function">start_requests</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        url <span class="token operator">=</span> <span class="token string">"http://127.0.0.1:5000"</span>        <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>parse<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>url<span class="token punctuation">)</span>        data <span class="token operator">=</span> response<span class="token punctuation">.</span>body<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span></code></pre><p><em>run.py</em></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> scrapy <span class="token keyword">import</span> cmdlinecmdline<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"scrapy crawl mySpider -s LOG_ENABLED=False"</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h5 id="注意事项-4"><a href="#注意事项-4" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li><strong>start_requests</strong> —request有s</li><li><code>cmdline.execute("scrapy crawl mySpider -s LOG_ENABLED=False".split())</code>用来代替cmd输入指令</li><li><em>run.py<em>如果不在指定运行的spider下，需要更改</em>setting.py</em></li><li>·<code>callback</code>不要写错了</li></ul><hr><h4 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析"></a>代码解析</h4><p><em>入口函数与入口地址</em></p><blockquote><p>在scrapy中我们使用了入口函数:</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">start_requests</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">"http://127.0.0.1:5000"</span>    <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> callback <span class="token operator">=</span> self<span class="token punctuation">.</span>parse<span class="token punctuation">)</span></code></pre><blockquote><p>实际上这个函数也可以用start_urls的入口地址来代替：<br><code>start_urls = ["http://127.0.0.1:5000"]</code><br>入口的地址可以有多个，因此start_urls是一个列表，入口函数与入口地址的作用一样的，都是引导函数的开始</p></blockquote><p><em>回调函数parse</em></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>url<span class="token punctuation">)</span>        data <span class="token operator">=</span> response<span class="token punctuation">.</span>body<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span></code></pre><blockquote><p><code>yield scrapy.Request(url = url, callback = self.parse)</code>建立一个scrapy.Request请求类，向这个类提供url参数，指明要爬取的网页地址，爬取网页完成后就执行默认的回调函数parse<br>回调函数<code>parse</code>包含一个scrapy.Response类的对象response，它是网站相应的一切信息，其中respnse.url是网站的网址，response.body是网站相应的二进制数据，即网页的内容，通过decode()编码后变成字符串</p></blockquote><p><em>yield</em></p><blockquote><p>yield是Python的一种特殊语句，主要作用是返回一个值等待被取走<br>scrapy的框架使用的是异步执行过程，因此大量使用yield语句<br>eg:</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> s<span class="token punctuation">:</span>        <span class="token keyword">yield</span> x    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"The End"</span><span class="token punctuation">)</span>f <span class="token operator">=</span> fun<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token keyword">for</span> e <span class="token keyword">in</span> f<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""结果&lt;generator object fun at 0x000002E0DA054E58>abcThe End"""</span></code></pre><p><em>run.py</em></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> scrapy <span class="token keyword">import</span> cmdlinecmdline<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"scrapy crawl mySpider -s LOG_ENABLED=False"</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><blockquote><p><em>run.py</em>用来代替在命令行里执行 scrapy crawl mySpider<br><code>LOG_ENABLED=False</code>不打印日志<br><code>mySpider</code>你给自己爬虫取的名字，不一定是文件名，爬虫的名字在你定义的<br><code>class MySpider(scrapy.Spider):name = "mySpider"</code></p></blockquote><hr><h4 id="xpath查找HTML元素"><a href="#xpath查找HTML元素" class="headerlink" title="xpath查找HTML元素"></a>xpath查找HTML元素</h4><ol><li>使用”//“表示文档下面的所有节点元素，用”/“表示当前节点的下一级节点</li></ol><p><em>code</em></p><pre class=" language-python"><code class="language-python">s <span class="token operator">=</span> select<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//title"</span><span class="token punctuation">)</span>s <span class="token operator">=</span> select<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//book/title"</span><span class="token punctuation">)</span></code></pre><ol start="2"><li>使用”.表示当前节点元素，用xpath可以连续调用，如果前一个xpath返回一个Selector的列表，那么这个列表可以继续调用xpath，功能是为每个列表元素调用xpath，最后结果是全部元素调用xpath汇总</li></ol><p><em>code</em></p><pre class=" language-python"><code class="language-python">s  <span class="token operator">=</span> select<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//book"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"./title"</span><span class="token punctuation">)</span></code></pre><ol start="3"><li>如果xpath返回的Selector对象列表，再次强调<code>extract()</code>函数会得到这些对象的元素文本的列表，使用<code>extract_first()</code>获取列表中的第一个元素值，如果列表为空extract_first()的值为None</li></ol><p><em>code</em></p><pre class=" language-python"><code class="language-python">s <span class="token operator">=</span> select<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//book/price"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>s <span class="token operator">=</span> select<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//book/price"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ol start="4"><li>xpath使用”/@attrName”得到一个Selector元素的attrName属性节点对象，属性节点对象也是一个Selector对象，通过extract()获取属性值</li></ol><p><em>code</em></p><pre class=" language-python"><code class="language-python">s <span class="token operator">=</span> select<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//book/@id"</span><span class="token punctuation">)</span></code></pre><ol start="5"><li>xpath使用”/text()”得到一个Selector元素包含的文本值，文本值节点对象也是一个Selector对象，通过extract()获取文本值</li></ol><p><em>code</em></p><pre class=" language-python"><code class="language-python">s <span class="token operator">=</span> select<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//book/title/text()"</span><span class="token punctuation">)</span></code></pre><ol start="6"><li>x’path使用”tag[condition]”来限定一个tag元素，其中condition时由这个tag的属性，文本等计算出的一个逻辑值。如果由多个条件，那么可以写成”tag[condition1][condition2]…[conditionN]”或者：”tag[conditon1 and condition2 and … and conditionN]”</li></ol><p><em>code</em></p><pre class=" language-python"><code class="language-python">s <span class="token operator">=</span> select<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//book/title[@lang = 'chinese']/text()"</span><span class="token punctuation">)</span></code></pre><ol start="7"><li>xpath可以使用<code>position()</code>来确定其中一个元素的限制，这个选择序号是从1开始的，不是从0开始编号的，还可以通过and，or等构造复杂的表达式</li></ol><p><em>code</em></p><pre class=" language-python"><code class="language-python">s <span class="token operator">=</span> select<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//book[position()=1]/title"</span><span class="token punctuation">)</span></code></pre><ol start="8"><li>xpath使用星号”*”代表任何Element节点，不包括Text，Comment的节点。</li></ol><p><em>code</em></p><pre class=" language-python"><code class="language-python">s <span class="token operator">=</span> select<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//bookstore/*/title"</span><span class="token punctuation">)</span></code></pre><ol start="9"><li>xpath使用”@*”代表任何属性，如果标签没有属性，是不会显示的</li></ol><p><em>code</em></p><pre class=" language-python"><code class="language-python">s <span class="token operator">=</span> select<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//book[@*]/title"</span><span class="token punctuation">)</span>s <span class="token operator">=</span> select<span class="token punctuation">(</span><span class="token string">"//@*"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 搜索文档所有属性节点</span></code></pre><ol start="10"><li>xpath使用”element/parent::*”选择element的父节点，这个节点只有一个。如果写成element/parent::tag，就指定element的tag父节点，除非element的父节点正好为&gt;<code>&lt;tag&gt;</code>节点，不然为None。(不包括Text节点)</li></ol><p><em>code</em></p><pre class=" language-python"><code class="language-python">s <span class="token operator">=</span> select<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//title[@lang='chinese']/parent::*"</span><span class="token punctuation">)</span></code></pre><ol start="11"><li>xpath使用”element/following-sibling::*“搜索element后面的同级的所有兄弟节点，使用”element/following-sibling::*[position()=1]”搜索element后面的同级的第一个兄弟节点。(不包括Text节点)</li></ol><p><em>code</em></p><pre class=" language-python"><code class="language-python">s <span class="token operator">=</span> select<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//a/following-sibling::*[position()=1]"</span><span class="token punctuation">)</span></code></pre><ol start="12"><li>xpath使用”element/preceding-sibling::*“搜索element前面的同级的所有兄弟节点，使用”element/preceding-sibling::*[position()=1]”搜索element前面的同级的第一个兄弟节点。(不包括Text节点)</li></ol><p><em>code</em></p><pre class=" language-python"><code class="language-python">s <span class="token operator">=</span> select<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//b/preceding-sibling::*[position()=1]"</span><span class="token punctuation">)</span></code></pre><h5 id="注意事项-5"><a href="#注意事项-5" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>在Selector返回是Selector列表对象的时候可以调用<code>extract()</code>，返回的是Selector对象的时候可以调用<code>extract()</code>和<code>extract_first()</code>;<code>extractor_first()</code>只能用于Selector对象</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>selector <span class="token keyword">import</span> Selector<span class="token keyword">import</span> oshtmlText <span class="token operator">=</span> b<span class="token string">""</span><span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"index.html"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    fobj <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"index.html"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span>    htmlText <span class="token operator">=</span> fobj<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    fobj<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># print(htmlText)</span>selector <span class="token operator">=</span> Selector<span class="token punctuation">(</span>text<span class="token operator">=</span>htmlText<span class="token punctuation">)</span>s <span class="token operator">=</span> selector<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//book"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"./title"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">//</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>代表了Selector对象</code></pre><ul><li>使用text()返回的是文本列表</li><li>查询父亲节点，子孙节点，兄弟节点。不包括Text,Comment节点</li><li><code>&lt;html&gt;</code>之上还有<code>&lt;document&gt;</code>标签</li><li>xpath使用”@*”代表任何属性，如果标签没有属性，是不会显示该标签的</li></ul><hr><h4 id="scrapy爬取与存储数据"><a href="#scrapy爬取与存储数据" class="headerlink" title="scrapy爬取与存储数据"></a>scrapy爬取与存储数据</h4><p><em>引入</em></p><blockquote><p>我们从一个网站爬取到的数据后往往要存储到数据库中，scrapy框架有十分方便的存储方法，为了说明这个存储的过程我们先建立一个简单的网站，然后写一个scrapy爬虫程序爬取数据，最后存储数据</p></blockquote><h5 id="建立Web网站"><a href="#建立Web网站" class="headerlink" title="建立Web网站"></a>建立Web网站</h5><p><em>index.html</em></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>books</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>book</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Python程序设计<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>author</span><span class="token punctuation">></span></span>James<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>author</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>publisher</span><span class="token punctuation">></span></span>清华大学出版社<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>publisher</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>book</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>book</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Java程序设计<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>author</span><span class="token punctuation">></span></span>Robert<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>author</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>publisher</span><span class="token punctuation">></span></span>人民邮政出版社<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>publisher</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>book</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>book</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>MySQL数据库<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>author</span><span class="token punctuation">></span></span>Steven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>author</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>publisher</span><span class="token punctuation">></span></span>高等教育出版社<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>publisher</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>book</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>books</span><span class="token punctuation">></span></span></code></pre><p><em>server.py</em></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> flask<span class="token keyword">import</span> os<span class="token keyword">from</span> datetime <span class="token keyword">import</span> timedeltaapp <span class="token operator">=</span> flask<span class="token punctuation">.</span>Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SEND_FILE_MAX_AGE_DEFAULT'</span><span class="token punctuation">]</span> <span class="token operator">=</span> timedelta<span class="token punctuation">(</span>seconds<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    html <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"index.html"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        fobj <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"index.html"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span>        html <span class="token operator">=</span> fobj<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        fobj<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print(html)</span>    <span class="token keyword">return</span> html<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h5 id="编写数据项目"><a href="#编写数据项目" class="headerlink" title="编写数据项目"></a>编写数据项目</h5><blockquote><p>在新建的工程目录下F:\exmple2\demo\demo目录存在的items.py就是用来设计项目类的，打开这个项目，改造文件如下形式:</p></blockquote><pre class=" language-python"><code class="language-python">    <span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span>    <span class="token comment" spellcheck="true"># Define here the models for your scraped items</span>    <span class="token comment" spellcheck="true"># See documentation in:</span>    <span class="token comment" spellcheck="true"># https://docs.scrapy.org/en/latest/topics/items.html</span>```python<span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">BookItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    title <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    author <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    publisher <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><blockquote><p>其中BookItem是我们设计的教材项目类，这个类必须从scrapy.Item类继承，在类中定义教材的字段项目，每个字段项目都是一个scrapy.Field对象，这里定义3个字段项目用来存储教材名称title，author，publisher<br>如果item是一个BookItem的对象那么可以通过item[“title”]，item[“author”]，item[“publisher”]来获取与设置各个字段的值</p></blockquote><h5 id="编写爬虫程序mySpider"><a href="#编写爬虫程序mySpider" class="headerlink" title="编写爬虫程序mySpider"></a>编写爬虫程序mySpider</h5><blockquote><p>数据的项目设计好后就可以编写爬虫程序如下:</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> demo<span class="token punctuation">.</span>items <span class="token keyword">import</span> BookItem<span class="token keyword">class</span> <span class="token class-name">MySpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">"mySpider"</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://127.0.0.1:5000'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            data <span class="token operator">=</span> response<span class="token punctuation">.</span>body<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>            selector <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Selector<span class="token punctuation">(</span>text<span class="token operator">=</span>data<span class="token punctuation">)</span>            books <span class="token operator">=</span> selector<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//book"</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> book <span class="token keyword">in</span> books<span class="token punctuation">:</span>                item <span class="token operator">=</span> BookItem<span class="token punctuation">(</span><span class="token punctuation">)</span>                item<span class="token punctuation">[</span><span class="token string">"title"</span><span class="token punctuation">]</span> <span class="token operator">=</span> book<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"./title/text()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>                item<span class="token punctuation">[</span><span class="token string">"author"</span><span class="token punctuation">]</span> <span class="token operator">=</span> book<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"./author/text()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>                item<span class="token punctuation">[</span><span class="token string">"publisher"</span><span class="token punctuation">]</span> <span class="token operator">=</span> book<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>                    <span class="token string">"./publisher/text()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">yield</span> item        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span></code></pre><blockquote><p><code>from demo.items import BookItem</code>从demo文件夹的items.py文件中引入BookItem类的定义<br><code>yield item</code>向上一级调用函数返回，接下来scrapy会把这个对象推送给与items.py同目录下的pipelines.py文件中的数据管道执行类处理数据</p></blockquote><h5 id="编写数据管道处理类"><a href="#编写数据管道处理类" class="headerlink" title="编写数据管道处理类"></a>编写数据管道处理类</h5><blockquote><p>在我们的scrapy框架中有的：F:\example2\demo\demo目录下有一个文件pipelines.py就是用来数据管道处理类文件，打开这个文件可以看到一个默认的管道类，修改并设计数据管道类如下；</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token operator">&lt;</span>!<span class="token operator">-</span><span class="token operator">-</span>  <span class="token operator">-</span><span class="token operator">*</span><span class="token operator">-</span> coding<span class="token punctuation">:</span> utf<span class="token number">-8</span> <span class="token operator">-</span><span class="token operator">*</span><span class="token operator">-</span><span class="token comment" spellcheck="true"># Define your item pipelines here</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Don't forget to add your pipeline to the ITEM_PIPELINES setting</span><span class="token comment" spellcheck="true"># See: https://docs.scrapy.org/en/latest/topics/item-pipeline.html</span><span class="token comment" spellcheck="true"># class DemoPipeline(object):</span><span class="token comment" spellcheck="true">#     def process_item(self, item, spider):</span><span class="token comment" spellcheck="true">#         return item --></span><span class="token keyword">class</span> <span class="token class-name">BookPipeline</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    count <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        BookPipeline<span class="token punctuation">.</span>count <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> BookPipeline<span class="token punctuation">.</span>count <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                fobj <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"books.txt"</span><span class="token punctuation">,</span> <span class="token string">"wt"</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                fobj <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"books.txt"</span><span class="token punctuation">,</span> <span class="token string">"at"</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token string">"title"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">[</span><span class="token string">"author"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">[</span><span class="token string">"publisher"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            fobj<span class="token punctuation">.</span>write<span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token string">"title"</span><span class="token punctuation">]</span> <span class="token operator">+</span> item<span class="token punctuation">[</span><span class="token string">"author"</span><span class="token punctuation">]</span> <span class="token operator">+</span>                       item<span class="token punctuation">[</span><span class="token string">"publisher"</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>            fobj<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>        <span class="token keyword">return</span> item</code></pre><blockquote><p>这个类我们命名为BookPipeline，它继承object类，类中最重要的函数是process_item函数，scrapy爬取数据开始时会建立一个BookPipeline类对象，然后每爬取一个数据类BookItem项目item，mySpider程序会把这个对象推送给BookPipeline对象，同时调用process_item函数一次。process_item函数的参数中的item就是推送来的数据，于是我们就可以在这个函数中保存爬取的数据了。注意scrapy要求process_item对象。<br>在我们这个程序中采用文件存储爬取的数据，BookPipeline类中先定义一个类成员count=0，用它来记录process_item调用的次数。如果是第一次调用(count = 1)那么就使用语句<code>fobj = open("books.txt","wt")</code>新建立一个books.txt的文件，然后把item的数据写到文件中。如果不是第一次调用(count &gt; 1)，就使用语句<code>fobj = open("books.txt","at")</code>打开以存在的文件books.txt，把item的数据追加到文件中。这样我们反复执行爬虫程序的过程保证每次清除掉上次的数据，记录本次爬取的数据</p></blockquote><h5 id="设置scrapy的配置文件"><a href="#设置scrapy的配置文件" class="headerlink" title="设置scrapy的配置文件"></a>设置scrapy的配置文件</h5><blockquote><p>mySpder爬虫程序执行后每爬取一个item项目都会推送到BookPipelines类并调用process_item函数，那么scrapy怎么样知道要这样做呢？前提是我们必须设置这样一个通道。<br>在demo文件夹中有一个settings.py的设置文件，打开这个文件可以看到很多设置项目，大部分是用#注释的语句，找到语句ITEM_PIPELINES的项目，把它设置如下形式:</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token operator">&lt;</span>!<span class="token operator">-</span><span class="token operator">-</span> <span class="token comment" spellcheck="true"># Configure item pipelines</span><span class="token comment" spellcheck="true"># See https://docs.scrapy.org/en/latest/topics/item-pipeline.html --></span>ITEM_PIPELINES <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'demo.pipelines.BookPipeline'</span><span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><blockquote><p>其中ITEM_PIPELINES是一个字典，把关键字改成  <code>'demo.pipelines.BookPipeline': 300,</code>,而BookPipelines就是我们在pipelines.py文件中设计的数据管道类的名称，后面的300是一个默认的整数，实际上它可以不是300，它可以是任何整数。<br>这样设置后就连通了爬虫程序mySpider的数据管道处理程序pipelines.py通道，scrapy工作时会把mySpider爬虫程序通过yield返回的每项数据推送给pipelines.py程序的BookPipelines类，并执行process_item函数，这样就可以保存数据了。</p></blockquote><p><strong>从上面的分析可以看到scrapy把数据爬取与数据存储分开处理，它们都是异步执行的，mySpider每爬取到一个数据项目item，就yield推送给pipelines程序存储，等待存储完毕后又再次爬取到一个数据项目item再次yield推送到pipelines.py程序，然后再次存储,……,这个过程一直进行下去，直到爬取过程结束，文件books.txt就存储了所有爬取数据了</strong></p><h5 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h5><ul><li>如果多个爬虫，pipelines该如何对应</li></ul><hr><h4 id="实践项目-–爬取网站图书数据"><a href="#实践项目-–爬取网站图书数据" class="headerlink" title="实践项目 –爬取网站图书数据"></a>实践项目 –爬取网站图书数据</h4><p><em>实践要求</em></p><blockquote><p>mongodb数据库 + scrapy框架，实现对当当网的指定类别图书爬取</p></blockquote><p><em>使用工具</em></p><blockquote><p>pycharm ，studio 3t（可选），sublime3（可选）</p></blockquote><p><em>具体步骤</em></p><blockquote><p>1.对网页进行解析<br>2.创建scrapy框架<br>3.连接数据库<br>4.编写爬虫</p></blockquote><ul><li>对网页进行解析<br>进入官网” <a href="http://search.dangdang.com/" target="_blank" rel="noopener">http://search.dangdang.com/</a> “，搜索python，随便找本书，右键检查，可以发现每本书的具体内容都写在 <code>&lt;li ddt-pit='' class = ''&gt;</code> 标签里，<br>书名(title)写在了 <code>&lt;li&gt;标签下的&lt;a title ='' ddclick=''&gt;</code> 标签里，<br>价格（price）写在了<code>&lt;p class = 'price'&gt;&lt;span class = 'search_now_price'&gt;&lt;/p&gt;</code>标签里，<br>详细情况（detail）写在了<code>&lt;p class = 'detail'&gt;&lt;/p&gt;</code>，<br>作者（author）写在了<code>&lt;p class = 'search_book_author'&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;</code>（第一个span）<br>日期（date） 写在了<code>&lt;p class = 'search_book_author'&gt;&lt;span&gt;text&lt;/span&gt;&lt;/p&gt;</code>里，（倒数第二个span）<br>出版社（publisher） 写在了<code>&lt;p class = 'search_book_author'&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;</code>里，（最后一个span）<br>翻页，（ctrl u）分析html界面发现，翻页标签<code>div[@class='paging']/ul[@name='Fy']/li[@class='next']/a/@href"</code>，可以通过网址发现” <a href="http://search.dangdang.com/?key=python&amp;act=input&amp;page_index=2" target="_blank" rel="noopener">http://search.dangdang.com/?key=python&amp;act=input&amp;page_index=2</a> “，act = input代表操作（可以不写），page_index代表页码，观察下面代码中 <code>class = next</code> 很容易发现</li></ul><pre class=" language-html"><code class="language-html">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>paging<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span>  <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Fy<span class="token punctuation">"</span></span> <span class="token attr-name">dd_name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>底部翻页<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                ........                                ........                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>next<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/?key<span class="token punctuation">=</span>python&amp;act<span class="token punctuation">=</span>input&amp;page_index<span class="token punctuation">=</span>3<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>下一页<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>下一页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>page_input<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>到第<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>t__cp<span class="token punctuation">'</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>text<span class="token punctuation">'</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>number<span class="token punctuation">'</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>2<span class="token punctuation">'</span></span><span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>click_get_page<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>确定<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bottom-page-turn<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p><em>使用BeautifulSoup解析html界面，然后找到自己需要标签的位置，做好分析</em></p><pre class=" language-python"><code class="language-python">    <span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token punctuation">,</span> UnicodeDammit    <span class="token keyword">import</span> scrapy    <span class="token keyword">import</span> os    <span class="token comment" spellcheck="true"># 在网页的&lt;li>标签下右键edit as html，全选，复制，将html储存为books.txt</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"books.txt"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        fobj <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"books.txt"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span>        data <span class="token operator">=</span> fobj<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        fobj<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        dammit <span class="token operator">=</span> UnicodeDammit<span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"utf-8"</span><span class="token punctuation">,</span> <span class="token string">"gbk"</span><span class="token punctuation">,</span> <span class="token string">"utf-16"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        data <span class="token operator">=</span> dammit<span class="token punctuation">.</span>unicode_markup        soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">"lxml"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>prettify<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>结果<br><img src="./1574772806534.png" alt="Alt text"></p><p><em>解析books.txt，想要获取的信息路径是否正确</em></p><pre class=" language-python"><code class="language-python">    <span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token punctuation">,</span> UnicodeDammit    <span class="token keyword">import</span> scrapy    <span class="token keyword">class</span> <span class="token class-name">TestItem</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""docstring for TestItem"""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">""</span>        self<span class="token punctuation">.</span>author <span class="token operator">=</span> <span class="token string">""</span>        self<span class="token punctuation">.</span>date <span class="token operator">=</span> <span class="token string">""</span>        self<span class="token punctuation">.</span>publisher <span class="token operator">=</span> <span class="token string">""</span>        self<span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token string">""</span>        self<span class="token punctuation">.</span>detail <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>title<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>author<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>date<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>price<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>publisher<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>detail<span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        fobj <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"books.txt"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span>        data <span class="token operator">=</span> fobj<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        fobj<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        dammit <span class="token operator">=</span> UnicodeDammit<span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"utf-8"</span><span class="token punctuation">,</span> <span class="token string">"utf-16"</span><span class="token punctuation">,</span> <span class="token string">"gbk"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        data <span class="token operator">=</span> dammit<span class="token punctuation">.</span>unicode_markup        selector <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Selector<span class="token punctuation">(</span>text<span class="token operator">=</span>data<span class="token punctuation">)</span>        li <span class="token operator">=</span> selector<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//li['@ddt-pit'][starts-with(@class,'line')]"</span><span class="token punctuation">)</span>        title <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"./a[position() = 1]/@title"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>        price <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>            <span class="token string">"./p[@class = 'price']/span[@class = 'search_now_price']/text()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>        author <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>            <span class="token string">"./p[@class = 'search_book_author']/span[position()=1]/a/@title"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>        publisher <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>            <span class="token string">"./p[@class = 'search_book_author']/span[position() = last()]/a/@title"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>        date <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>            <span class="token string">"./p[@class = 'search_book_author']/span[position() = last()-1]/text()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>        detail <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"./p[@class = 'detail']/text()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>        item <span class="token operator">=</span> TestItem<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># strip()用于移除字符串头尾指定的字符（默认空格或换行）或字符序列</span>        item<span class="token punctuation">.</span>title <span class="token operator">=</span> title<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> title <span class="token keyword">else</span> <span class="token string">""</span>        item<span class="token punctuation">.</span>author <span class="token operator">=</span> author<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> author <span class="token keyword">else</span> <span class="token string">""</span>        item<span class="token punctuation">.</span>date <span class="token operator">=</span> date<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token keyword">if</span> date <span class="token keyword">else</span> <span class="token string">""</span>        item<span class="token punctuation">.</span>publisher <span class="token operator">=</span> publisher<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> publisher <span class="token keyword">else</span> <span class="token string">""</span>        item<span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> price <span class="token keyword">else</span> <span class="token string">""</span>        item<span class="token punctuation">.</span>detail <span class="token operator">=</span> detail<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> detail <span class="token keyword">else</span> <span class="token string">""</span>        item<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span></code></pre><p>结果<br><img src="./1574772761792.png" alt="Alt text"></p><hr><ul><li><p>创建scrapy</p><blockquote><p>cmdline中， f: -&gt; md example3 -&gt; cd example3 -&gt;crawl startproject demo</p></blockquote></li><li><p>连接数据库</p><blockquote><p><a href="https://blog.csdn.net/qq_41281596/article/details/83088384" target="_blank" rel="noopener">参考博客</a><br>写在数据管道处理类，open_spider开启事务的同时连接mongodb数据库</p></blockquote></li></ul><pre class=" language-python"><code class="language-python">    <span class="token keyword">from</span> pymongo <span class="token keyword">import</span> MongoClient    <span class="token keyword">class</span> <span class="token class-name">BookPipeline</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">open_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"opened"</span><span class="token punctuation">)</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>client <span class="token operator">=</span> MongoClient<span class="token punctuation">(</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> <span class="token number">27017</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 连接本地服务器</span>                self<span class="token punctuation">.</span>mongodb <span class="token operator">=</span> self<span class="token punctuation">.</span>client<span class="token punctuation">[</span><span class="token string">'SpiderDB'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 连接数据库</span>                self<span class="token punctuation">.</span>user <span class="token operator">=</span> self<span class="token punctuation">.</span>mongodb<span class="token punctuation">[</span><span class="token string">'books'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 连接关系（表）</span>                <span class="token comment" spellcheck="true"># print(self.user)</span>                self<span class="token punctuation">.</span>user<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 清空关系里的数据</span>                self<span class="token punctuation">.</span>opened <span class="token operator">=</span> <span class="token boolean">True</span> <span class="token comment" spellcheck="true"># 数据库已连接</span>                self<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>                self<span class="token punctuation">.</span>open <span class="token operator">=</span> <span class="token boolean">False</span></code></pre><ul><li>编写爬虫</li></ul><p><em>f:/example3/demo/demo/spider/Myspider.py</em></p><pre class=" language-python"><code class="language-python">    <span class="token keyword">import</span> scrapy    <span class="token keyword">from</span> demo<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>items <span class="token keyword">import</span> BookItem    <span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token punctuation">,</span> UnicodeDammit    <span class="token keyword">class</span> <span class="token class-name">MySpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 继承 scrapy里的Spider类</span>        name <span class="token operator">=</span> <span class="token string">"mySpider"</span>        key <span class="token operator">=</span> <span class="token string">'python'</span>        source_url <span class="token operator">=</span> <span class="token string">'http://search.dangdang.com/'</span>        <span class="token keyword">def</span> <span class="token function">start_requests</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 搜索python时的网址</span>            url <span class="token operator">=</span> MySpider<span class="token punctuation">.</span>source_url <span class="token operator">+</span> <span class="token string">"?key="</span> <span class="token operator">+</span> MySpider<span class="token punctuation">.</span>key            <span class="token keyword">print</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>            <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>parse<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                dammit <span class="token operator">=</span> UnicodeDammit<span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"utf-8"</span><span class="token punctuation">,</span> <span class="token string">"utf-16"</span><span class="token punctuation">,</span> <span class="token string">"gbk"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                data <span class="token operator">=</span> dammit<span class="token punctuation">.</span>unicode_markup                selector <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Selector<span class="token punctuation">(</span>text<span class="token operator">=</span>data<span class="token punctuation">)</span>                lis <span class="token operator">=</span> selector<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>                        <span class="token comment" spellcheck="true"># starts-with()可以获取类似标签的信息。</span>                    <span class="token string">"//li['@ddt-pit'][starts-with(@class,'line')]"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># print(lis)</span>                <span class="token keyword">for</span> li <span class="token keyword">in</span> lis<span class="token punctuation">:</span>                    <span class="token comment" spellcheck="true"># li = selector.xpath("//li")</span>                    title <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"./a[position() = 1]/@title"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>                    price <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>                        <span class="token string">"./p[@class = 'price']/span[@class = 'search_now_price']/text()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>                    author <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>                        <span class="token string">"./p[@class = 'search_book_author']/span[position()=1]/a/@title"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>                    publisher <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>                        <span class="token string">"./p[@class = 'search_book_author']/span[position() = last()]/a/@title"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>                    date <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>                        <span class="token string">"./p[@class = 'search_book_author']/span[position() = last()-1]/text()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>                    detail <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>                        <span class="token string">"./p[@class = 'detail']/text()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>                    item <span class="token operator">=</span> BookItem<span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true"># strip()用于移除字符串头尾指定的字符（默认空格或换行）或字符序列</span>                    item<span class="token punctuation">[</span><span class="token string">"title"</span><span class="token punctuation">]</span> <span class="token operator">=</span> title<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> title <span class="token keyword">else</span> <span class="token string">""</span>                    item<span class="token punctuation">[</span><span class="token string">"author"</span><span class="token punctuation">]</span> <span class="token operator">=</span> author<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> author <span class="token keyword">else</span> <span class="token string">""</span>                    <span class="token comment" spellcheck="true"># date.strip()[1:]原文本第一个字符为/,所以从下表1开始</span>                    item<span class="token punctuation">[</span><span class="token string">"date"</span><span class="token punctuation">]</span> <span class="token operator">=</span> date<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token keyword">if</span> date <span class="token keyword">else</span> <span class="token string">""</span>                    item<span class="token punctuation">[</span><span class="token string">"publisher"</span><span class="token punctuation">]</span> <span class="token operator">=</span> publisher<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> publisher <span class="token keyword">else</span> <span class="token string">""</span>                    item<span class="token punctuation">[</span><span class="token string">"price"</span><span class="token punctuation">]</span> <span class="token operator">=</span> price<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> price <span class="token keyword">else</span> <span class="token string">""</span>                    item<span class="token punctuation">[</span><span class="token string">"detail"</span><span class="token punctuation">]</span> <span class="token operator">=</span> detail<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> detail <span class="token keyword">else</span> <span class="token string">""</span>                    <span class="token keyword">yield</span> item                <span class="token comment" spellcheck="true"># 翻页处理</span>                link <span class="token operator">=</span> selector<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>                                <span class="token string">"//div[@class='paging']/ul[@name='Fy']/li[@class='next']/a/@href"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>                      <span class="token comment" spellcheck="true"># 如果为空则为最后一页</span>                <span class="token keyword">if</span> link<span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 通过response.urljoin函数整理成绝对地址，这样调用parse函数，实现下一个网页的爬取</span>                    url <span class="token operator">=</span> response<span class="token punctuation">.</span>urljoin<span class="token punctuation">(</span>link<span class="token punctuation">)</span>                    <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>parse<span class="token punctuation">)</span>            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span></code></pre><p><em>f:/example3/demo/demo/items.py</em></p><pre class=" language-python"><code class="language-python">    <span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span>    <span class="token comment" spellcheck="true"># Define here the models for your scraped items</span>    <span class="token comment" spellcheck="true">#</span>    <span class="token comment" spellcheck="true"># See documentation in:</span>    <span class="token comment" spellcheck="true"># https://docs.scrapy.org/en/latest/topics/items.html</span>    <span class="token keyword">import</span> scrapy    <span class="token keyword">class</span> <span class="token class-name">BookItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>        title <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># scrapy字段</span>        author <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>        date <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>        publisher <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>        detail <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>        price <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><em>f:/example3/demo/demo/pipelines.py</em></p><pre class=" language-python"><code class="language-python">    <span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span>    <span class="token comment" spellcheck="true"># Define your item pipelines here</span>    <span class="token comment" spellcheck="true">#</span>    <span class="token comment" spellcheck="true"># Don't forget to add your pipeline to the ITEM_PIPELINES setting</span>    <span class="token comment" spellcheck="true"># See: https://docs.scrapy.org/en/latest/topics/item-pipeline.html</span>    <span class="token keyword">from</span> pymongo <span class="token keyword">import</span> MongoClient    <span class="token comment" spellcheck="true"># class DemoPipeline(object):</span>    <span class="token comment" spellcheck="true">#     def process_item(self, item, spider):</span>    <span class="token comment" spellcheck="true">#         return item</span>    <span class="token keyword">class</span> <span class="token class-name">BookPipeline</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">open_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"opened"</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>client <span class="token operator">=</span> MongoClient<span class="token punctuation">(</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> <span class="token number">27017</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>mongodb <span class="token operator">=</span> self<span class="token punctuation">.</span>client<span class="token punctuation">[</span><span class="token string">'SpiderDB'</span><span class="token punctuation">]</span>            self<span class="token punctuation">.</span>user <span class="token operator">=</span> self<span class="token punctuation">.</span>mongodb<span class="token punctuation">[</span><span class="token string">'books'</span><span class="token punctuation">]</span>            <span class="token comment" spellcheck="true"># print(self.user)</span>            self<span class="token punctuation">.</span>user<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>opened <span class="token operator">=</span> <span class="token boolean">True</span>            self<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>open <span class="token operator">=</span> <span class="token boolean">False</span>    <span class="token keyword">def</span> <span class="token function">close_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>opened<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>opened <span class="token operator">=</span> <span class="token boolean">False</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"closed"</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"总共爬取"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>count<span class="token punctuation">,</span> <span class="token string">"本书籍"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># print(item["title"])</span>            <span class="token comment" spellcheck="true"># print(item["author"])</span>            <span class="token comment" spellcheck="true"># print(item["publisher"])</span>            <span class="token comment" spellcheck="true"># print(item["date"])</span>            <span class="token comment" spellcheck="true"># print(item["price"])</span>            <span class="token comment" spellcheck="true"># print(item["detail"])</span>            <span class="token comment" spellcheck="true"># print()</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>opened<span class="token punctuation">:</span>                self<span class="token punctuation">.</span>user<span class="token punctuation">.</span>insert_one<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'title'</span><span class="token punctuation">:</span> item<span class="token punctuation">[</span><span class="token string">"title"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'author'</span><span class="token punctuation">:</span> item<span class="token punctuation">[</span><span class="token string">"author"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'publisher'</span><span class="token punctuation">:</span> item<span class="token punctuation">[</span><span class="token string">"publisher"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                                      <span class="token string">'date'</span><span class="token punctuation">:</span> item<span class="token punctuation">[</span><span class="token string">"date"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'price'</span><span class="token punctuation">:</span> item<span class="token punctuation">[</span><span class="token string">"price"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'detail'</span><span class="token punctuation">:</span> item<span class="token punctuation">[</span><span class="token string">"detail"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>count <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>        <span class="token keyword">return</span> item</code></pre><p><em>demo/demo/settings.py</em></p><pre class=" language-python"><code class="language-python">ITEM_PIPELINES <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'demo.pipelines.BookPipeline'</span><span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><p><em>demo/demo/spiders/run.py</em></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> scrapy <span class="token keyword">import</span> cmdlinecmdline<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"scrapy crawl mySpider -s LOG_ENABLED=False"</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h5 id="注意事项-6"><a href="#注意事项-6" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>防反爬虫<br>在settings.py里打开<pre class=" language-python"><code class="language-python">DEFAULT_REQUEST_HEADERS <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'Accept'</span><span class="token punctuation">:</span> <span class="token string">'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'</span><span class="token punctuation">,</span><span class="token string">'Accept-Language'</span><span class="token punctuation">:</span> <span class="token string">'en'</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre></li></ul><hr><h4 id="实践项目-–-爬取图书信息（改进）"><a href="#实践项目-–-爬取图书信息（改进）" class="headerlink" title="实践项目 – 爬取图书信息（改进）"></a>实践项目 – 爬取图书信息（改进）</h4><p><em>修改内容</em></p><blockquote><p>增加了对图片的爬取<br>增加了书名编号</p></blockquote><p><em>Myspider</em></p><ul><li>添加了  <code>def clearImages</code> 用来打开存储图片的文件夹以及清空旧图片</li><li>添加了 <code>def getFileExt</code> 用来获取图片的后缀名</li><li>在 <code>def parse</code> 中增加了对图片url的查询，以及编号（ID）的获取</li><li>添加了 <code>def download</code> 对图片进行下载</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> demo<span class="token punctuation">.</span>items <span class="token keyword">import</span> BookItem<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token punctuation">,</span> UnicodeDammit<span class="token keyword">import</span> os<span class="token keyword">class</span> <span class="token class-name">MySpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 继承 scrapy里的Spider类</span>    name <span class="token operator">=</span> <span class="token string">"mySpider"</span>    key <span class="token operator">=</span> <span class="token string">'python'</span>    source_url <span class="token operator">=</span> <span class="token string">'http://search.dangdang.com/'</span>    <span class="token keyword">def</span> <span class="token function">start_requests</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">0</span>        self<span class="token punctuation">.</span>clearImages<span class="token punctuation">(</span><span class="token punctuation">)</span>        url <span class="token operator">=</span> MySpider<span class="token punctuation">.</span>source_url <span class="token operator">+</span> <span class="token string">"?key="</span> <span class="token operator">+</span> MySpider<span class="token punctuation">.</span>key        <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>parse<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">clearImages</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># os.listdir() 方法用于返回指定的文件夹包含的文件或文件夹的名字的列表。</span>        fs <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">"images"</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> s <span class="token keyword">in</span> fs<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># os.path.join()函数用于路径拼接文件路径。</span>        <span class="token comment" spellcheck="true"># os.path.join()函数中可以传入多个路径：</span>            t <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">"images"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 删除图片</span>            os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>t<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">getFileExt</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># Python rindex() 返回子字符串 str 在字符串中最后出现的位置，如果没有匹配的字符串会报异常，你可以指定可选参数[beg:end]设置查找的区间。</span>        p <span class="token operator">=</span> url<span class="token punctuation">.</span>rindex<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> p <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">:</span>            s <span class="token operator">=</span> url<span class="token punctuation">[</span>p<span class="token punctuation">:</span><span class="token punctuation">]</span>            s <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">]</span>            <span class="token keyword">return</span> s    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 判断编码格式</span>            dammit <span class="token operator">=</span> UnicodeDammit<span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"utf-8"</span><span class="token punctuation">,</span> <span class="token string">"utf-16"</span><span class="token punctuation">,</span> <span class="token string">"gbk"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            data <span class="token operator">=</span> dammit<span class="token punctuation">.</span>unicode_markup            selector <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Selector<span class="token punctuation">(</span>text<span class="token operator">=</span>data<span class="token punctuation">)</span>            lis <span class="token operator">=</span> selector<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>                <span class="token string">"//li['@ddt-pit'][starts-with(@class,'line')]"</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> li <span class="token keyword">in</span> lis<span class="token punctuation">:</span>                title <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"./a[position() = 1]/@title"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>                price <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>                    <span class="token string">"./p[@class = 'price']/span[@class = 'search_now_price']/text()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>                author <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>                    <span class="token string">"./p[@class = 'search_book_author']/span[position()=1]/a/@title"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>                publisher <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>                    <span class="token string">"./p[@class = 'search_book_author']/span[position() = last()]/a/@title"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>                date <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>                    <span class="token string">"./p[@class = 'search_book_author']/span[position() = last()-1]/text()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>                detail <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>                    <span class="token string">"./p[@class = 'detail']/text()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>                url <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>                    <span class="token string">"./a[@name='itemlist-picture']/img/@data-original"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token operator">not</span> url<span class="token punctuation">:</span>                    url <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>                        <span class="token string">"./a[@name='itemlist-picture']/img/@src"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>count <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token comment" spellcheck="true"># 编号格式统一</span>                ID <span class="token operator">=</span> str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>count<span class="token punctuation">)</span>                <span class="token keyword">while</span> len<span class="token punctuation">(</span>ID<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">:</span>                    ID <span class="token operator">=</span> <span class="token string">"0"</span> <span class="token operator">+</span> ID                ext <span class="token operator">=</span> <span class="token string">""</span>                <span class="token keyword">if</span> url<span class="token punctuation">:</span>                    ext <span class="token operator">=</span> self<span class="token punctuation">.</span>getFileExt<span class="token punctuation">(</span>url<span class="token punctuation">)</span>                    url <span class="token operator">=</span> response<span class="token punctuation">.</span>urljoin<span class="token punctuation">(</span>url<span class="token punctuation">)</span>                    request <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>dont_filter<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>download<span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true"># request.meta 是一个Python字典，包含了所有本次HTTP请求的Header信息，比如用户IP地址和用户Agent,在这里我们添加了ID,ext等信息，作为后续回调函数download用来接受ID与ext准备</span>                    request<span class="token punctuation">.</span>meta<span class="token punctuation">[</span><span class="token string">"ID"</span><span class="token punctuation">]</span> <span class="token operator">=</span> ID                    request<span class="token punctuation">.</span>meta<span class="token punctuation">[</span><span class="token string">"ext"</span><span class="token punctuation">]</span> <span class="token operator">=</span> ext                    <span class="token keyword">yield</span> request <span class="token comment" spellcheck="true"># 异步调用</span>                item <span class="token operator">=</span> BookItem<span class="token punctuation">(</span><span class="token punctuation">)</span>                item<span class="token punctuation">[</span><span class="token string">"ID"</span><span class="token punctuation">]</span> <span class="token operator">=</span> ID                item<span class="token punctuation">[</span><span class="token string">"ext"</span><span class="token punctuation">]</span> <span class="token operator">=</span> ext                <span class="token comment" spellcheck="true"># strip()用于移除字符串头尾指定的字符（默认空格或换行）或字符序列</span>                item<span class="token punctuation">[</span><span class="token string">"title"</span><span class="token punctuation">]</span> <span class="token operator">=</span> title<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> title <span class="token keyword">else</span> <span class="token string">""</span>                item<span class="token punctuation">[</span><span class="token string">"author"</span><span class="token punctuation">]</span> <span class="token operator">=</span> author<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> author <span class="token keyword">else</span> <span class="token string">""</span>                item<span class="token punctuation">[</span><span class="token string">"date"</span><span class="token punctuation">]</span> <span class="token operator">=</span> date<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token keyword">if</span> date <span class="token keyword">else</span> <span class="token string">""</span>                item<span class="token punctuation">[</span><span class="token string">"publisher"</span><span class="token punctuation">]</span> <span class="token operator">=</span> publisher<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> publisher <span class="token keyword">else</span> <span class="token string">""</span>                item<span class="token punctuation">[</span><span class="token string">"price"</span><span class="token punctuation">]</span> <span class="token operator">=</span> price<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> price <span class="token keyword">else</span> <span class="token string">""</span>                item<span class="token punctuation">[</span><span class="token string">"detail"</span><span class="token punctuation">]</span> <span class="token operator">=</span> detail<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> detail <span class="token keyword">else</span> <span class="token string">""</span>                <span class="token keyword">yield</span> item            link <span class="token operator">=</span> selector<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>                <span class="token string">"//div[@class='paging']/ul[@name='Fy']/li[@class='next']/a/@href"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> link<span class="token punctuation">:</span>                url <span class="token operator">=</span> response<span class="token punctuation">.</span>urljoin<span class="token punctuation">(</span>link<span class="token punctuation">)</span>                <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>parse<span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">download</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            ID <span class="token operator">=</span> response<span class="token punctuation">.</span>meta<span class="token punctuation">[</span><span class="token string">"ID"</span><span class="token punctuation">]</span>            ext <span class="token operator">=</span> response<span class="token punctuation">.</span>meta<span class="token punctuation">[</span><span class="token string">"ext"</span><span class="token punctuation">]</span>            <span class="token comment" spellcheck="true"># 文件写入</span>            f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"images\\"</span> <span class="token operator">+</span> ID <span class="token operator">+</span> ext<span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">)</span>            f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"download"</span><span class="token operator">+</span>ID<span class="token operator">+</span>ext<span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span></code></pre><p><em>items.py</em></p><ul><li>增加了ID字段和ext字段</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">BookItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    ID <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    title <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    author <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    date <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    publisher <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    detail <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    price <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    ext <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><em>pipelines.py</em></p><ul><li><p>对数据库的插入操作添加了ID，ext数据</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pymongo <span class="token keyword">import</span> MongoClient<span class="token keyword">import</span> time<span class="token keyword">class</span> <span class="token class-name">BookPipeline</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">def</span> <span class="token function">open_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"opened"</span><span class="token punctuation">)</span>      <span class="token keyword">try</span><span class="token punctuation">:</span>          self<span class="token punctuation">.</span>client <span class="token operator">=</span> MongoClient<span class="token punctuation">(</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> <span class="token number">27017</span><span class="token punctuation">)</span>          self<span class="token punctuation">.</span>mongodb <span class="token operator">=</span> self<span class="token punctuation">.</span>client<span class="token punctuation">[</span><span class="token string">'SpiderDB'</span><span class="token punctuation">]</span>          self<span class="token punctuation">.</span>user <span class="token operator">=</span> self<span class="token punctuation">.</span>mongodb<span class="token punctuation">[</span><span class="token string">'books'</span><span class="token punctuation">]</span>          <span class="token comment" spellcheck="true"># print(self.user)</span>          self<span class="token punctuation">.</span>user<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>          self<span class="token punctuation">.</span>opened <span class="token operator">=</span> <span class="token boolean">True</span>          self<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">0</span>      <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>          <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>          self<span class="token punctuation">.</span>open <span class="token operator">=</span> <span class="token boolean">False</span>  <span class="token keyword">def</span> <span class="token function">close_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">if</span> self<span class="token punctuation">.</span>opened<span class="token punctuation">:</span>          self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>          self<span class="token punctuation">.</span>opened <span class="token operator">=</span> <span class="token boolean">False</span>          <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"closed"</span><span class="token punctuation">)</span>          <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"总共爬取"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>count<span class="token punctuation">,</span> <span class="token string">"本书籍"</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">try</span><span class="token punctuation">:</span>          <span class="token keyword">if</span> self<span class="token punctuation">.</span>opened<span class="token punctuation">:</span>              self<span class="token punctuation">.</span>user<span class="token punctuation">.</span>insert_one<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'id'</span><span class="token punctuation">:</span> item<span class="token punctuation">[</span><span class="token string">"ID"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'title'</span><span class="token punctuation">:</span> item<span class="token punctuation">[</span><span class="token string">"title"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'author'</span><span class="token punctuation">:</span> item<span class="token punctuation">[</span><span class="token string">"author"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'publisher'</span><span class="token punctuation">:</span> item<span class="token punctuation">[</span><span class="token string">"publisher"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                                    <span class="token string">'date'</span><span class="token punctuation">:</span> item<span class="token punctuation">[</span><span class="token string">"date"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'price'</span><span class="token punctuation">:</span> item<span class="token punctuation">[</span><span class="token string">"price"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'detail'</span><span class="token punctuation">:</span> item<span class="token punctuation">[</span><span class="token string">"detail"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'ext'</span><span class="token punctuation">:</span> item<span class="token punctuation">[</span><span class="token string">"ext"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>              self<span class="token punctuation">.</span>count <span class="token operator">+=</span> <span class="token number">1</span>      <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>          <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>      <span class="token keyword">return</span> item</code></pre></li></ul><pre><code>*settings.py*+ 开启了防反爬虫 `DEFAULT_REQUEST_HEADERS` + 忽略robots协议 `ROBOTSTXT_OBEY` ，能够对图片进行下载```pythonBOT_NAME = 'demo'SPIDER_MODULES = ['demo.spiders']NEWSPIDER_MODULE = 'demo.spiders'ROBOTSTXT_OBEY = FalseDEFAULT_REQUEST_HEADERS = {  'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',  'Accept-Language': 'en',}ITEM_PIPELINES = {    'demo.pipelines.BookPipeline': 300,}</code></pre><hr><h5 id="注意事项-7"><a href="#注意事项-7" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>记得关闭 <a href="https://www.cnblogs.com/jiuyang/p/7742524.html" target="_blank" rel="noopener">ROBOTSTXT_OBEY</a>和 开启 DEFAULT_REQUEST_HEADERS</li><li>图片的爬取<br><img src="./1574959770275.png" alt="Alt text"><br><img src="./1574960495673.png" alt="Alt text"></li></ul><blockquote><p>我们发现图片主要存储在data-original中，如果这里没有就在src中，使用chrome看到的src都有图片，但是下载的静态HTML网页中src找不到图片，估计这些src值是通过随后的JavaScript填入的，好在静态下载的HTML中的data-original有图片信息</p></blockquote><hr><h4 id="实践项目-–爬取招商银行外汇"><a href="#实践项目-–爬取招商银行外汇" class="headerlink" title="实践项目 –爬取招商银行外汇"></a>实践项目 –爬取招商银行外汇</h4><p><em>实践要求</em></p><blockquote><p>爬取外汇表<br><img src="./1576336052024.png" alt="Alt text"></p></blockquote><p><em>实践工具</em></p><blockquote><p>pycharm，studio 3T</p></blockquote><p><em>网页解析</em><br><img src="./1576336122110.png" alt="Alt text"><br><img src="./1576336239307.png" alt="Alt text"></p><p>注:tbody应该是JavaScript嵌入的</p><h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><p><em>spider.py</em></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> bs4 <span class="token keyword">import</span>  BeautifulSoup<span class="token punctuation">,</span> UnicodeDammit<span class="token keyword">from</span> demo<span class="token punctuation">.</span>items <span class="token keyword">import</span> BankItem<span class="token keyword">class</span> <span class="token class-name">MySpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">"mySpider"</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://fx.cmbchina.com/hq/'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            dammit <span class="token operator">=</span> UnicodeDammit<span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'utf-8'</span><span class="token punctuation">,</span><span class="token string">'gbk'</span><span class="token punctuation">,</span><span class="token string">'utf-16'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            data <span class="token operator">=</span> dammit<span class="token punctuation">.</span>unicode_markup            selector <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Selector<span class="token punctuation">(</span>text <span class="token operator">=</span> data<span class="token punctuation">)</span>            trs <span class="token operator">=</span> selector<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//div[@id = 'realRateInfo']//table//tr[position() != 1]"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 不取headertitle</span>            <span class="token comment" spellcheck="true"># print(trs)</span>            <span class="token keyword">for</span> tr <span class="token keyword">in</span> trs<span class="token punctuation">:</span>                name <span class="token operator">=</span> tr<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"./td[@class = 'fontbold']//text()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># print(name)</span>                price <span class="token operator">=</span> tr<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"./td[@align = 'center']//text()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># print(price)</span>                basic <span class="token operator">=</span> tr<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"./td[position() = 3]//text()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># print(basic)</span>                ex_selling_rate <span class="token operator">=</span> tr<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"./td[position() = 4]//text()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># print(ex_selling_rate)</span>                mo_selling_rate <span class="token operator">=</span> tr<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"./td[position() = 5]//text()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># print(mo_selling_rate)</span>                ex_buying_rate <span class="token operator">=</span> tr<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"./td[position() = 6]//text()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># print(ex_buying_rate)</span>                mo_buying_rate <span class="token operator">=</span> tr<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"./td[position() = 7]//text()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># print(mo_buying_rate)</span>                time <span class="token operator">=</span> tr<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"./td[position() = last()-1]//text()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># print(time)</span>                item <span class="token operator">=</span> BankItem<span class="token punctuation">(</span><span class="token punctuation">)</span>                item<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token operator">=</span> name<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> name <span class="token keyword">else</span> <span class="token string">""</span>                item<span class="token punctuation">[</span><span class="token string">"price"</span><span class="token punctuation">]</span> <span class="token operator">=</span> price<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> price <span class="token keyword">else</span> <span class="token string">""</span>                item<span class="token punctuation">[</span><span class="token string">"basic"</span><span class="token punctuation">]</span> <span class="token operator">=</span> basic<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> basic <span class="token keyword">else</span> <span class="token string">""</span>                item<span class="token punctuation">[</span><span class="token string">"ex_selling_rate"</span><span class="token punctuation">]</span> <span class="token operator">=</span> ex_selling_rate<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> ex_selling_rate <span class="token keyword">else</span> <span class="token string">""</span>                item<span class="token punctuation">[</span><span class="token string">"mo_selling_rate"</span><span class="token punctuation">]</span> <span class="token operator">=</span> mo_selling_rate<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> mo_selling_rate <span class="token keyword">else</span> <span class="token string">""</span>                item<span class="token punctuation">[</span><span class="token string">"ex_buying_rate"</span><span class="token punctuation">]</span> <span class="token operator">=</span> ex_buying_rate<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> ex_buying_rate <span class="token keyword">else</span> <span class="token string">""</span>                item<span class="token punctuation">[</span><span class="token string">"mo_buying_rate"</span><span class="token punctuation">]</span> <span class="token operator">=</span> mo_buying_rate<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> mo_buying_rate <span class="token keyword">else</span> <span class="token string">""</span>                item<span class="token punctuation">[</span><span class="token string">"time"</span><span class="token punctuation">]</span> <span class="token operator">=</span> time<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> time <span class="token keyword">else</span> <span class="token string">""</span>                <span class="token keyword">yield</span> item        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span></code></pre><p><em>items.py</em></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># Define here the models for your scraped items</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># See documentation in:</span><span class="token comment" spellcheck="true"># https://docs.scrapy.org/en/latest/topics/items.html</span><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">BankItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    price <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    basic <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    ex_selling_rate <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    mo_selling_rate <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    ex_buying_rate <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    mo_buying_rate <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    time <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><em>pipelines.py</em></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># Define your item pipelines here</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Don't forget to add your pipeline to the ITEM_PIPELINES setting</span><span class="token comment" spellcheck="true"># See: https://docs.scrapy.org/en/latest/topics/item-pipeline.html</span><span class="token keyword">from</span> pymongo <span class="token keyword">import</span> MongoClient<span class="token keyword">class</span> <span class="token class-name">BankPipeline</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">open_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"open"</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>client <span class="token operator">=</span> MongoClient<span class="token punctuation">(</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> <span class="token number">27017</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 连接客户端</span>            self<span class="token punctuation">.</span>mongodb <span class="token operator">=</span> self<span class="token punctuation">.</span>client<span class="token punctuation">[</span><span class="token string">'SpiderDB'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 连接数据库</span>            self<span class="token punctuation">.</span>user <span class="token operator">=</span> self<span class="token punctuation">.</span>mongodb<span class="token punctuation">[</span><span class="token string">'bank'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#连接关系</span>            self<span class="token punctuation">.</span>user<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#清除关系里的数据</span>            self<span class="token punctuation">.</span>opened <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>opened <span class="token operator">=</span> <span class="token boolean">False</span>    <span class="token keyword">def</span> <span class="token function">close_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>opened<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>opened <span class="token operator">=</span> <span class="token boolean">False</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"close"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>opened<span class="token punctuation">:</span>                self<span class="token punctuation">.</span>user<span class="token punctuation">.</span>insert_one<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> item<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'price'</span><span class="token punctuation">:</span> item<span class="token punctuation">[</span><span class="token string">'price'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'basic'</span><span class="token punctuation">:</span> item<span class="token punctuation">[</span><span class="token string">'basic'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                                      <span class="token string">'ex_selling_rate'</span><span class="token punctuation">:</span> item<span class="token punctuation">[</span><span class="token string">'ex_selling_rate'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                                      <span class="token string">'mo_selling_rate'</span><span class="token punctuation">:</span> item<span class="token punctuation">[</span><span class="token string">'mo_selling_rate'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'ex_buying_rate'</span><span class="token punctuation">:</span> item<span class="token punctuation">[</span><span class="token string">'ex_buying_rate'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                                      <span class="token string">'mo_buying_rate'</span><span class="token punctuation">:</span> item<span class="token punctuation">[</span><span class="token string">'mo_buying_rate'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                                      <span class="token string">'time'</span><span class="token punctuation">:</span> item<span class="token punctuation">[</span><span class="token string">'time'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>        <span class="token keyword">return</span> item</code></pre><p><em>settings.py</em></p><pre class=" language-python"><code class="language-python">ITEM_PIPELINES <span class="token operator">=</span> <span class="token punctuation">{</span>   <span class="token string">'demo.pipelines.BankPipeline'</span><span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><h5 id="注意事项-8"><a href="#注意事项-8" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li><code>from demo.items import BankItem</code>与<code>from demo.demo.items import BankItem</code>有区别，虽然第一种在pycharm会报错，但程序是可以执行的</li><li><code>TypeError: 'str' object doesn't support item deletion</code>可以查看一下Items.py是否缺少了相关的字段</li><li><code>from pymongo import MongoClient</code>连接MongoDB</li></ul><hr><h4 id="实践项目-–爬取景区信息"><a href="#实践项目-–爬取景区信息" class="headerlink" title="实践项目 –爬取景区信息"></a>实践项目 –爬取景区信息</h4><p><em>实践要求</em></p><blockquote><p>爬取景区的名字，类别，时间，等级，资源，酒店，图片等<br>网址：’<a href="http://scenic.cthy.com/scenicSearch/0-0-0-0-0-1.html'" target="_blank" rel="noopener">http://scenic.cthy.com/scenicSearch/0-0-0-0-0-1.html'</a></p></blockquote><p><em>实践工具</em></p><blockquote><p>pycharm，studio 3T</p></blockquote><p><em>具体步骤</em></p><blockquote><p>1.对网页进行解析<br>2.创建scrapy框架<br>3.用studio 3T创建关系表visit<br>4.连接数据库<br>5.编写爬虫</p></blockquote><p><em>页面解析</em></p><blockquote><p>常规（看代码就懂了）<br><img src="./1576940000850.png" alt="Alt text"><br><img src="./1576940016423.png" alt="Alt text"></p></blockquote><p><em>代码</em></p><p><em>MySpider.py</em></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token punctuation">,</span> UnicodeDammit<span class="token keyword">from</span> demo<span class="token punctuation">.</span>items <span class="token keyword">import</span> VisitItem<span class="token keyword">import</span> os<span class="token keyword">class</span> <span class="token class-name">MySpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">"mySpider"</span>    <span class="token comment" spellcheck="true"># start_urls = ['http://scenic.cthy.com/scenicSearch/0-0-201-0-0-1.html']</span>    <span class="token comment" spellcheck="true"># source_url = 'http://scenic.cthy.com/scenicSearch'</span>    <span class="token keyword">def</span> <span class="token function">start_requests</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">0</span>        <span class="token comment" spellcheck="true"># print(MySpider.source_url)</span>        self<span class="token punctuation">.</span>clearImages<span class="token punctuation">(</span><span class="token punctuation">)</span>        url <span class="token operator">=</span> <span class="token string">"http://scenic.cthy.com/scenicSearch/0-0-0-0-0-1.html"</span>        <span class="token comment" spellcheck="true"># print(url)</span>        <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>parse<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            dammit <span class="token operator">=</span> UnicodeDammit<span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'utf-8'</span><span class="token punctuation">,</span> <span class="token string">'gbk'</span><span class="token punctuation">,</span> <span class="token string">'utf-16'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            data <span class="token operator">=</span> dammit<span class="token punctuation">.</span>unicode_markup            <span class="token comment" spellcheck="true"># 写着写着就忘记写这句话了，程序一直报'str' object has no attribute 'xpath'，尴尬</span>            selector <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Selector<span class="token punctuation">(</span>text<span class="token operator">=</span>data<span class="token punctuation">)</span>            sights <span class="token operator">=</span> selector<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//div[@class = 'sightshow']"</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># print(sights)</span>            <span class="token comment" spellcheck="true"># print("here")</span>            <span class="token keyword">for</span> sight <span class="token keyword">in</span> sights<span class="token punctuation">:</span>                detail <span class="token operator">=</span> sight<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"./div[@class = 'sightdetail']"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># print(detail)</span>                name <span class="token operator">=</span> detail<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>                    <span class="token string">"./h4[position() = 1]/a/text()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># print(name)</span>                form <span class="token operator">=</span> detail<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>                    <span class="token string">"./ul[@class = 'sightbase']/li[position()=1]/a/text()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># print(form)</span>                source <span class="token operator">=</span> detail<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>                    <span class="token string">"./ul[@class = 'sightbase']/li[position()=2]/a/text()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># print(source)</span>                grade <span class="token operator">=</span> detail<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>                    <span class="token string">"./ul[@class = 'sightbase']/li[position()=3]/span[position() = 1]/a/text()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># print(grade)</span>                season <span class="token operator">=</span> detail<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>                    <span class="token string">"./ul[@class = 'sightbase']/li[position()=3]/a/text()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># print(season)</span>                hotels <span class="token operator">=</span> detail<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>                    <span class="token string">"./ul[@class = 'sighthotel']//a/text()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># print(hotels)</span>                url <span class="token operator">=</span> sight<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"./div[@class = 'sightimg']/a[*]/img/@src"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># print(url)</span>                self<span class="token punctuation">.</span>count <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>name<span class="token punctuation">)</span>                ID <span class="token operator">=</span> str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>count<span class="token punctuation">)</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>ID<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    ID <span class="token operator">=</span> <span class="token string">"0"</span><span class="token operator">+</span>ID                ext <span class="token operator">=</span> <span class="token string">""</span>                <span class="token keyword">if</span> url<span class="token punctuation">:</span>                    ext <span class="token operator">=</span> self<span class="token punctuation">.</span>getFileExt<span class="token punctuation">(</span>url<span class="token punctuation">)</span>                    url <span class="token operator">=</span> response<span class="token punctuation">.</span>urljoin<span class="token punctuation">(</span>url<span class="token punctuation">)</span>                    request <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>dont_filter<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> url<span class="token operator">=</span>url<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>download<span class="token punctuation">)</span>                    request<span class="token punctuation">.</span>meta<span class="token punctuation">[</span><span class="token string">"ID"</span><span class="token punctuation">]</span> <span class="token operator">=</span> ID                    request<span class="token punctuation">.</span>meta<span class="token punctuation">[</span><span class="token string">"ext"</span><span class="token punctuation">]</span> <span class="token operator">=</span> ext                    request<span class="token punctuation">.</span>meta<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token operator">=</span> name                    <span class="token keyword">yield</span> request                item <span class="token operator">=</span> VisitItem<span class="token punctuation">(</span><span class="token punctuation">)</span>                item<span class="token punctuation">[</span><span class="token string">"source"</span><span class="token punctuation">]</span> <span class="token operator">=</span> source<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> source <span class="token keyword">else</span> <span class="token string">""</span>                item<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token operator">=</span> name<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> name <span class="token keyword">else</span> <span class="token string">""</span>                item<span class="token punctuation">[</span><span class="token string">"form"</span><span class="token punctuation">]</span> <span class="token operator">=</span> form <span class="token keyword">if</span> form <span class="token keyword">else</span> <span class="token string">""</span>                item<span class="token punctuation">[</span><span class="token string">"season"</span><span class="token punctuation">]</span> <span class="token operator">=</span> season<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> season <span class="token keyword">else</span> <span class="token string">""</span>                item<span class="token punctuation">[</span><span class="token string">"hotels"</span><span class="token punctuation">]</span> <span class="token operator">=</span> hotels <span class="token keyword">if</span> hotels <span class="token keyword">else</span> <span class="token string">""</span>                item<span class="token punctuation">[</span><span class="token string">"grade"</span><span class="token punctuation">]</span> <span class="token operator">=</span> grade<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> grade <span class="token keyword">else</span> <span class="token string">""</span>                item<span class="token punctuation">[</span><span class="token string">"ID"</span><span class="token punctuation">]</span> <span class="token operator">=</span> ID                item<span class="token punctuation">[</span><span class="token string">"ext"</span><span class="token punctuation">]</span> <span class="token operator">=</span> ext                <span class="token keyword">yield</span> item            link <span class="token operator">=</span> selector<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//div[@id = 'pagelist']/ul[@id = 'PagerList']/li[position()=last()-1]/a/@href"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span>            <span class="token keyword">if</span> link<span class="token punctuation">:</span>                url <span class="token operator">=</span> response<span class="token punctuation">.</span>urljoin<span class="token punctuation">(</span>link<span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># scrapy TypeError: parse() missing 1 required positional argument: 'response'</span>                <span class="token comment" spellcheck="true">#self.parse() 和 self.parse 前者是执行 后者是地址</span>                <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> callback<span class="token operator">=</span> self<span class="token punctuation">.</span>parse<span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">clearImages</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        fs <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">"images"</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> s <span class="token keyword">in</span> fs<span class="token punctuation">:</span>            t <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">"images"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>            os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>t<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">getFileExt</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span>        p <span class="token operator">=</span> url<span class="token punctuation">.</span>rindex<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> p <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">:</span>            s <span class="token operator">=</span> url<span class="token punctuation">[</span>p<span class="token punctuation">:</span><span class="token punctuation">]</span>            s <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> s <span class="token keyword">if</span> s <span class="token keyword">else</span> <span class="token string">""</span>    <span class="token keyword">def</span> <span class="token function">download</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            ID <span class="token operator">=</span> response<span class="token punctuation">.</span>meta<span class="token punctuation">[</span><span class="token string">"ID"</span><span class="token punctuation">]</span>            ext <span class="token operator">=</span> response<span class="token punctuation">.</span>meta<span class="token punctuation">[</span><span class="token string">"ext"</span><span class="token punctuation">]</span>            name <span class="token operator">=</span> response<span class="token punctuation">.</span>meta<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span>            <span class="token comment" spellcheck="true"># print(ext.strip() == 'gif')</span>            <span class="token comment" spellcheck="true"># print(ext[len(ext)-1])</span>            <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"images"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                b <span class="token operator">=</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span>                os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>b<span class="token operator">+</span><span class="token string">"\\images"</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ext<span class="token punctuation">[</span>len<span class="token punctuation">(</span>ext<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">"f"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"images\\"</span><span class="token operator">+</span>ID<span class="token operator">+</span>name<span class="token operator">+</span>ext<span class="token punctuation">,</span><span class="token string">"wb"</span><span class="token punctuation">)</span>                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">)</span>                f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"download"</span><span class="token operator">+</span>ID<span class="token operator">+</span>ext<span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span></code></pre><p><em>items.py</em></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># Define here the models for your scraped items</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># See documentation in:</span><span class="token comment" spellcheck="true"># https://docs.scrapy.org/en/latest/topics/items.html</span><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">VisitItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># define the fields for your item here like:</span>    <span class="token comment" spellcheck="true"># name = scrapy.Field()</span>    ext <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    ID <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    form <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    season <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    hotels <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    grade <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    source <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><em>Pipelines.py</em></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># Define your item pipelines here</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Don't forget to add your pipeline to the ITEM_PIPELINES setting</span><span class="token comment" spellcheck="true"># See: https://docs.scrapy.org/en/latest/topics/item-pipeline.html</span><span class="token keyword">from</span> pymongo <span class="token keyword">import</span> MongoClient<span class="token keyword">class</span> <span class="token class-name">VisPipeline</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">open_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"open"</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>client <span class="token operator">=</span> MongoClient<span class="token punctuation">(</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> <span class="token number">27017</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>mongodb <span class="token operator">=</span> self<span class="token punctuation">.</span>client<span class="token punctuation">[</span><span class="token string">'SpiderDB'</span><span class="token punctuation">]</span>            self<span class="token punctuation">.</span>user <span class="token operator">=</span> self<span class="token punctuation">.</span>mongodb<span class="token punctuation">[</span><span class="token string">'visit'</span><span class="token punctuation">]</span>            self<span class="token punctuation">.</span>user<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>opened <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>opened <span class="token operator">=</span> <span class="token boolean">False</span>    <span class="token keyword">def</span> <span class="token function">close_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>opened<span class="token punctuation">:</span>                self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>opened <span class="token operator">=</span> <span class="token boolean">False</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"close"</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># pass</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>opened<span class="token punctuation">:</span>                self<span class="token punctuation">.</span>user<span class="token punctuation">.</span>insert_one<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'名字'</span><span class="token punctuation">:</span> item<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'类型'</span><span class="token punctuation">:</span> item<span class="token punctuation">[</span><span class="token string">'form'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'时间'</span><span class="token punctuation">:</span> item<span class="token punctuation">[</span>                                     <span class="token string">'season'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'等级'</span><span class="token punctuation">:</span> item<span class="token punctuation">[</span><span class="token string">'grade'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'资源'</span><span class="token punctuation">:</span> item<span class="token punctuation">[</span><span class="token string">'source'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'酒店'</span><span class="token punctuation">:</span> item<span class="token punctuation">[</span><span class="token string">'hotels'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>        <span class="token keyword">return</span> item</code></pre><p><em>settings.py</em></p><pre class=" language-python"><code class="language-python">ROBOTSTXT_OBEY <span class="token operator">=</span> <span class="token boolean">False</span>ITEM_PIPELINES <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'demo.pipelines.VisPipeline'</span><span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><h5 id="注意事项-9"><a href="#注意事项-9" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>若出现<code>scrapy TypeError: parse() missing 1 required positional argument: 'response'</code>可能是parse与parse()的问题， self.parse() 和 self.parse 前者是执行 后者是地址</li><li>若出现<code>'str' object has no attribute 'xpath'</code>,一可能是<code>selector = scrapy.Selector(text = data)</code>没写，二可能是，xpath提取的不是Selector对象，eg：A = selector.xpath().extract()，B = A.xpath()。<strong>extract()/extract_first()方法本身都是用去提取节点的内容的，不是用来提取页面元素的Selector封装，所以无法对于这些提取的节点，使用xpath来做下一步的选取。</strong></li><li><strong>由于gif图片无图</strong>，所以在程序中跳过了<code>if ext[len(ext)-1] != 'f'</code>，（如果写<code>ext != 'gif'</code>）不正确，（注’is’与’=’的区别）</li><li><code>if not os.path.exists("images"): b = os.getcwd() os.mkdir(b+"\\images")</code>新建文件夹，<code>os.getcwd()</code><strong>获取当前文件所在目录</strong>，<code>os.mkdir()</code><strong>创建文件夹</strong></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript声明文件</title>
      <link href="/2019/09/05/first/"/>
      <url>/2019/09/05/first/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown使用</title>
      <link href="/2019/09/05/markdown/"/>
      <url>/2019/09/05/markdown/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 标记语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 轻量级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PC端和移动端实现Typora数据同步</title>
      <link href="/2019/09/05/shi-xian-typora-shu-ju-tong-bu/"/>
      <url>/2019/09/05/shi-xian-typora-shu-ju-tong-bu/</url>
      
        <content type="html"><![CDATA[<h1 id="实现Typora-PC端与移动端同步"><a href="#实现Typora-PC端与移动端同步" class="headerlink" title="实现Typora PC端与移动端同步"></a>实现Typora PC端与移动端同步</h1><h2 id="所需设备"><a href="#所需设备" class="headerlink" title="所需设备"></a>所需设备</h2><ul><li><p>一台Windows 电脑 </p></li><li><p>iPhone(ios)</p></li></ul><h2 id="所需工具"><a href="#所需工具" class="headerlink" title="所需工具"></a>所需工具</h2><h3 id="PC端（Windows）"><a href="#PC端（Windows）" class="headerlink" title="PC端（Windows）"></a>PC端（Windows）</h3><p>-[✔] Typora</p><p>-[✔] PicGo</p><p>-[✔] 坚果云</p><p>-[] iCloud</p><p><img src="pic/image-20200330194502996-1588953467024.png" alt="image-20200330194502996"></p><h3 id="IOS-iPhone"><a href="#IOS-iPhone" class="headerlink" title="IOS(iPhone)"></a>IOS(iPhone)</h3><p>-[✔] 坚果云app</p><p>-[]iCloud</p><p>-[✔] TextCode Editor</p><p>-[✔] Markdown(能够打开md文件的app，特别是可以加载出图片的)</p><p>-[]MWeb</p><p><img src="pic/image-20200330195018745-1588953473849.png" alt="image-20200330195018745"></p><h2 id="各个设备介绍"><a href="#各个设备介绍" class="headerlink" title="各个设备介绍"></a>各个设备介绍</h2><h3 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h3><ul><li>是一款<strong>支持实时预览的 Markdown 文本编辑器</strong></li><li>目前<strong>只有Pc端，而没有移动端</strong>。且文件只能存储在电脑上</li><li><a href="https://sspai.com/post/54912" target="_blank" rel="noopener">具体参考</a></li></ul><h3 id="PicGo"><a href="#PicGo" class="headerlink" title="PicGo"></a>PicGo</h3><ul><li>图床工具，支持微博，七牛云，腾讯云COS，又拍云，GitHub，阿里云OSS，SM.MS，imgur 等8种常用图床</li><li>目前我用的是github的免费仓库，但是由于一些不可抗力，传上去的图，时好时坏。有条件的话，换个好的图床。 <a href="https://www.jianshu.com/p/9d91355e8418" target="_blank" rel="noopener">附带操作链接。</a></li></ul><h3 id="坚果云"><a href="#坚果云" class="headerlink" title="坚果云"></a>坚果云</h3><ul><li>用于同步电脑与移动端的文件。<a href="http://www.eryajf.net/2921.html" target="_blank" rel="noopener">附带操作链接。</a></li></ul><h3 id="TextCode-Editor（可选）"><a href="#TextCode-Editor（可选）" class="headerlink" title="TextCode Editor（可选）"></a>TextCode Editor（可选）</h3><ul><li>在手机上用来连接Github，可以导入你的仓库。</li></ul><h3 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h3><ul><li>在移动端来观看md文件，下载过坚果云markdown，却没办法加载出图片，（图片存在云端，不在本地）</li><li>MWeb好像也不错，但是目前没有打算涉及</li></ul><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="Typora-1"><a href="#Typora-1" class="headerlink" title="Typora"></a>Typora</h3><p><img src="https://raw.githubusercontent.com/SuperYch/picBed/master/img/image-20200330201402187.png" alt="image-20200330201402187"></p><ol><li>插入图片时：复制到指定路径，并选择<strong>优先使用相对路径</strong>，能够使得你写在md里的图片，保存在与md同文件夹下，当然可以在写个<code>./pic</code>那么就在当前目录创建一个pic文件夹，并存入图片。</li><li>上传服务：选择PicGo，并选择下载PicGo时的路径。</li><li>此时还不能进行图片验证，还需要更改PicGo里的端口号，具体见下述操作</li><li>在保证网络通畅情况下，你可以选择<strong>验证图片上传选项</strong>.</li><li>具体可以参考Typora使用手册（完成以上基本就可以了）</li></ol><h3 id="PicGo-1"><a href="#PicGo-1" class="headerlink" title="PicGo"></a>PicGo</h3><blockquote><p>打开PicGo –&gt; PicGo设置 –&gt; 设置Sever –&gt; 监听端口改为:36677</p></blockquote><img src="https://raw.githubusercontent.com/SuperYch/picBed/master/img/image-20200330202313366.png" alt="image-20200330202313366" style="zoom: 80%;"><h3 id="坚果云-1"><a href="#坚果云-1" class="headerlink" title="坚果云"></a>坚果云</h3><blockquote><p>记得在设置里更改坚果云云自启。防止浪费大量流量</p></blockquote><h3 id="TextCode-Editor"><a href="#TextCode-Editor" class="headerlink" title="TextCode  Editor"></a>TextCode  Editor</h3><blockquote><p>主页‘+’号 –&gt;关联Github账号</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
